<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringMVC 框架</title>
    <link href="/color-ful/2020/04/15/SpringMVC/"/>
    <url>/color-ful/2020/04/15/SpringMVC/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1-什么事SpringMVC？"><a href="#1-1-什么事SpringMVC？" class="headerlink" title="1.1 什么事SpringMVC？"></a>1.1 什么事SpringMVC？</h3><p>首先我们复习一下MVC原理</p><p><img src="/color-ful/img/springmvc/mvc%E5%8E%9F%E7%90%86%E5%9B%BE.png"></p><p><strong>MVC提倡：</strong>每一层只编写自己写的东西，不写任何其它的代码</p><p><strong>分层的目的：</strong>为了解耦，解耦为了维护方便和分工明确</p><p><strong>概述：</strong></p><p>​        SpringMVC 是⼀种基于Java 的实现MVC设计模型的请求类型的轻量级Web框架，属于Spring  FrameWork的后续产品，已经融合在Spring Web Flow ⾥⾯。Spring 框架提供了构建Web 应⽤程序的全功能MVC模块。使Spring 可插⼊的MVC架构，从⽽在使⽤Spring 进⾏WEB开发时，可以选择使⽤Spring 的Spring MVC 框架活着集成其他MVC开发框架，⽐如：Struts1.x、Struts2.x等。</p><ul><li>Spring 为展现层提供了基于MVC设计理念的优秀Web框架，是⽬前最主流的MVC框架之⼀。</li><li>Spring3.0 后全⾯的超越了Struts2.称为最优秀的MVC框架</li><li>Spring MVC通过⼀套MVC注解，让POJO成为处理请求的控制器，⽽⽆需实现任何接⼝，</li><li>⽀持REST ⻛格的URL请求</li><li>采⽤了松散耦合可插拔组件结构，⽐其他MVC框架更具扩展性和灵活性。</li></ul><p><strong>SpringMVC中的MVC：</strong></p><p><img src="/color-ful/img/springmvc/SpringMVC%E5%8E%9F%E7%90%86%E7%AE%80%E5%9B%BE.png"></p><h3 id="1-2-SpringMVC的优势"><a href="#1-2-SpringMVC的优势" class="headerlink" title="1.2 SpringMVC的优势"></a>1.2 SpringMVC的优势</h3><ol><li>清晰的角色划分<ul><li>前端控制器(DispatcherServlet)</li><li>请求到处理器映射(HandlerMapping)</li><li>处理器适配器(HandlerAdapter)</li><li>视图解析器(ViewResolver)</li><li>处理器或⻚⾯控制器(Controller)</li><li>验证器( Validator)</li><li>命令对象(Command 请求参数绑定到的对象就叫命令对象)</li><li>表单对象(Form Object 提供给表单展示和提交到的对象就叫表单对象)。</li></ul></li><li>分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要。</li><li>由于命令对象就是⼀个 POJO，⽆需继承框架特定 API，可以使用命令对象直接作为业务对象。</li><li>和 Spring 其他框架⽆缝集成，是其它 Web 框架所不具备的。</li><li>可适配，通过 HandlerAdapter 可以支持任意的类作为处理器。</li><li>可定制性，HandlerMapping、ViewResolver 等能够非常简单的定制。</li><li>功能强大的数据验证、格式化、绑定机制。</li><li>利用 Spring 提供的 Mock 对象能够⾮常简单的进⾏ Web 层单元测试。</li><li>本地化、主题的解析的支持，使我们更容易进⾏国际化和主题的切换。</li><li>强⼤的 JSP 标签库，使 JSP 编写更容易。</li><li>RESTful 风格的支持、简单的文件上传、约定大于配置的契约式编程支持、基于注解的零配置支持等。</li></ol><h3 id="1-3-SpringMVC的功能"><a href="#1-3-SpringMVC的功能" class="headerlink" title="1.3 SpringMVC的功能"></a>1.3 SpringMVC的功能</h3><ol><li>天⽣与Spring框架集成，如：(IOC,AOP)</li><li>⽀持Restful⻛格</li><li>进⾏更简洁的Web层开发</li><li>⽀持灵活的URL到⻚⾯控制器的映射</li><li>⾮常容易与其他视图技术集成，如:Velocity、FreeMarker等等。</li><li>因为模型数据不存放在特定的API⾥，⽽是在⼀个Model⾥(Map数据结构实现，因此很容易被其他框架使⽤)</li><li>⾮常灵活的数据验证、格式化和数据绑定机制、能使⽤任何对象进⾏数据绑定，不必实现特定框架的API</li><li>更加简单、强⼤的异常处理</li><li>对静态资源的⽀持</li><li>⽀持灵活的本地化、主题等解析</li></ol><h3 id="1-4-如何使用SpringMVC"><a href="#1-4-如何使用SpringMVC" class="headerlink" title="1.4 如何使用SpringMVC"></a>1.4 如何使用SpringMVC</h3><ul><li>将WEB层进行了解耦，它与Struts2一样，基于请求-响应模型</li><li>常用的主要组件：<ul><li>**<font color="red">DispatcherServlet</font>**：前端控制器，这个控件是SpringMVC 最核心的一个控件，顾名思义其实他就是一个Servlet，是Spring写好的一个Servlet</li><li><strong>Handler</strong> ：Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。由于Handler涉及到具体的用户业务请求，所以一般情况需要程序员根据业务需求开发Handler。</li><li><strong>HandlerMapping</strong> ：andlerMapping负责根据用户请求找到Handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。HandlAdapter：处理器适配器通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</li><li><strong>ViewResolver</strong> : View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。</li><li><strong>View</strong>：springmvc框架提供了很多的View视图类型的支持，包括：jstlView、freemarkerView、pdfView等。我们最常用的视图就是jsp。一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。</li><li><strong>Controller</strong>：用来处理业务逻辑的Java类</li><li><strong>LocalResolver</strong>：本地化、国际化</li><li><strong>MultipartResolver</strong>：⽂件上传解析器</li><li><strong>HandlerExceptionResolver</strong>：异常处理器</li></ul></li></ul><h2 id="二、入门案例"><a href="#二、入门案例" class="headerlink" title="二、入门案例"></a>二、入门案例</h2><p><font color="cornflowerblue">1. 新建Module</font></p><p><img src="/color-ful/img/springmvc/1.png" alt="image-20210331121353293"></p><p><img src="/color-ful/img/springmvc/2.png" alt="image-20210331121508436"></p><p><font color="cornflowerblue">2.导入相关依赖</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs xml">  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wdzl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>01_HelloSpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>01_HelloSpringMVC Maven Webapp<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.example.com<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>  <br><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Spring版本全局配置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.在web.xml中配置前端控制器</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">web-app</span> <span class="hljs-meta-keyword">PUBLIC</span></span><br><span class="hljs-meta"> <span class="hljs-meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><br><span class="hljs-meta"> <span class="hljs-meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>Archetype Created Web Application<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--DispatcherServlet 对象的创建是在使⽤时创建，如果需要在运⾏时创建，</span><br><span class="hljs-comment">    则需要通过load-on-startup 进⾏设置，数值越⼩，加载的优先级越⾼--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        / 拦截 所有请求</span><br><span class="hljs-comment">        /* 拦截所有请求，但是视图层的请求是不可以访问</span><br><span class="hljs-comment">        http://localhost:8080/springmvc/index.jsp</span><br><span class="hljs-comment">        http://localhost:8080/springmvc/hello</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4. 在项目中添加相应的目录结构，在 resources中创建SpringMVC配置文件：spring-mvc.xml</font></p><p><img src="/color-ful/img/springmvc/3.png" alt="image-20210331153411088"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注解扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wdzl..controller&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--视图解析器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;WEB-INF/pages/&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5. 编写视图层：修改index.jsp内容</font></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: LP<br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">3</span>/<span class="hljs-number">31</span><br>  Time: <span class="hljs-number">15</span>:<span class="hljs-number">39</span><br>  To change <span class="hljs-keyword">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Hello SpringMVC&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;a href=&quot;hello&quot;&gt;&lt;h2&gt;Hello SpringMVC&lt;/h2&gt;&lt;/a&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;&gt;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">6. 编写请求处理器，并表示为控制器，同时为类中的方法提供请求路径</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/success.jsp&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">7. 在 WEB-INF中新建一个jsp页面-hello.jsp</font></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: <span class="hljs-number">30526</span><br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">3</span>/<span class="hljs-number">31</span><br>  Time: <span class="hljs-number">15</span>:<span class="hljs-number">39</span><br>  To change <span class="hljs-keyword">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;Welcome&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h2 style=&quot;color: coral&quot;&gt;Hello&lt;/h2&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">8. 部署测试</font></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span>/index.jsp<br></code></pre></td></tr></table></figure><h3 id="2-1-入门案例中SpringMVC各组件的执行流程"><a href="#2-1-入门案例中SpringMVC各组件的执行流程" class="headerlink" title="2.1   入门案例中SpringMVC各组件的执行流程"></a>2.1   入门案例中SpringMVC各组件的执行流程</h3><p><img src="/color-ful/img/springmvc/4.png" alt="image-20210401110736040"></p><ol><li>用户发送请求至前端控制器<code>DispatcherServlet</code>。</li><li><code>DispatcherServlet</code>接收到请求后调用<code>HandlerMapping</code>处理器映射器</li><li>处理器映射器找到具体的处理器（根据XML或注解方式进行查找），生成处理器对象及处理器拦截器（有才会生成）一并返回给前端控制器</li><li><code>DispatcherServlet</code>调用<code>HandlerAdapther</code>处理器适配器。</li><li><code>HandlerAdapther</code>经过适配调用具体的处理器（<code>Controller</code>-后端控制器）。</li><li><code>Controlle</code> 执行完成后返回<code>ModelAndView</code>。</li><li><code>HandlerAdapther</code>将<code>ModelAndView</code>返回给 <code>DispatcherServlet</code></li><li><code>DispatcherServlet</code>将<code>ModelAndView</code>发送给<code>ViewResolver</code>视图解析器</li><li><code>ViewResolver</code>解析后返回具体的<code>View</code></li><li><code>DispatchServlet</code>根据<code>View</code>进行渲染视图（就是将Model中的数据填充到视图中）。<code>DispatcherServlet</code>响应用户</li></ol><h3 id="2-2-RequestMapping"><a href="#2-2-RequestMapping" class="headerlink" title="2.2  @RequestMapping"></a>2.2  @RequestMapping</h3><ul><li>SpringMVC 是使⽤@RequestMapping 注解为控制器指定可以处理哪些URL请求</li><li>在控制器的类及⽅法出都可以标注<ul><li>类定义处：提供初步的请求映射信息，相当于访问路径后的第一级目录</li><li>⽅法处：提供了更加细分的映射信息。拼接在类访问路径的后面</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello() Running...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">访问路径：</font></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/user/</span>hello<br></code></pre></td></tr></table></figure><p><strong>常用属性：</strong></p><ul><li><p>value: 用于指定请求URL，与path属性作用相同</p></li><li><p>method: 用于指定请求方式 - GET 或 POST</p></li><li><p>params: 用于限制请求的参数条件。它支持简单的表达式。</p><ul><li>params={“userName”},表示请求参数必须是有userName</li><li>params={“age!=10”},表示请求参数中age不能为10。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.controller;<br><br></code></pre></td></tr></table></figure></li></ul><p>import org.springframework.stereotype.Controller;<br>  import org.springframework.web.bind.annotation.RequestMapping;<br>  import org.springframework.web.bind.annotation.RequestMethod;</p><p>  /**<br>   *</p><ul><li>@author lp</li><li>@version 1.0<br> */</li></ul><pre><code>@Controller@RequestMapping(&quot;/user&quot;)public class HelloController &#123;  private int age;    @RequestMapping(value = &quot;/hello&quot;,params = &#123;&quot;age！=100&quot;&#125;,method = RequestMethod.GET)  public String hello() &#123;      System.out.println(&quot;hello() Running...&quot;);      return &quot;success&quot;;  &#125;&#125;</code></pre><h3 id="2-3-SpringMVC-组件扫描"><a href="#2-3-SpringMVC-组件扫描" class="headerlink" title="2.3 SpringMVC 组件扫描"></a>2.3 SpringMVC 组件扫描</h3><p>SpringMVC注解扫描的两种写法</p><p><strong>方式1：</strong></p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注解扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wdzl..controller&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>方式2：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注解扫描--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wdzl&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span>                    <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-4-SpringMVC-配置解析"><a href="#2-4-SpringMVC-配置解析" class="headerlink" title="2.4 SpringMVC 配置解析"></a>2.4 SpringMVC 配置解析</h3><p>SpringMVC中有一些默认的组件，我们也可以自定义的去配置组件，首先我们先看看有哪些默认组件。</p><p><font color="cornflowerblue">1.webmvc 包 中的 DispatcherServlet.properties</font></p><p><img src="/color-ful/img/springmvc/5.png" alt="image-20210406102631108"></p><p>该配置文件中配置了许多默认的组件，我们可以先找一些我们认识的，比如：处理器映射器，处理器适配器，视图解析器等。</p><p><font color="cornflowerblue">2. 进入视图解析器对应的类：InternalResourceViewResolver，再进入它的父类UrlBasedViewResolver</font></p><p><img src="/color-ful/img/springmvc/6.png" alt="image-20210406103040329"></p><p><img src="/color-ful/img/springmvc/7.png" alt="image-20210406103336068"></p><p>​        看到这两个变量，我们可以知道，SpringMVC跳转方式与二阶段相同也区分转发和重定向，默认方式为转发，所以在入门案例中，return语句可以稍作变形，效果是一样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/success.jsp&quot;</span>;<span class="hljs-comment">//转发：地址栏不变</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/success.jsp&quot;</span>;<span class="hljs-comment">//重定向：地址栏改变</span><br></code></pre></td></tr></table></figure><p>​        接下来，我们在webapp目录下新建一级目录：pages,然后将success.jsp移动到该路径下。路径发生了改变，则相应的跳转路径也需要改变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/pages/success.jsp&quot;</span>;<br></code></pre></td></tr></table></figure><p>​        这样写比较麻烦，我们可以通过SpringMVC配置文件去配置一下跳转路径的前缀和后缀。（此种情况只在不指定跳转方式的情况下生效）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置内部资源视图解析器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/pages/&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="三、-SpringMVC-的数据响应"><a href="#三、-SpringMVC-的数据响应" class="headerlink" title="三、 SpringMVC 的数据响应"></a>三、 SpringMVC 的数据响应</h2><p>我们首先从两大部分入手</p><ol><li>页面跳转<ul><li>直接返回字符串</li><li>通过ModelAndView对象返回</li></ul></li><li>回写数据<ul><li>直接返回字符串</li><li>返回对象或集合</li></ul></li></ol><h3 id="3-1-页面跳转-直接返回字符串"><a href="#3-1-页面跳转-直接返回字符串" class="headerlink" title="3.1 页面跳转 - 直接返回字符串"></a>3.1 页面跳转 - 直接返回字符串</h3><p>直接返回字符串：此种方式会将返回的字符串与视图解析器的前后缀进行拼接，然后跳转。</p><p><strong>1. 直接返回字符串</strong></p><p><img src="/color-ful/img/springmvc/8.png" alt="image-20210406165343753"></p><p><strong>2. 返回带前缀的字符串</strong></p><ul><li><p>转发：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/success.jsp&quot;</span>;<span class="hljs-comment">//转发：地址栏不变</span><br></code></pre></td></tr></table></figure></li><li><p>重定向：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/success.jsp&quot;</span>;<span class="hljs-comment">//重定向：地址栏改变</span><br></code></pre></td></tr></table></figure></li><li><p><font color="red">注意：</font></p><p>重定向的资源一定是具有外部访问权限的资源，比如 “WEB-INF” 外部是访问不到的。</p></li></ul><h3 id="3-2-页面跳转-返回ModelAndView"><a href="#3-2-页面跳转-返回ModelAndView" class="headerlink" title="3.2 页面跳转  -  返回ModelAndView"></a>3.2 页面跳转  -  返回ModelAndView</h3><p>​        从入门案例演示效果中，我们不难看出，跳转的资源和方式 与返回值有关，所以这次我们将Controller中的方法返回值进行修改，这次我们返回ModelAndView对象</p><p><strong>方式1：</strong></p><p><font color="cornflowerblue">1. 我们在入门案例项目中的HelloController类中添加一个方法。</font></p><p><img src="/color-ful/img/springmvc/9.png" alt="image-20210406233412651"></p><p>其中：</p><ul><li><font color="red">Model - 模型</font>：用于封装数据</li><li><font color="red">View - 视图</font>：用于展示数据，功能类似于Servlet中的转发或重定向的功能</li><li>setViewName()：设置跳转的视图名称。会与配置文件中视图解析器的前后缀进行拼接</li><li>addObject()：设置模型数据，类似于Servlet中的setAttribute()，使用键值对进行存储。</li></ul><p><font color="cornflowerblue">2. 在跳转页面中添加EL表达式</font></p><p><img src="/color-ful/img/springmvc/10.png" alt="image-20210406234240434"></p><p><font color="cornflowerblue">3.结果</font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">success<br>刘德华<br></code></pre></td></tr></table></figure><p><strong>方式2：</strong></p><p><font color="cornflowerblue">1.在上一个项目的基础上再写一个方法，这次我们将ModelAndView设置为形参，在方法中直接调用ModelAndView</font></p><p>​        方式2采用的是注入的思想，就类似与Servlet中的 doGet 和 doPost 中 Request 和 Response对象是一样的，方法中只定义了形参，谁调用方法，就负责传递实参，而我们Controller中的方法都是供SpringMVC调用的，所以实参就由SpringMVC去传递。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/hello3&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">hello3</span><span class="hljs-params">(ModelAndView modelAndView)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;hello3() Running...&quot;</span>);<br>    modelAndView.setViewName(<span class="hljs-string">&quot;success&quot;</span>);<br>    modelAndView.addObject(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;刘德华&quot;</span>);<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 测试：效果与上一次相同</font></p><p><font color="cornflowerblue">3.再写一个方法，返回值为String，参数为Model对象</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/hello4&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello4</span><span class="hljs-params">(Model model)</span> </span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;周杰伦&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-页面跳转-传递域对象"><a href="#3-3-页面跳转-传递域对象" class="headerlink" title="3.3 页面跳转 - 传递域对象"></a>3.3 页面跳转 - 传递域对象</h3><p>当我们需要使用传统域对象时，我们也可以将域对象作为参数进行传递。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/hello5&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello5</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>    request.setAttribute(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;林俊杰&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-回写数据-返回字符串"><a href="#3-4-回写数据-返回字符串" class="headerlink" title="3.4 回写数据 - 返回字符串"></a>3.4 回写数据 - 返回字符串</h3><p><strong>方式1：使用HttpServletResponse对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/hello6&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello6</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        response.getWriter().println(<span class="hljs-string">&quot;Hello SpringMVC&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方式2：使用注解方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/hello7&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><span class="hljs-comment">//不进行视图跳转，直接进行数据响应</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello7</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello SpringMVC&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-回写数据-返回JSON字符串"><a href="#3-5-回写数据-返回JSON字符串" class="headerlink" title="3.5 回写数据 - 返回JSON字符串"></a>3.5 回写数据 - 返回JSON字符串</h3><p><strong>方式1：直接返回JSON字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/hello8&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><span class="hljs-comment">//不进行视图跳转，直接进行数据响应</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello8</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;\&quot;username\&quot;:\&quot;ZhouJieLun\&quot;,\&quot;age\&quot;:30&#125;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方式2：使用转换工具将对象转换为JSON字符串并返回</strong></p><p><font color="cornflowerblue">1. 在pom.xml中导包</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--JSON依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-annotations<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.编写方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/hello9&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><span class="hljs-comment">//不进行视图跳转，直接进行数据响应</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello9</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setName(<span class="hljs-string">&quot;wangmazi&quot;</span>);<br>    user.setAge(<span class="hljs-number">20</span>);<br>    <span class="hljs-comment">//使用Json转换工具将对象转换成json格式字符串并返回</span><br>    ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>    String json = mapper.writeValueAsString(user);<br>    <span class="hljs-keyword">return</span> json;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-6-回写数据-返回对象"><a href="#3-6-回写数据-返回对象" class="headerlink" title="3.6 回写数据 -  返回对象"></a>3.6 回写数据 -  返回对象</h3><p>​        在 3.5  的方式2中，如果每次转换都需要我们去手动转换的话，那就太麻烦了，我们可以通过配置SpringMVC适配器来完成这个功能。</p><p>​        我们先去配置文件中看看使用的是哪一个适配器：webmvc包中的 ：DispatcherServlet.properties</p><p><img src="/color-ful/img/springmvc/11.png" alt="image-20210407160948128"></p><p><strong>方式1：</strong>     </p><p><font color="cornflowerblue">1. 在spring-mvc.xml 中配置处理器适配器.</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置处理器适配器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;messageConverters&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 在Controller中添加相应方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/hello10&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><span class="hljs-comment">//不进行视图跳转，直接进行数据响应</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">hello10</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setName(<span class="hljs-string">&quot;hanmeimei&quot;</span>);<br>        user.setAge(<span class="hljs-number">40</span>);<br>        <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.地址栏输入直接测试</font></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/user/</span>hello10<br></code></pre></td></tr></table></figure><p><strong>方式2：简化配置</strong></p><p>​        在方法上添加@ResponseBody就可以返回JSON格式的字符串，但是配置比较麻烦，我们可以使用MVC的注解驱动来代替上述配置</p><p>​        先在配置文件中加入命名空间</p><p><img src="/color-ful/img/springmvc/12.png" alt="image-20210408100919179"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mvc注解驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>​            在SpringMVC的各个组件中，处理器映射器、处理器适配器、视图解析器称为MVC三大组件。使用<code>&lt;mvc:annotation&gt;</code>可以自动加载 处理器映射器 和 处理器适配器，并且默认底层会集成jackson进行对象或集合的JSON格式字符串的转换。</p><h2 id="四、SpringMVC-获取请求参数"><a href="#四、SpringMVC-获取请求参数" class="headerlink" title="四、SpringMVC 获取请求参数"></a>四、SpringMVC 获取请求参数</h2><p>服务器端需要获取请求参数，有时还需要进行数据的封装，SpringMVC可以接收如下类型的参数：</p><ul><li>基本数据类型</li><li>POJO类型</li><li>数组类型</li><li>集合类型</li></ul><p>接下来我们分别去讲解这几类情况</p><h3 id="4-1-获取请求-基本数据类型参数"><a href="#4-1-获取请求-基本数据类型参数" class="headerlink" title="4.1 获取请求 -  基本数据类型参数"></a>4.1 获取请求 -  基本数据类型参数</h3><p>在Controller中，只要业务方法的形参，与请求参数同名，SpringMVC就可以自动将请求参数封装到形参中。</p><p><font color="cornflowerblue">1.编写业务方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/hello11&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><span class="hljs-comment">//不进行页面跳转，否则会报404</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello11</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>    System.out.println(name);<br>    System.out.println(age);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.测试</font></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/user/</span>hello11?name=张三&amp;age=<span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><h3 id="4-2-获取请求-POJO类型参数"><a href="#4-2-获取请求-POJO类型参数" class="headerlink" title="4.2 获取请求 -  POJO类型参数"></a>4.2 获取请求 -  POJO类型参数</h3><p>​        在Controller中，在业务方法声明中，形参的属性与 请求参数同名，并提供相应 get、set 方法，SpringMVC会自动将参数封装到对象中。</p><p><strong>pojo:</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户实体类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author <span class="hljs-variable">lp</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version </span>1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> name;<br>    <span class="hljs-keyword">private</span> int age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> int <span class="hljs-function"><span class="hljs-title">getAge</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setAge</span>(<span class="hljs-params">int age</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>controller：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/hello12&quot;)</span><br>  <span class="hljs-meta">@ResponseBody</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello12</span><span class="hljs-params">(User user)</span> </span>&#123;<br>      System.out.println(user.getName());<br>      System.out.println(user.getAge());<br>  &#125;<br></code></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/user/</span>hello12?name=刘德华&amp;age=<span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><h3 id="4-3-获取请求-数组类型参数"><a href="#4-3-获取请求-数组类型参数" class="headerlink" title="4.3 获取请求 - 数组类型参数"></a>4.3 获取请求 - 数组类型参数</h3><p>在Controller中，只要业务方法的形参，与请求参数同名，SpringMVC就可以自动将请求参数封装到形参集合中。</p><p><strong>controller：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/hello13&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello13</span><span class="hljs-params">(String[] name)</span> </span>&#123;<br>    System.out.println(Arrays.toString(name));<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/user/</span>hello13?name=aaa&amp;name=bbb&amp;name=ccc<br></code></pre></td></tr></table></figure><h3 id="4-4-获取请求-集合类型参数"><a href="#4-4-获取请求-集合类型参数" class="headerlink" title="4.4 获取请求 - 集合类型参数"></a>4.4 获取请求 - 集合类型参数</h3><p><strong>场景1：</strong></p><p>集合类型不能直接作为方法参数，我们需要借助包装类来进行参数封装</p><p><font color="cornflowerblue">1. 定义包装类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包装类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vo</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;User&gt; userList;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userList;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserList</span><span class="hljs-params">(List&lt;User&gt; userList)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userList = userList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 定义Controller中的方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/hello14&quot;)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello14</span><span class="hljs-params">(Vo vo )</span> </span>&#123;<br>       System.out.println(vo.getUserList().size());<br>       List&lt;User&gt; list = vo.getUserList();<br>       <span class="hljs-keyword">for</span> (User user : list) &#123;<br>           System.out.println(user.getName()+<span class="hljs-string">&quot;--&quot;</span>+user.getAge());<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 编写前端页面</font></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/hello14&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;userList[0].name&quot;</span> value=<span class="hljs-string">&quot;aaa&quot;</span>&gt;&lt;br&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;userList[0].age&quot;</span> value=<span class="hljs-string">&quot;11&quot;</span>&gt;&lt;br&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;userList[1].name&quot;</span> value=<span class="hljs-string">&quot;bbb&quot;</span>&gt;&lt;br&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;userList[1].age&quot;</span> value=<span class="hljs-string">&quot;222&quot;</span>&gt;&lt;br&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4.测试</font></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-number">2</span><br>aaa<span class="hljs-comment">--11</span><br>bbb<span class="hljs-comment">--222</span><br></code></pre></td></tr></table></figure><p><strong>场景2：</strong></p><p>​        当使用ajax提交时，可以指定contentType为Json形式，并在Controller的方法参数上使用@RequestBody可以直接接受集合数据。</p><p><font color="cornflowerblue">1.在Controller中编写对应的方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/hello15&quot;)</span><br> <span class="hljs-meta">@ResponseBody</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello15</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> List&lt;User&gt; userList)</span> </span>&#123;<br>     <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>         System.out.println(user.getName()+<span class="hljs-string">&quot;--&quot;</span>+user.getAge());<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 新建一个jsp页面：ajax.jsp</font></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> isELIgnored=<span class="hljs-string">&quot;false&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>  &lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/js/jquery-3.5.1.min.js&quot;&gt;&lt;/script&gt;<br>  &lt;script&gt;<br>    <span class="hljs-keyword">var</span> userList = <span class="hljs-keyword">new</span> Array();<br>    userList.push(&#123;name:<span class="hljs-string">&quot;zhangsan&quot;</span>,age:<span class="hljs-number">18</span>&#125;);<br>    userList.push(&#123;name:<span class="hljs-string">&quot;lisi&quot;</span>, age: <span class="hljs-number">20</span>&#125;);<br><br>    $.ajax(&#123;<br>      type:<span class="hljs-string">&quot;POST&quot;</span>,<br>      url:<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/hello15&quot;</span>,<br>      data:JSON.stringify(userList),<br>      contentType:<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span><br>    &#125;);<br>  &lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.在webapp下创建js文件夹，将jquery-3.5.1.min.js 复制到该目录下</font></p><p><font color="cornflowerblue">4. 在主配置文件中配置静态资源访问</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--静态资源访问--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/js/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/js/&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5.测试</font></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span>/ajax.jsp<br></code></pre></td></tr></table></figure><h3 id="4-5-获取请求-获取静态资源"><a href="#4-5-获取请求-获取静态资源" class="headerlink" title="4.5 获取请求 - 获取静态资源"></a>4.5 获取请求 - 获取静态资源</h3><p>​        在上一案例中，如果没有配置<code>&lt;mvc:resources&gt;</code>之前，静态资源是不能被访问到的，为什么呢？</p><p>​        我们先来回顾一下SpringMVC的工作原理。</p><p>​        首先我们需要在web.xml中配置前端控制器，并且我们配置的访问路径是：“  /  ”,代表所有的请求都会过前端控制器。</p><p>​        接下来，当我们访问ajax.jsp时，该页面会自动提交json数据，但是在提交之前，需要先访问jquery.js文件，访问该文件的请求也会被前端控制器获取，并且前端控制器会误以为，该请求也是在请求某个处理器，所以就会报错。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/js/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/js/&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>​        该配置相当于开放资源的访问，配置中的访问不需要通过前端控制器。</p><p>​        比如，后面我们网页会有大量的图片，我们也可以通过此种方式开放对图片的访问</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/img/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/img/&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>​        mapping 是访问资源的URL， location是资源具体存放的目录。</p><p>​        还有另外一种方式，当前端控制器找不到资源时，可以交给原始的控制器，也就是tomcat来寻找。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-comment">&lt;!--mvc注解驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><span class="hljs-comment">&lt;!--    &amp;lt;!&amp;ndash;静态资源访问&amp;ndash;&amp;gt;</span><br><span class="hljs-comment">    &lt;mvc:resources mapping=&quot;/js/**&quot; location=&quot;/js/&quot;/&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-6-获取请求-处理中文乱码问题"><a href="#4-6-获取请求-处理中文乱码问题" class="headerlink" title="4.6 获取请求 -  处理中文乱码问题"></a>4.6 获取请求 -  处理中文乱码问题</h3><p>当表单提交时，数据会出现乱码问题，我们可以通过设置一个过滤器来进行编码的过滤。</p><p>在web.xml中添加如下配置：注意过滤器要写在serlvet前面。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置全局过滤器--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时再提交表单就不会有中文乱码问题了。</p><p><font color="red">*GET请求,Tomcat 8.x 以后的版本会替我们处理。不需要我们手动处理</font></p><h3 id="4-7-参数绑定参数：-RequestParam"><a href="#4-7-参数绑定参数：-RequestParam" class="headerlink" title="4.7 参数绑定参数：@RequestParam"></a>4.7 参数绑定参数：@RequestParam</h3><p>通常情况下，请求参数 和 方法中参数同名，SpringMVC会帮我们自动去匹配并注入值，但是如果不同呢？就需要借助@RequestParam注解来进行绑定</p><p><font color="cornflowerblue">1. 在Controller中编写一个方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/hello16&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello16</span><span class="hljs-params">(String name)</span> </span>&#123;<br>    System.out.println(name);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.测试</font></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/user/</span>hello16?name=张三<br></code></pre></td></tr></table></figure><p>名称一致，控制台可以打印出“张三”</p><p><font color="cornflowerblue">3. 测试2</font></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/user/</span>hello16?username=张三<br></code></pre></td></tr></table></figure><p>名称不一致，则打印出“null”。</p><p><font color="cornflowerblue">3.使用@RequestParam进行参数绑定</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/hello16&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello16</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;username&quot;)</span> String name)</span> </span>&#123;<br>    System.out.println(name);<br>&#125;<br></code></pre></td></tr></table></figure><p>此时再次测试，则可以打印出“张三” 。演示提交方式为GET，POST方式原理也是相同</p><p><font color="cornflowerblue">4. 新建post.jsp</font></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsp"><br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> isELIgnored=<span class="hljs-string">&quot;false&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;form action=<span class="hljs-string">&quot;/user/hello16&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt;<br>    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5.测试</font></p><p><img src="/color-ful/img/springmvc/13.png" alt="image-20210409225302037"></p><p>控制台同样会打印出对应的值。</p><p><strong>@RequestParam 常用参数</strong></p><ul><li>value : 与请求参数同名</li><li>required：指定请求参数是否必须包含，默认为true，提交时如果不包含则报错</li><li>defaultValue：当没有指定请求参数时，则使用指定的默认值进行赋值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/hello16&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello16</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;username&quot;,defaultValue = &quot;哈哈&quot;)</span> String name)</span> </span>&#123;<br>    System.out.println(name);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-8-获取Restful-风格的参数"><a href="#4-8-获取Restful-风格的参数" class="headerlink" title="4.8 获取Restful 风格的参数"></a>4.8 获取Restful 风格的参数</h3><p>​        Restful 是一种软件 架构风格 或 设计风格，而不是标准，它只是提供了一组设计原则和约束条件。主要用于客户端和服务器交互类的软件，基于这种风格设计的软件可以更简洁，更有层次，更易于实现缓存机制等。</p><p>​        Restful风格的请求是使用 <code>url + 请求方式</code>  来表示一次请求目的的，HTTP协议里面四个表示操作方式</p><ul><li>GET：用于获取资源</li><li>POST：用于新建资源</li><li>PUT：用于更新资源</li><li>DELETE：用于删除资源</li></ul><p><strong>举例：</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">/<span class="hljs-keyword">user</span>/<span class="hljs-number">1</span> <span class="hljs-keyword">GET</span>: 得到id=<span class="hljs-number">1</span>的<span class="hljs-keyword">user</span><br>/<span class="hljs-keyword">user</span>/<span class="hljs-number">2</span> <span class="hljs-keyword">DELETE</span>: 删除id=<span class="hljs-number">2</span>的<span class="hljs-keyword">user</span><br>/<span class="hljs-keyword">user</span>/<span class="hljs-number">3</span> PUT: 更新id=<span class="hljs-number">3</span> 的<span class="hljs-keyword">user</span><br>/<span class="hljs-keyword">user</span> POST: 新增 <span class="hljs-keyword">user</span><br></code></pre></td></tr></table></figure><p>​        上述URL地址<code>/user/1</code>中的<code>1</code>就是要获得的请求参数,在SpringMVC中可以使用占位符进行参数绑定。在Controller中方法上可以将映射地址写为<code>/user/&#123;id&#125;</code> ,其中占位符 <code>&#123;id&#125;</code>就对应了实际访问URL中1的值。在业务方法中，我们可以使用@PathVariable注解进行占位符的匹配获取工作。</p><p><strong>举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/hello17/&#123;name&#125;&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello17</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(value = &quot;name&quot;)</span> String name)</span> </span>&#123;<br>    System.out.println(name);<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">访问地址：localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/user/</span>hello17/张三<br>控制台输出:张三<br></code></pre></td></tr></table></figure><h3 id="4-9-自定义类型转化器"><a href="#4-9-自定义类型转化器" class="headerlink" title="4.9 自定义类型转化器"></a>4.9 自定义类型转化器</h3><p>​        在前面hello11() 方法演示中，虽然我们输入的age是数字，但是传输到服务器端都会变成字符串。在二阶段时，Servlet获取请求参数使用了一个方法叫 <code>getParameter()</code> 该方法返回的数据类型都是String就足以证明无论前端传输的数据类型是什么，最终到达服务器端都是字符串格式。</p><p>​        SpringMVC默认提供了一些常用的类型转换器，例如：客户端提交的字符串转换成相应的int类型。但是并不是所有数据类型都提供了转换器，如果没有提供就需要我们手动的定义转换器。比如日期类型的数据就需要我们自定义转换器。</p><p><strong>实现步骤：</strong></p><pre><code>1. 定义转换器类实现Converter接口 2. 在配置文件中声明转换器 3. 在`&lt;annotation-driven&gt;`中引用转换器</code></pre><p><font color="cornflowerblue"> 先来看一下没有定义转换器时我们传日期可能出现的问题</font></p><p>现在Controller中定义一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/hello18&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello17</span><span class="hljs-params">(Date date)</span> </span>&#123;<br>    System.out.println(date);<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">地址栏：http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/user/</span>hello18?date=<span class="hljs-number">2021</span><span class="hljs-regexp">/3/</span><span class="hljs-number">21</span><br>控制台：Sun Mar <span class="hljs-number">21</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> CST <span class="hljs-number">2021</span> -- 没有错误<br><br>地址栏：http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/user/</span>hello18?date=<span class="hljs-number">2021</span>-<span class="hljs-number">3</span>-<span class="hljs-number">21</span> --报错<span class="hljs-number">400</span><br></code></pre></td></tr></table></figure><p>按照上面的步骤我们来实现一下自定义转换器</p><p><font color="cornflowerblue">1.创建转换器实现类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.converter;<br><br><span class="hljs-keyword">import</span> org.springframework.core.convert.converter.Converter;<br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义转换器：String -&gt; Date</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Converter</span>&lt;<span class="hljs-title">String</span>, <span class="hljs-title">Date</span>&gt; </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">convert</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-comment">//将参数中的日期字符串，转换为日期对象</span><br>        SimpleDateFormat format = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>        Date date = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            date = format.parse(s);<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 在主配置文件中声明转换器，3.引用</font></p><p><img src="/color-ful/img/springmvc/14.png" alt="image-20210410005559118"></p><p><font color="cornflowerblue">4. 再次测试：</font></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">地址栏：http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/user/</span>hello18?date=<span class="hljs-number">2021</span>-<span class="hljs-number">3</span>-<span class="hljs-number">21</span> --不报错<br></code></pre></td></tr></table></figure><p>自定义类型转换器在开发中用的比较少，所以稍微了解下即可。</p><h3 id="4-10-Servlet相关API"><a href="#4-10-Servlet相关API" class="headerlink" title="4.10 Servlet相关API"></a>4.10 Servlet相关API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/hello19&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello19</span><span class="hljs-params">(HttpServletRequest request , HttpServletResponse response, HttpSession session)</span> </span>&#123;<br>    System.out.println(request);<br>    System.out.println(response);<br>    System.out.println(session);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-11-获取请求头"><a href="#4-11-获取请求头" class="headerlink" title="4.11 获取请求头"></a>4.11 获取请求头</h3><p>通过使用@RequestHeader可以获取请求头信息，相当于web阶段学习的request.getHeader(name)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/hello20&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello20</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader(value=&quot;Host&quot;)</span> String host,</span></span><br><span class="hljs-function"><span class="hljs-params">                    <span class="hljs-meta">@RequestHeader(value =&quot;User-Agent&quot;)</span> String user_agent)</span> </span>&#123;<br>    System.out.println(host);<br>    System.out.println(user_agent);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里需要指出的是头信息信息中有一个比较特殊的值：cookie,它需要另一个注解来取@CookieValue</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/hello20&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello20</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader(value=&quot;Host&quot;)</span> String host,</span></span><br><span class="hljs-function"><span class="hljs-params">                    <span class="hljs-meta">@RequestHeader(value =&quot;User-Agent&quot;)</span> String user_agent,</span></span><br><span class="hljs-function"><span class="hljs-params">                    <span class="hljs-meta">@RequestHeader(value = &quot;Cookie&quot;)</span> String cookie,</span></span><br><span class="hljs-function"><span class="hljs-params">                    <span class="hljs-meta">@CookieValue(value = &quot;JSESSIONID&quot;)</span> String jsessionid)</span> </span>&#123;<br>    System.out.println(host);<br>    System.out.println(user_agent);<br>    System.out.println(cookie);<span class="hljs-comment">//取出Cookie对应的所有键值对</span><br>    System.out.println(jsessionid);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过@CookieValue可以将 cookie中存储的键值对的值取出，相当于嵌套Map集合取内层Map的value.</p><h2 id="五、文件上传"><a href="#五、文件上传" class="headerlink" title="五、文件上传"></a>五、文件上传</h2><p>先回顾一下文件上传的三个要素</p><ul><li>表单项：input type=”file”</li><li>表单提交方式：POST</li><li>表单 enctype属性为 “multipart/form-data”</li></ul><p><strong>准备工作：</strong></p><p><font color="cornflowerblue">1. 新建Controller,并编写相应方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 文件控制层</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/file&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upload</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.新建jsp：upload.jsp</font></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp"><br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> isELIgnored=<span class="hljs-string">&quot;false&quot;</span>  %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;form action=<span class="hljs-string">&quot;/file/upload&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>       用户名： &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt;&lt;br&gt;<br>        文件：&lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;upload&quot;</span>&gt;&lt;br&gt;<br>        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;上传&quot;</span>&gt;<br><br>    &lt;/form&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>文件上传原理：</strong></p><ul><li>默认情况下form表单的提交内容格式是：key = value &amp; key = value 。</li><li>当form表单的enctype属性为 “multipart/form-data”时，表单数据变为</li></ul><p><img src="/color-ful/img/springmvc/15.png" alt="image-20210410020017161"></p><p>​    该表单包含了上传文件的文件名，存储路径，文件内容等。</p><ul><li>底层使用的是封装的好上传插件，我们需要先导入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--文件上传--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-1-单个文件上传"><a href="#5-1-单个文件上传" class="headerlink" title="5.1 单个文件上传"></a>5.1 单个文件上传</h3><p><font color="cornflowerblue">1. 在主配置文件中配置文件上传解析器</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--文件上传解析器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--上传文件总大小--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;102400&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--上传单个文件大小--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSizePerFile&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10240&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--上传文件的编码类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.文件上传实现</font></p><p><img src="/color-ful/img/springmvc/16.png" alt="image-20210410022015521"></p><p><font color="cornflowerblue">3.测试：</font></p><p>虽然页面报404，但是控制台已经将username 和 文件对象已经成功获取到</p><p><font color="cornflowerblue">4.继续实现</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@RequestMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upload</span><span class="hljs-params">(String username, MultipartFile uploadFile)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//        System.out.println(username);</span><br><span class="hljs-comment">//        System.out.println(uploadFile);</span><br>        <span class="hljs-comment">//获取上传文件的名称</span><br>        String filename = uploadFile.getOriginalFilename();<br>        <span class="hljs-comment">//进行上传</span><br>        uploadFile.transferTo(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\upload\\&quot;</span>+filename));<br>    &#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5.再次进行测试即可</font></p><h3 id="5-2-多个文件上传"><a href="#5-2-多个文件上传" class="headerlink" title="5.2 多个文件上传"></a>5.2 多个文件上传</h3><p><strong>方式1：上传文件的name属性值不相同</strong></p><p><font color="limegreen">upload.jsp</font></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsp"><br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> isELIgnored=<span class="hljs-string">&quot;false&quot;</span>  %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;form action=<span class="hljs-string">&quot;/file/upload2&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>       用户名： &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt;&lt;br&gt;<br>        文件：&lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;uploadFile&quot;</span>&gt;&lt;br&gt;<br>        文件：&lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;uploadFile2&quot;</span>&gt;&lt;br&gt;<br>        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;上传&quot;</span>&gt;<br><br>    &lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><font color="limegreen">controller</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/upload2&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">upload</span><span class="hljs-params">(String username, MultipartFile uploadFile, MultipartFile uploadFile2)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        System.out.println(username);<br><span class="hljs-comment">//        System.out.println(uploadFile);</span><br>        <span class="hljs-comment">//获取上传文件的名称</span><br>        String filename = uploadFile.getOriginalFilename();<br>        String filename2 = uploadFile2.getOriginalFilename();<br>        <span class="hljs-comment">//进行上传</span><br>        uploadFile.transferTo(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\upload\\&quot;</span> + filename));<br>        uploadFile2.transferTo(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\upload\\&quot;</span> + filename2));<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>方式2：上传文件的name属性值相同</strong></p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="xml">&lt;%</span><span class="ruby">@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> isELIgnored=<span class="hljs-string">&quot;false&quot;</span>  </span><span class="xml">%&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/file/upload2&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="xml">       用户名： <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="xml">        文件：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;uploadFile&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="xml">        文件：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;uploadFile&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传&quot;</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="六、拦截器-Interceptor"><a href="#六、拦截器-Interceptor" class="headerlink" title="六、拦截器 - Interceptor"></a>六、拦截器 - Interceptor</h2><p><strong>概述：</strong></p><p>​        SpringMVC的拦截器类似于Servlet开发中的过滤器Fileter , 用于处理器进行预处理 和 后处理。</p><p>​        将拦截器按照一定顺序 连接成一条链，这条链称为 拦截器链（Interceptor Chain)。在访问被拦截的方法和字段时，拦截器链中的拦截器就会按照定义的顺序被调用。拦截器也是AOP思想的实现。</p><p><strong>拦截器和过滤器的区别：</strong></p><table><thead><tr><th align="center">区别</th><th align="center">过滤器</th><th align="center">拦截器</th></tr></thead><tbody><tr><td align="center">使用范围</td><td align="center">是Servlet规范中的一部分，任何Web工程都可以使用。</td><td align="center">属于SpringMVC，只有使用该框架才能够使用拦截器。</td></tr><tr><td align="center">拦截范围</td><td align="center">在<url-pattern>中配置了/*之后，可以对所有要访问的资源拦截。</url-pattern></td><td align="center">只会拦截访问控制器的方法，如果访问的是JSP，html，css，image,js是不会进行拦截的。</td></tr></tbody></table><p><strong>实现步骤：</strong></p><ol><li> 创建拦截器类，实现HandlerInterceptor接口</li><li>配置拦截器</li><li>测试拦截器的拦截对象</li></ol><h3 id="6-1-快速入门"><a href="#6-1-快速入门" class="headerlink" title="6.1  快速入门"></a>6.1  快速入门</h3><p><font color="cornflowerblue">1. 新建module,导入相关依赖</font></p><p><font color="cornflowerblue">2.创建spring-mvc.xml 核心配置文件</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--开启注解扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wdzl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置视图解析器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/pages/&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置注解--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--静态资源访问--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:default-servlet-handler</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 配置web.xml</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">web-app</span> <span class="hljs-meta-keyword">PUBLIC</span></span><br><span class="hljs-meta"> <span class="hljs-meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><br><span class="hljs-meta"> <span class="hljs-meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--配置全局过滤器--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--配置前端控制器--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4.编写controller</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 控制层</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/show&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">showInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;目标资源访问。。。&quot;</span>);<br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        modelAndView.addObject(<span class="hljs-string">&quot;userName&quot;</span>, <span class="hljs-string">&quot;周杰伦&quot;</span>);<br>        modelAndView.setViewName(<span class="hljs-string">&quot;../index&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5.修改index.jsp</font></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> isELIgnored=<span class="hljs-string">&quot;false&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h2&gt;Hello!&lt;/h2&gt;<br>&lt;h2&gt;$&#123;userName&#125;&lt;/h2&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">6.测试</font></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/user/</span>show<br></code></pre></td></tr></table></figure><p>结果：</p><p>浏览器显示Hello 和 username属性值，IDEA控制台打印</p><p><img src="/color-ful/img/springmvc/17.png" alt="image-20210414144038627"></p><p><font color="cornflowerblue">7.创建拦截器</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.interceptor;<br><br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 拦截器类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br>    <span class="hljs-comment">//在目标方法执行前，被执行</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;preHandle...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//在目标方法还行之后，视图返回之前执行</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;postHandle...&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//在视图返回后执行</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;afterCompletion...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">8.spring-mvc.xml中配置拦截器</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置拦截器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.interceptor.MyInterceptor&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">9. 再次测试</font></p><p>preHandle返回值未修改前：</p><p><img src="/color-ful/img/springmvc/18.png" alt="image-20210414151409442"></p><p>修改返回值后：</p><p><img src="/color-ful/img/springmvc/19.png" alt="image-20210414151242100"></p><h3 id="6-2-方法详解"><a href="#6-2-方法详解" class="headerlink" title="6.2  方法详解"></a>6.2  方法详解</h3><ol><li><p><strong>preHandle</strong></p><p><strong>概述：</strong></p><pre><code>     preHandle方法是进行处理器拦截用的，顾名思义，该方法将在Controller处理之前进行调用，SpringMVC中的Interceptor拦截器是链式的，可以同时存在多个Interceptor，然后SpringMVC会根据声明的前后顺序一个接一个的执行，而且所有的Interceptor中的preHandle方法都会在Controller方法调用之前调用。SpringMVC的这种Interceptor链式结构也是可以进行中断的， 这种中断方式是令preHandle的返回值为false，当preHandle的返回值为false的时候整个请求就结束了。</code></pre><p><strong>应用场景：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;preHandle...&quot;</span>);<br>    String flag = request.getParameter(<span class="hljs-string">&quot;flag&quot;</span>);<br>    <span class="hljs-keyword">if</span> (flag.equals(<span class="hljs-string">&quot;ok&quot;</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        request.getRequestDispatcher(<span class="hljs-string">&quot;../error.jsp&quot;</span>).forward(request,response);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>   <br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><p>​    新建一个error.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;系统正在维护。。。&lt;/h1&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p> 地址栏输入访问地址：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/user/</span>show?flag=no ----&gt; 显示 系统正在维护。。。<br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/user/</span>show?flag=yes ----&gt; 显示 index的内容<br></code></pre></td></tr></table></figure></li><li><p><strong>postHandle</strong></p><p><strong>概述：</strong></p><p>​        postHandle是进行处理器拦截用的，它的执行在Controller的方法调用之后执行，但是它会在DispatcherServlet进行视图的渲染之前执行，也就是说在这个方法中你可以对ModelAndView进行操作。这个方法的链式结构跟正常访问的方向是相反的，也就是说先声明的Interceptor拦截器该方法反而会后调用。</p><p><strong>演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在目标方法还行之后，视图返回之前执行</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        modelAndView.addObject(<span class="hljs-string">&quot;userName&quot;</span>, <span class="hljs-string">&quot;林俊杰&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;postHandle...&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">跳转成功后，页面本身的<span class="hljs-keyword">user</span>Name属性值会被该方法中的新属性值替代。<br></code></pre></td></tr></table></figure></li><li><p><strong>afterCompletion</strong></p><pre><code>  该方法也是需要当前对应的Interceptor的preHandle方法的返回值为true时才会执行。该方法将在整个请求完成之后，也就是DispatcherServlet渲染了视图执行， 这个方法的主要作用是用于清理资源的。</code></pre></li><li><p><strong>多个拦截器执行顺序</strong></p><p>​        多个拦截器的执行顺序和 他们在 spring-mvc.xml 配置顺序有关。谁配置在前面谁先执行。这里我们研究的是拦截器中三个方法的执行顺序。</p><p><font color="cornflowerblue">1. 将MyInerceptor复制一份，删除里面没有的东西，只保留打印语句</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.interceptor;<br><br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 拦截器类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceptor2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br>    <span class="hljs-comment">//在目标方法执行前，被执行</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;preHandle2...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//在目标方法还行之后，视图返回之前执行</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        modelAndView.addObject(<span class="hljs-string">&quot;userName&quot;</span>, <span class="hljs-string">&quot;林俊杰&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;postHandle2...&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//在视图返回后执行</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;afterCompletion2...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 在spring-mvc.xml配置文件中添加第二个拦截器</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置拦截器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.interceptor.MyInterceptor&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.interceptor.MyInterceptor2&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 测试 </font></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/user/</span>show?flag=ok<br></code></pre></td></tr></table></figure><p>控制台：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">preHandle</span></span>...<br><span class="hljs-function"><span class="hljs-title">preHandle2</span></span>...<br>目标资源访问。。。<br><span class="hljs-function"><span class="hljs-title">postHandle2</span></span>...<br><span class="hljs-function"><span class="hljs-title">postHandle</span></span>...<br><span class="hljs-function"><span class="hljs-title">afterCompletion2</span></span>...<br><span class="hljs-function"><span class="hljs-title">afterCompletion</span></span>...<br></code></pre></td></tr></table></figure><p>图示：</p><p>情景1：</p></li></ol><p><img src="/color-ful/img/springmvc/20.png" alt="image-20210414170304198"></p><p>情景2：</p><p><img src="/color-ful/img/springmvc/23.png" alt="image-20210414174223204"></p><p>情景3：</p><p><img src="/color-ful/img/springmvc/22.png" alt="image-20210414174041230"></p><p>情景4：</p><p><img src="/color-ful/img/springmvc/21.png" alt="image-20210414173932112"></p><p>从上述图示，我们可以得出一个结论：</p><p>​    <font color="red">如果拦截器的preHandle返回true,则该拦截器的afterCompletion方法一定会被调用。</font></p><h2 id="七、-异常处理"><a href="#七、-异常处理" class="headerlink" title="七、 异常处理"></a>七、 异常处理</h2><h3 id="7-1-简单异常处理器SimpleMappingExceptionResolver"><a href="#7-1-简单异常处理器SimpleMappingExceptionResolver" class="headerlink" title="7.1 简单异常处理器SimpleMappingExceptionResolver"></a>7.1 简单异常处理器SimpleMappingExceptionResolver</h3><p>SpringMVC定义好了该处理器，在使用时可以根据项目情况进行相应异常与视图的映射配置。</p><p><font color="cornflowerblue">1.新建一个module,导入相应依赖</font></p><p><font color="cornflowerblue">2.创建spring-mvc.xml配置文件</font></p><p><font color="cornflowerblue">3. 在web.xml中配置前端控制器和全局过滤器</font></p><p><font color="cornflowerblue">4.创建Controller</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  用户控制层</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/ex&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">exceptionTest</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-number">3</span>/<span class="hljs-number">0</span>);<span class="hljs-comment">//运行时异常</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5.测试</font></p><p>​        访问Controller，因为方法中有运行时异常，所以页面会直接报500错误，这样对于用户体验是不好的。所以我们需要将异常进行一个处理，给用户一些更友好的提示。</p><p><font color="cornflowerblue">6.配置简单异常处理器</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--简单异常处理器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultErrorView&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;error&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中 <code>value</code> 属性值就是捕获异常后，将要跳转的视图名称。此时error.jsp还不存在，所以我们去创建一个相应的视图</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>系统正在维护中。。。。<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">7.再次测试，此时页面就不会显示500的错误，而是显示我们配置好的异常页面，这样对于用户体验度来说会好很多。</font></p><p>当然对于异常我们也可以采取差异化处理。</p><p><font color="cornflowerblue">8.在spring-mvc.xml中配置</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--简单异常处理器--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionMappings&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;java.lang.ClassCastException&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;error2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;java.lang.Exception&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;error&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">9.复制一个error2.jsp</font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>类型转换异常。。。。<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">10.在控制层添加各种异常</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/ex&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">exceptionTest</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//        System.out.println(3/0);</span><br>        Object name = <span class="hljs-string">&quot;周杰伦&quot;</span>;<br>        System.out.println((<span class="hljs-keyword">int</span>)name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">11.测试</font></p><p>在地址栏输入访问地址，可以通过每次页面显示的内容来确定异常是否被差异化处理。</p><h3 id="7-2-自定义异常处理"><a href="#7-2-自定义异常处理" class="headerlink" title="7.2 自定义异常处理"></a>7.2 自定义异常处理</h3><p><strong>实现步骤：</strong></p><ol><li>创建异常处理类实现HandlerExceptionResolver</li><li>创建异常处理器</li><li>编写异常页面</li><li>测试</li></ol><p><strong>演示：</strong></p><p><font color="cornflowerblue">1. 创建自定义异常处理类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.resolver;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义异常处理类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> *  实现步骤：</span><br><span class="hljs-comment"> *      1. 创建异常处理类实现HandlerExceptionResolver</span><br><span class="hljs-comment"> *      2. 创建异常处理器</span><br><span class="hljs-comment"> *      3. 编写异常页面</span><br><span class="hljs-comment"> *      4. 测试</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyExceptionResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerExceptionResolver</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler 执行的处理程序，如果在发生异常时未选择任何处理程序，则为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ex 异常对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> ModelAndView 跳转到错误视图的信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">resolveException</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;<br><br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br><br>        <span class="hljs-keyword">if</span>(ex <span class="hljs-keyword">instanceof</span> ClassCastException)&#123;<br>            modelAndView.addObject(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;异常转换异常&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ex <span class="hljs-keyword">instanceof</span> Exception) &#123;<br>            modelAndView.addObject(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;其他异常&quot;</span>);<br><br>        &#125;<br>        modelAndView.setViewName(<span class="hljs-string">&quot;error&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 在主配置文件中配置</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--自定义异常处理器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.resolver.MyExceptionResolver&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis 框架</title>
    <link href="/color-ful/2020/03/31/Mybatis%E6%A1%86%E6%9E%B6/"/>
    <url>/color-ful/2020/03/31/Mybatis%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<p><img src="/color-ful/img/blog/image-20210106095916987.png" alt="image-20210106095916987"></p><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><blockquote><p><font color="red">MyBatis</font> 本是apache的一个开源项目<font color="red">iBatis</font>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 2013年11月迁移到Github。</p></blockquote><p>​        MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><p><img src="/color-ful/img/mybatis/JDBC%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png"></p><p>​                                                                                    <strong>（传统JDBC图解）</strong></p><p>具体操作（复习）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-comment">//注册驱动</span><br>         Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>         <span class="hljs-comment">//获取连接对象</span><br>        connection = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>         <span class="hljs-comment">//编写sql</span><br>         String sql = <span class="hljs-string">&quot;select * from user where name=?&quot;</span><br><span class="hljs-comment">//预编译</span><br>PreparedStatement statement = connection.prepareStatement(sql);<br><span class="hljs-comment">//设置参数</span><br>statement.setString(<span class="hljs-number">1</span>, username);<br><span class="hljs-comment">//执行sql，封装结果</span><br>         ResultSet resultSet = statement.executeQuery();<br></code></pre></td></tr></table></figure><p>​        虽然传统JDBC也可以解决我们操作数据库的需求，但是它的<font color="red">功能简单</font>并且<font color="red">耦合度高</font>，如果我们在项目上线后修改某条sql语句，就需要去修改Java源码，并对项目进行重新的打包部署等一系列工作，操作起来相当的繁琐。</p><p>​        这里我们还需要介绍一个大名鼎鼎的全自动映射ORM框架：**<font color="cornflowerblue">Hibernate</font>**</p><blockquote><p>ORM: Object Relation Mapping 对象关系映射，简单说就是把数据库表和实体类的属性对应起来，让我们可以操作实体类就可以实现操作数据库表。</p></blockquote><p><img src="/color-ful/img/mybatis/Hibernate%E5%9B%BE%E8%A7%A3.png"></p><p>​                                                                                <strong>（Hibernate框架）</strong></p><p>​        该框架的设计旨在消除SQL：即便是你没学过SQL，也可以使用该框架，它将JDBC的操作进行了封装，你只需要去调用它相应的功能即可。但是这些功能不支持自定义SQL，即后期无法对SQL进行优化，你只能用框架自己生成的SQL进行数据库操作。虽然它的HQL支持自定义SQL，但是你需要去花时间学习，这无疑也增加了开发的时间和成本。</p><p>​        MyBatis框架优化了Hibernate框架的的缺点：MyBatis虽然对JDBC的操作也进行了封装，但是它把编写SQL的部分还是交给了程序员来完成，这样就不会失去SQL的灵活性，</p><p><img src="/color-ful/img/mybatis/MyBatis%E5%9B%BE%E8%A7%A3.png"></p><p>​                                                                                <strong>（Mybatis 半自动框架）</strong></p><h2 id="2-为什么使用MyBatis"><a href="#2-为什么使用MyBatis" class="headerlink" title="2.为什么使用MyBatis"></a>2.为什么使用MyBatis</h2><ul><li><strong>JDBC</strong><ol><li>SQL写在Java代码中，耦合度提高</li><li>实际开发中SQL会经常被更新，维护不易</li></ol></li><li><strong>Hibernate 和 JPA</strong><ol><li>长难复杂的SQL，对Hibernate而言处理也不容易</li><li>内部自动产生的SQL，不易做特殊优化</li><li>基于全映射的全自动框架，进行字段部分映射时比较困难，导致数据库性能下降</li></ol></li></ul><blockquote><p>JPA是Java Persistence API的简称，中文名Java持久层API，是JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中</p></blockquote><ul><li><strong>MyBatis</strong><ol><li>SQL和Java编码分离，功能划分清晰，一个专注业务，一个专注数据。</li><li>核心SQL可以自己编写，优化比较方便</li></ol></li></ul><h2 id="3-下载MyBatis"><a href="#3-下载MyBatis" class="headerlink" title="3. 下载MyBatis"></a>3. 下载MyBatis</h2><p><strong><font color="cornflowerblue">1.百度搜索：MyBatis</font></strong></p><p><img src="/color-ful/img/mybatis/image-20210106120223165.png" alt="image-20210106120223165"></p><p><strong><font color="cornflowerblue">2. 进入Mybatis - GitHub</font></strong></p><p><img src="/color-ful/img/mybatis/image-20210106120416581.png" alt="image-20210106120416581"></p><p><strong><font color="cornflowerblue">3. 进入GitHub下载界面</font></strong></p><p><img src="/color-ful/img/mybatis/image-20210106144740052.png" alt="image-20210106144740052"></p><h2 id="4-MyBatis入门"><a href="#4-MyBatis入门" class="headerlink" title="4. MyBatis入门"></a>4. MyBatis入门</h2><p><strong><font color="cornflowerblue">1. 测试数据库</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE mybatis <span class="hljs-type">CHAR</span> <span class="hljs-keyword">SET</span> utf8; <span class="hljs-comment">-- 创建数据库</span><br><br>USE mybatis;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>`(<br>   id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>   username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户名称&#x27;</span> ,<br>   birthday DATETIME  COMMENT <span class="hljs-string">&#x27;生日&#x27;</span>,<br>   sex <span class="hljs-type">CHAR</span>(<span class="hljs-number">1</span>) COMMENT <span class="hljs-string">&#x27;性别&#x27;</span>,<br>   address <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">200</span>) COMMENT <span class="hljs-string">&#x27;地址&#x27;</span><br>)ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `<span class="hljs-keyword">user</span>`(username,birthday,sex,address) <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-string">&#x27;周杰伦&#x27;</span>,<span class="hljs-string">&#x27;1990-01-17 17:23:56&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;上海浦东新区&#x27;</span>),<br>(<span class="hljs-string">&#x27;王力宏&#x27;</span>,<span class="hljs-string">&#x27;1993-07-21 06:07:32&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;北京新城区&#x27;</span>),<br>(<span class="hljs-string">&#x27;蔡依林&#x27;</span>,<span class="hljs-string">&#x27;1995-12-17 09:25:47&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;西安雁塔区&#x27;</span>),<br>(<span class="hljs-string">&#x27;钟南山&#x27;</span>,<span class="hljs-string">&#x27;1998-02-20 12:33:03&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;西安市碑林区&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong><font color="cornflowerblue">2. 准备对应实体类</font></strong></p><p>首先我们创建一个Maven工程</p><p><img src="/color-ful/img/mybatis/image-20210107171137491.png" alt="image-20210107171137491"></p><p><img src="/color-ful/img/mybatis/image-20210107180918851.png" alt="image-20210107180918851"></p><p>创建好后创建相应的包和实体类</p><p><img src="/color-ful/img/mybatis/image-20210107105103452.png" alt="image-20210107105103452"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wdzl.bean;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> Date birthday;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String username, Date birthday, String sex, String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.username = username;<br>        <span class="hljs-keyword">this</span>.birthday = birthday;<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getBirthday</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> birthday;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBirthday</span><span class="hljs-params">(Date birthday)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.birthday = birthday;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSex</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSex</span><span class="hljs-params">(String sex)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, birthday=&quot;</span> + birthday +<br>                <span class="hljs-string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong><font color="cornflowerblue">3. 通过官方文档添加maven依赖</font></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.wdzl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--测试单元--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mybatis--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mysql连接驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--日志解析log4j--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><font color="cornflowerblue">4.创建用户持久层接口</font></strong></p><p><img src="/color-ful/img/mybatis/image-20210107105549919.png" alt="image-20210107105549919"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wdzl.dao;<br><br><span class="hljs-keyword">import</span> org.wdzl.bean.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  用户的持久层接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  查询所有用户</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><font color="cornflowerblue">5. 配置MyBatis配置文件-SqlMapConfig.xml</font></strong></p><p><strong><font color="red">注意：XML约束可以去官网查找。</font></strong></p><p><img src="/color-ful/img/mybatis/image-20210107111701984.png" alt="image-20210107111701984"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--配置mysql环境--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--配置事务的类型--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--配置数据源（连接池）--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--Pooled 使用连接池--&gt;</span><br>                <span class="hljs-comment">&lt;!--配置连接数据库的4个基本信息--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><font color="cornflowerblue">6. 指定映射配置文件</font></strong></p><p>在<code>SqlMapConfig.xml</code>中添加添加映射配置文件位置，如下图</p><p><img src="/color-ful/img/mybatis/image-20210107111947290.png" alt="image-20210107111947290"></p><p>再去<code>resources</code>下创建相应的文件夹和xml文件</p><p><img src="/color-ful/img/mybatis/image-20210305230455079.png" alt="image-20210305230455079"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wdzl.dao.UserDao&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--对应dao的全限定类名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--id属性对应方法的名称，不能随便写 --&gt;</span><br>        select * from user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>该xml的注意事项</p><ol><li>namespace 是对应接口的全限定类名</li><li>select 标签的 id 属性对应相应的方法名，不能随便写</li></ol><p><font color="cornflowerblue">7.把<code>log4j.properties</code>拷贝到 <code>resource</code>目录下</font></p><p><strong><font color="red">总结：</font></strong></p><p>​        <strong>MyBatis 环境搭建步骤：</strong></p><ol><li><p>创建Maven工程并导入依赖（坐标）</p></li><li><p>创建实体类和dao层接口</p></li><li><p>创建MyBatis主配置文件：SqlMapConfig.xml</p></li><li><p>创建映射配置文件：UserDao.xml</p></li></ol><p><strong><font color="red">注意事项：</font></strong></p><p>​       <strong>MyBatis环境搭建注意事项：</strong></p><ol><li> UserDao  和 UserMapper 是一样的。这只是命名习惯上的区别。</li><li>创建Directory 和 package 时有一点不同的地方<ul><li>Directory：org.wdzl.dao  这是一级目录</li><li>Package：org.wdzl.dao 这是三级目录</li></ul></li><li> MyBatis的映射配置文件必须和dao接口的包结构相同</li><li> 映射配置文件的<code>mapper</code>标签namespace属性的取值必须是dao接口的全限定类名(后面解释)</li><li> 映射配置文件<code>select</code> 标签的 id 属性对应的dao接口中的方法名，不能随便写</li><li> <font color="red">只要遵从了3，4，5条规定之后，我们就不需要写dao层接口的实现类。</font></li></ol><p><strong><font color="cornflowerblue">7. 入门案例</font></strong></p><p>我们先将 <code>log4j.properties</code>拷贝到 <code>resources</code>根目录下</p><p><img src="/color-ful/img/mybatis/image-20210107153923094.png" alt="image-20210107153923094"></p><p>接下来，在test目录下创建测试java文件</p><p><img src="/color-ful/img/mybatis/image-20210107154033449.png" alt="image-20210107154033449"></p><p><font color="cornflowerblue">MyBayisTest.java</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wdzl.dao;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> org.wdzl.bean.User;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * MyBatis的入门案例</span><br><span class="hljs-comment"> *  实现步骤：</span><br><span class="hljs-comment"> *      1.读取配置文件</span><br><span class="hljs-comment"> *      2.创建SqlSessionFactory工厂</span><br><span class="hljs-comment"> *      3.使用工厂生产SqlSession对象</span><br><span class="hljs-comment"> *      4.使用SqlSession创建Dao接口的代理对象</span><br><span class="hljs-comment"> *      5.使用代理对象执行方法</span><br><span class="hljs-comment"> *      6.释放资源</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.读取配置文件</span><br>        InputStream is = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-comment">//2.创建SqlSessionFactory工厂</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        使用SqlSessionFactoryBuilder创建工厂的好处是MyBatis将如何读取配置文件，如何使用配置文件，如何封装等细节都进行了封装，使我们使用极简的方式来实现功能。</span><br><span class="hljs-comment">         */</span><br>        SqlSessionFactoryBuilder builder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>        SqlSessionFactory factory = builder.build(is);<br>        <span class="hljs-comment">//3.使用工厂生产SqlSession对象</span><br>        SqlSession session = factory.openSession();<br>        <span class="hljs-comment">//4.使用SqlSession创建Dao接口的代理对象</span><br>        UserDao userDao = session.getMapper(UserDao.class);<br>        <span class="hljs-comment">//5.使用代理对象执行方法</span><br>        List&lt;User&gt; users = userDao.findAll();<br>        <span class="hljs-keyword">for</span> (User user : users) &#123;<br>            System.out.println(user);<br>        &#125;<br><br>        <span class="hljs-comment">//6.释放资源</span><br>        session.close();<br>        is.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>执行后我们发现，会报错，查看错误信息，我们会找到这样一条描述：</strong></p><p><img src="/color-ful/img/mybatis/image-20210107154346023.png" alt="image-20210107154346023"></p><p>意思我们虽然写了Sql语句，但是<font color="red">查询返回的结果我们并没有告诉MyBatis用什么封装</font>！所以我们需要去修改映射配置文件，添加一个属性即可</p><p><img src="/color-ful/img/mybatis/image-20210107154528322.png" alt="image-20210107154528322"></p><p>再次执行，就可以看到数据库中存储的信息了。</p><p><img src="/color-ful/img/mybatis/image-20210107154609965.png" alt="image-20210107154609965"></p><p><strong><font color="red">入门案例步骤：</font></strong></p><ol><li>读取配置文件</li><li>创建SqlSessionFactory对象–&gt; 通过SqlSessionFactoryBuilder对象</li><li>使用工厂对象生产SqlSession对象</li><li>使用SqlSession对象创建Dao层接口的代理对象</li><li>使用代理对象执行方法释放资源</li></ol><h2 id="5-MyBatis-注解入门"><a href="#5-MyBatis-注解入门" class="headerlink" title="5.MyBatis 注解入门"></a>5.MyBatis 注解入门</h2><p><font color="cornflowerblue">1. 我们先新建一个Maven工程，将上一个工程的内容都复制到该工程中。</font></p><p><img src="/color-ful/img/mybatis/image-20210107165836005.png" alt="image-20210107165836005"></p><p><font color="cornflowerblue">2. 因为该案例使用的是注解方式，所以 映射配置文件就不需要了我们可以将它删除掉，并在相应的接口方法上写上注解即可。</font></p><p><img src="/color-ful/img/mybatis/image-20210107165949780.png" alt="image-20210107165949780"></p><p><font color="cornflowerblue">3. 修改sqlMapConfig.xml</font></p><p><img src="/color-ful/D:/工作文件夹\录课\Java三阶段框架\0.Maven\课件\img\image-20210224154445357.png" alt="image-20210224154445357"></p><p><font color="cornflowerblue">4. 运行测试案例，效果是一样的。</font></p><h2 id="6-入门案例中的设计模式"><a href="#6-入门案例中的设计模式" class="headerlink" title="6. 入门案例中的设计模式"></a>6. 入门案例中的设计模式</h2><p><img src="/color-ful/img/mybatis/image-20210108152219510.png" alt="image-20210108152219510"></p><blockquote><p>构建者模式：比如说我们要建一座工厂，我们有钱，但是我们没有建造方面的天赋，怎么办？我们可以找一个包工队，至于工厂如何建造，使用什么材料，需要多少人力之类的问题，我们都不需要关系。再比如KFC点套餐，它也是一个典型的构建者模式：这个套餐如何做出来的，我们不需要关心，只需要付钱即可。</p></blockquote><p>​        那么，为了简化，为什么不把上面的方法再进行封装呢?</p><p>​        过度的封装虽然使用简便，但是会失去响应的灵活性，比如 builder.build()就有很多重载的方法，如果封装了，这些重载的方式不是就使用不成了吗？</p><h2 id="7-自定义MyBatis"><a href="#7-自定义MyBatis" class="headerlink" title="7. 自定义MyBatis"></a>7. 自定义MyBatis</h2><h3 id="7-1-分析"><a href="#7-1-分析" class="headerlink" title="7.1 分析"></a>7.1 分析</h3><p><font color="red">MyBatis在使用代理的方式实现增删改查时都做了什么事？</font></p><ol><li>创建代理对象</li><li>在代理对象中创建方法</li></ol><p>我们以入门案例分析MyBatis工作流程，之后我们再具体实现一下。</p><img src="/color-ful/img/mybatis/Mybatis工作原理分析.png"><p>根据上图分析，我们如果想让代码完整执行下来我们需要提供两组信息：</p><ol><li><font color="red">连接信息</font></li><li><font color="red">映射信息</font><ul><li><font color="cornflowerblue">执行的sql语句</font></li><li><font color="cornflowerblue">封装结果的实体类全限定类名</font></li></ul></li></ol><p>​        随着项目功能的扩充，映射信息也会越来越多，所以我们需要使用对象来存储映射信息，那么怎么区分不同的映射信息呢，根据配置文件，我们知道，namespace + id 可以区分映射信息，所以我们可以考虑使用Map集合来存储这部分信息。</p><p>​        分析到这里，整个流程基本就完成了，还有一个难点就是如何使用动态代理创建代理对象和对接口中方法的实现。接下来我们再通过图解的方式给大家分析一下。</p><p><img src="/color-ful/img/mybatis/image-20210227165740643.png" alt="image-20210227165740643"></p><h3 id="7-2-自定义MyBatis"><a href="#7-2-自定义MyBatis" class="headerlink" title="7.2 自定义MyBatis"></a>7.2 自定义MyBatis</h3><p>首先我们在第一个项目中 查看以下几个名称对应的是接口还是类。</p><p><code>Resources</code>:类</p><p><code>SqlSession</code>:接口</p><p><code>SqlSessionFactory</code>:接口</p><p><code>SqlSessionFactoryBuilder</code>:类</p><p><font color="cornflowerblue">1.新建Module</font></p><ul><li>groupId : <code>com.wdzl</code></li><li>artifactId : <code>day01_03mybatis_design</code></li></ul><p><font color="cornflowerblue">2. 我们将第一个入门案例整体拷贝到改Module中，并在pom.xml中删除Mybatis的依赖信息。</font></p><p> 此时test测试案例中Mybatis相应的的类或接口都会报红，接下来我们一 一 编写这些类或接口</p><p><img src="/color-ful/img/mybatis/image-20210227171936359.png" alt="image-20210227171936359"></p><p><font color="cornflowerblue">3. Resources 类</font></p><p>先创建相应目录<code>mybatis.io</code></p><p><img src="/color-ful/img/mybatis/image-20210227173001598.png" alt="image-20210227173001598"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.wdzl.mybatis.io;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用类加载器读取配置文件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Resources</span> </span>&#123;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  根据文件路径，获取字节输入流</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filePath 配置文件路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InputStream <span class="hljs-title">getResourceAsStream</span><span class="hljs-params">(String filePath)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Resources.class.getClassLoader().getResourceAsStream(filePath);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4.创建SqlSessionFactoryBuilder类</font></p><p>先在<code>mybatis</code>包中创建<code>sqlsession</code>包</p><p><img src="/color-ful/img/mybatis/image-20210227175318421.png" alt="image-20210227175318421"></p><p>再创建<code>SqlSessionFactoryBuilder</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.mybatis.sqlSession;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用于创建SqlSessionFactory对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SqlSessionFactoryBuilder</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  获取SqlSessionFactory对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inputStream</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title">build</span><span class="hljs-params">(InputStream inputStream)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为 <code>build()</code>方法的返回值类型  <code>SqlSessionFactory</code>并不存在，此时它是报红的，缺什么我们就创建什么，接下来我们创建<code>SqlSessionFactory</code>接口</p><p><font color="cornflowerblue">5. 创建SqlSessionFactory接口</font></p><p>在<code>sqlsession</code>包中创建该接口，通过<code>SqlSessionFactory</code>可以获取<code>SqlSession</code>对象，所以要在接口中定义对应的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SqlSessionFactory</span> </span>&#123;<br>    <span class="hljs-function">SqlSession <span class="hljs-title">openSession</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">6.创建SqlSession接口</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义MyBatis中和数据库交互的核心接口</span><br><span class="hljs-comment"> * 它可以创建dao接口的代理对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SqlSession</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  根据接口创建代理对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> daoInterfaceClass</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getMapper</span><span class="hljs-params">(Class&lt;T&gt; daoInterfaceClass)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放资源</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时，我们测试案例中所有报红的地方就全部修复了。</p><p><font color="cornflowerblue">7. 导入XML解析工具类：XMLConfigBuilder 和 相关依赖</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>dom4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dom4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jaxen<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxen<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>导入之后我们来处理报红的问题</p><p>​    1. <font color="red">Configuration</font>: 我们通过工具类注释我们知道它是用来存放连接配置信息的类，所以我们创建一个<code>Configuration</code>类,并根据下面报红信息确定它的属性又：<code>driver</code> , <code>url</code> , <code>username</code> , <code>password</code></p><p><font color="cornflowerblue">8.创建Configration类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 存放连接配置信息的对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Configuration</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDriver</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> driver;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDriver</span><span class="hljs-params">(String driver)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.driver = driver;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUrl</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> url;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUrl</span><span class="hljs-params">(String url)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.url = url;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span><span class="hljs-params">(String password)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.password = password;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">9. 创建Mapper对象</font></p><p>通过上面图解，我们知道Mapper对象的组成 <font color="red">sql语句</font> 和 <font color="red">实体类的全限定类名</font>。所以我们在<code>domain</code>包下创建该类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.domain;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用于封装执行的SQL语句和结果类型的全限定类名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mapper</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String queryString;<span class="hljs-comment">//Sql语句</span><br>    <span class="hljs-keyword">private</span> String resultType;<span class="hljs-comment">//实体类全限定类名</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getQueryString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> queryString;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setQueryString</span><span class="hljs-params">(String queryString)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.queryString = queryString;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getResultType</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> resultType;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setResultType</span><span class="hljs-params">(String resultType)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.resultType = resultType;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​        在工具类中导入Mapper后，寻找下图中红框的位置，因为我们现在不涉及注解方式，所以我们直接将注解相关的内容全部注释，不用去考虑它，只专心的关注XML方式</p><p><img src="/color-ful/img/mybatis/image-20210227233219935.png" alt="image-20210227233219935"></p><p><font color="cornflowerblue">10. 在<code>Configuration</code>中添加成员变量：<code>Mappers</code></font></p><p><img src="/color-ful/img/mybatis/image-20210305105338684.png" alt="image-20210305105338684"></p><p><img src="/color-ful/img/mybatis/image-20210305105606256.png" alt="image-20210305105606256"></p><p><font color="cornflowerblue">11. 回到<code>SqlSessionFactoryBuilder</code>编写<code>build</code>方法。</font></p><p><img src="/color-ful/img/mybatis/image-20210305110502059.png" alt="image-20210305110502059"></p><p><font color="cornflowerblue">12. 新建<code>SqlSessionFactoryImpl</code> 实现类，实现<code>SqlSessionFactory</code>接口。</font></p><p><img src="/color-ful/img/mybatis/image-20210305112609562.png" alt="image-20210305112609562"></p><p>​        因为<code>SqlSession</code>可以为我们创建代理对象，实现方法，具体这个方法要做什么，是不是封装在<code>Configration</code>中，所以我们还需要继续将cfg对象传递给<code>SqlSession</code>对象.</p><p><font color="cornflowerblue">13. 创建<code>SqlSession</code>的实现类对象：<code>SqlSessionImpl</code></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.mybatis.sqlSession;<br><span class="hljs-keyword">import</span> com.wdzl.domain.Configuration;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SqlSessionImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">SqlSession</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Configuration cfg;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SqlSessionImpl</span><span class="hljs-params">(Configuration cfg)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.cfg = cfg;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建代理对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> daoInterfaceClass UserDao接口的Class对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getMapper</span><span class="hljs-params">(Class&lt;T&gt; daoInterfaceClass)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放资源</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">14. 使用动态代理实现getMapper()方法。</font></p><p><img src="/color-ful/img/mybatis/image-20210305143818385.png" alt="image-20210305143818385"></p><p>​        学过反射，我们知道，对于代理类的方法如何实现，重点就是在这个<code>InvocationHandler</code>接口中的<code>invoke（）</code>方法如何实现。接下来我们就来实现这个接口</p><p><font color="cornflowerblue">15. 创建InvocationHandler接口的实现类：MapperProxy</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.mybatis.sqlSession.proxy;<br><br><span class="hljs-keyword">import</span> com.wdzl.domain.Mapper;<br><span class="hljs-keyword">import</span> com.wdzl.utils.Executor;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapperProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Map&lt;String, Mapper&gt; mappers;<span class="hljs-comment">//该变量中包含了sql语句，结果封装的对象等信息。</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MapperProxy</span><span class="hljs-params">(Map&lt;String, Mapper&gt; mappers)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.mappers = mappers;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用于增强方法：findAll（）方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> proxy</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> method</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Throwable</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        <span class="hljs-comment">//1.获取方法名</span><br>        String methodName = method.getName();<br>        <span class="hljs-comment">//2.获取方法所在类的名称:全限定类名</span><br>        String className = method.getDeclaringClass().getTypeName();<br>        <span class="hljs-comment">//3.图中的key</span><br>        String key = className+ <span class="hljs-string">&quot;.&quot;</span> +methodName;<br><br>        <span class="hljs-comment">//4. 获取 mappers中的Mapper对象</span><br>        Mapper mapper = mappers.get(key);<br>        <span class="hljs-comment">//5. 判断mapper对象是否存在</span><br>        <span class="hljs-keyword">if</span> (mapper == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;传入的参数有误&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//6. 调用工具类执行查询</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Executor().selectList();<span class="hljs-comment">//需要导入提前编写好的工具类</span><br>        &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/color-ful/img/mybatis/image-20210305144511697.png" alt="image-20210305144511697"></p><p>导入工具类后，我们发现selectList（）中有两个参数，一个是Mapper对象，另一个是连接对象，因为连接对象需要cfg，所以我们去SqlSessionImpl中添加一个连接对象的成员变量</p><p><img src="/color-ful/img/mybatis/image-20210305162841295.png" alt="image-20210305162841295"></p><p>再给<code>getMappers()</code>方法中添加一个参数</p><p><img src="/color-ful/img/mybatis/image-20210305220356685.png" alt="image-20210305220356685"></p><p>再去<code>MapperProxy</code>中添加相应的成员变量 和修改配置方法</p><p><img src="/color-ful/img/mybatis/image-20210305220446607.png" alt="image-20210305220446607"></p><p><font color="cornflowerblue">16. 编写<code>DataSourceUtil</code></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  用于创建数据源的工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataSourceUtil</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用于获取一个连接</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cfg</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">(Configuration cfg)</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(cfg.getDriver());<br>            <span class="hljs-keyword">return</span> DriverManager.getConnection(cfg.getUrl(), cfg.getUsername(), cfg.getPassword());<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-MyBatis-CRUD操作"><a href="#8-MyBatis-CRUD操作" class="headerlink" title="8. MyBatis- CRUD操作"></a>8. MyBatis- CRUD操作</h2><p>在开始讲授之前，先让大家自己再搭建一遍一次Mybatis环境，并成功执行查询所有用户功能。</p><h3 id="8-1-添加"><a href="#8-1-添加" class="headerlink" title="8.1 添加"></a>8.1 添加</h3><p><strong>需求：</strong>向User表中添加一名用户，数据自拟</p><p><font color="cornflowerblue">1. 在UserDao中添加方法</font></p><p><img src="/color-ful/img/mybatis/image-20210305231540688.png" alt="image-20210305231540688"></p><p><font color="cornflowerblue">2.在UserDao.xml中配置该方法</font></p><p><img src="/color-ful/img/mybatis/image-20210305234645574.png" alt="image-20210305234645574"></p><p><font color="red">注意：取值这里有两种方式#{} 和 ${} </font></p><ul><li>#{} : 采取预编译方式</li><li>${}：采取字符串拼接</li></ul><p>可以通过控制台日志查看</p><p><font color="cornflowerblue">3.编写测试类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  测试添加功能</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAdd</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-comment">//创建用户</span><br>    User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;刘德华&quot;</span>,<span class="hljs-keyword">new</span> Date(),<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;中国香港&quot;</span>);<br>    <span class="hljs-comment">//1.读取配置文件</span><br>    InputStream is = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>    <span class="hljs-comment">//2.创建SqlSessionFactory工厂</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    使用SqlSessionFactoryBuilder创建工厂的好处是MyBatis将如何读取配置文件，如何使用配置文件，如何封装等细节都进行了封装，使我们使用极简的方式来实现功能。</span><br><span class="hljs-comment">     */</span><br>    SqlSessionFactoryBuilder builder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>    SqlSessionFactory factory = builder.build(is);<br>    <span class="hljs-comment">//3.使用工厂生产SqlSession对象</span><br>    SqlSession session = factory.openSession();<br>    <span class="hljs-comment">//4.使用SqlSession创建Dao接口的代理对象</span><br>    UserDao userDao = session.getMapper(UserDao.class);<br>    <span class="hljs-comment">//5.执行操作</span><br>    userDao.addUser(user);<br>    <span class="hljs-comment">//提交事务</span><br>      session.commit();<br>    <span class="hljs-comment">//6.执行查询</span><br>    <span class="hljs-comment">//5.使用代理对象执行方法</span><br>    List&lt;User&gt; users = userDao.findAll();<br>    <span class="hljs-keyword">for</span> (User user2 : users) &#123;<br>        System.out.println(user2);<br>    &#125;<br><br>    <span class="hljs-comment">//6.释放资源</span><br>    session.close();<br>    is.close();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>​        我们发现两个测试方法有许多共同的地方，我们可以将这些共同的代码提取出来，我们将前4步提取出来放在<code>init()</code>方法中，释放资源提取到 <code>destory()</code>方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.dao;<br><br><br><span class="hljs-keyword">import</span> com.wdzl.domain.User;<br>    <span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> org.junit.After;<br><span class="hljs-keyword">import</span> org.junit.Before;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * MyBatis的入门案例</span><br><span class="hljs-comment"> *  实现步骤：</span><br><span class="hljs-comment"> *      1.读取配置文件</span><br><span class="hljs-comment"> *      2.创建SqlSessionFactory工厂</span><br><span class="hljs-comment"> *      3.使用工厂生产SqlSession对象</span><br><span class="hljs-comment"> *      4.使用SqlSession创建Dao接口的代理对象</span><br><span class="hljs-comment"> *      5.使用代理对象执行方法</span><br><span class="hljs-comment"> *      6.释放资源</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisTest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> InputStream is;<br>    <span class="hljs-keyword">private</span> SqlSessionFactoryBuilder builder;<br>    <span class="hljs-keyword">private</span> SqlSessionFactory factory;<br>    <span class="hljs-keyword">private</span> SqlSession session;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  初始化方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException  </span>&#123;<br>        <span class="hljs-comment">//1.读取配置文件</span><br>        is = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-comment">//2.创建SqlSessionFactory工厂</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        使用SqlSessionFactoryBuilder创建工厂的好处是MyBatis将如何读取配置文件，如何使用配置文件，如何封装等细节都进行了封装，使我们使用极简的方式来实现功能。</span><br><span class="hljs-comment">         */</span><br>        builder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>        factory = builder.build(is);<br>        <span class="hljs-comment">//3.使用工厂生产SqlSession对象</span><br>        session = factory.openSession();<br>        <span class="hljs-comment">//4.使用SqlSession创建Dao接口的代理对象</span><br>        userDao = session.getMapper(UserDao.class);<br>    &#125;<br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//6.释放资源</span><br>        session.close();<br>        is.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">//5.使用代理对象执行方法</span><br>        List&lt;User&gt; users = userDao.findAll();<br>        <span class="hljs-keyword">for</span> (User user : users) &#123;<br>            System.out.println(user);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  测试添加功能</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAdd</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//创建用户</span><br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;刘德华&quot;</span>,<span class="hljs-keyword">new</span> Date(),<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;中国香港&quot;</span>);<br><br>        <span class="hljs-comment">//1.执行操作</span><br>        userDao.addUser(user);<br><br>        <span class="hljs-comment">//2. 提交事务</span><br>        session.commit();<br>        <span class="hljs-comment">//3.执行查询</span><br>        List&lt;User&gt; users = userDao.findAll();<br>        <span class="hljs-keyword">for</span> (User user2 : users) &#123;<br>            System.out.println(user2);<br>        &#125;<br><br><br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-2-修改"><a href="#8-2-修改" class="headerlink" title="8.2  修改"></a>8.2  修改</h3><p><strong>需求：</strong>将用户名为刘德华的地址改为中国大陆</p><p><font color="cornflowerblue">1. 在<code>UserDao</code>接口中添加相应的方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 更新用户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 在UserDao.xml中进行配置</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--修改用户--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.wdzl.domain.User&quot;</span>&gt;</span><br>    update user set address=#&#123;address&#125; where userName=#&#123;username&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    *  测试添加功能</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>       <span class="hljs-comment">//创建用户</span><br>       User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;刘德华&quot;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-string">&quot;中国大陆&quot;</span>);<br><br>       <span class="hljs-comment">//1.执行操作</span><br>       userDao.updateUser(user);<br><br>       <span class="hljs-comment">//2. 提交事务</span><br>       session.commit();<br>       <span class="hljs-comment">//3.执行查询</span><br>       List&lt;User&gt; users = userDao.findAll();<br>       <span class="hljs-keyword">for</span> (User user2 : users) &#123;<br>           System.out.println(user2);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="8-3-删除"><a href="#8-3-删除" class="headerlink" title="8.3 删除"></a>8.3 删除</h3><p><strong>需求：</strong>根据id删除用户</p><p><font color="cornflowerblue">1. 在<code>UserDao</code>接口中添加相应的方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据用户id删除用户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(Integer id)</span></span>;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 在UserDao.xml中进行配置</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--删除用户--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span><br>    delete from user where id=#&#123;uid&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><span class="hljs-comment">&lt;!--&#123;uid&#125; 只是相当于一个占位符，随便写什么都可以--&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    *  测试删除功能</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDelete</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>       <span class="hljs-comment">//创建用户</span><br>       User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;刘德华&quot;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-string">&quot;中国大陆&quot;</span>);<br><br>       <span class="hljs-comment">//执行操作</span><br>       userDao.deleteUser(<span class="hljs-number">9</span>);<br><br>       <span class="hljs-comment">//提交事务</span><br>       session.commit();<br>       <span class="hljs-comment">//执行查询</span><br>       List&lt;User&gt; users = userDao.findAll();<br>       <span class="hljs-keyword">for</span> (User user2 : users) &#123;<br>           System.out.println(user2);<br>       &#125;<br></code></pre></td></tr></table></figure><h3 id="8-2-查询一条数据"><a href="#8-2-查询一条数据" class="headerlink" title="8.2 查询一条数据"></a>8.2 查询一条数据</h3><p><strong>需求：</strong>根据用户id查询 用户信息</p><p><font color="cornflowerblue">1. 在<code>UserDao</code>接口中添加相应的方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户查询id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">User <span class="hljs-title">findById</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 在UserDao.xml中进行配置</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--根据id查询用户--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wdzl.domain.User&quot;</span>&gt;</span><br>    select * from user where id=#&#123;uid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  测试根据id查询用户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-comment">//执行操作</span><br>    User user = userDao.findById(<span class="hljs-number">1</span>);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-3-根据名称模糊查询用户"><a href="#8-3-根据名称模糊查询用户" class="headerlink" title="8.3 根据名称模糊查询用户"></a>8.3 根据名称模糊查询用户</h3><p><strong>需求：</strong>根据用户name模糊查询 用户信息</p><p><font color="cornflowerblue">1. 在<code>UserDao</code>接口中添加相应的方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据用户名模糊查询用户信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findByName</span><span class="hljs-params">(String name)</span></span>;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 在UserDao.xml中进行配置</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--根据用户名模糊查询用户信息--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByName&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wdzl.domain.User&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span>&gt;</span><br>    select * from user where userName like #&#123;name&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试模糊查询</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindByName</span><span class="hljs-params">()</span> </span>&#123;<br>    List&lt;User&gt; list = userDao.findByName(<span class="hljs-string">&quot;%杰%&quot;</span>);<br>    <span class="hljs-keyword">for</span> (User user : list) &#123;<br>        System.out.println(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-4-使用聚合函数"><a href="#8-4-使用聚合函数" class="headerlink" title="8.4 使用聚合函数"></a>8.4 使用聚合函数</h3><p><strong>需求：</strong>使用聚合函数查询总记录数</p><p><font color="cornflowerblue">1. 在<code>UserDao</code>接口中添加相应的方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询用户总记录</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findTotal</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 在UserDao.xml中进行配置</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--查询用户总记录数--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findTotal&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span><br>    select count(id) from user;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试聚合函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelect</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> total = userDao.findTotal();<br>    System.out.println(total);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-5-插入数据，获取当前保存数据的自增长ID"><a href="#8-5-插入数据，获取当前保存数据的自增长ID" class="headerlink" title="8.5 插入数据，获取当前保存数据的自增长ID"></a>8.5 插入数据，获取当前保存数据的自增长ID</h3><p><strong>该需求需要一条sql语句：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> LAST_INSERT_ID();<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">1. 在配置文件中，找到添加用户的配置标签，在该标签内使用<code>&lt;selectKey&gt;</code>获取当前插入数据的自增长ID</font></p><p><img src="/color-ful/img/mybatis/image-20210307072450010.png" alt="image-20210307072450010"></p><p><code>keyProperty</code>: 对应的实体类属性名</p><p><code>keyColumn</code>:对应数据库列名</p><p><code>Order</code>: 执行的顺序，after-在插入操作后执行</p><p><font color="cornflowerblue">2.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    *  测试添加功能-获取当前添加用户的自增id</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAdd2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>       <span class="hljs-comment">//创建用户</span><br>       User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;刘德华&quot;</span>,<span class="hljs-keyword">new</span> Date(),<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;中国香港&quot;</span>);<br>       <span class="hljs-comment">//保存之前</span><br>       System.out.println(user);<br>       <span class="hljs-comment">//1.执行操作</span><br>       userDao.addUser(user);<br>       <span class="hljs-comment">//2. 提交事务</span><br>       session.commit();<br>       <span class="hljs-comment">//保存之后</span><br>       System.out.println(user);<br><br>   &#125;<br></code></pre></td></tr></table></figure><p>保存之后的user对象的id就会变成当前数据库中实际的id</p><h2 id="9-参数详解"><a href="#9-参数详解" class="headerlink" title="9.参数详解"></a>9.参数详解</h2><h3 id="9-1-parameterType-输入类型"><a href="#9-1-parameterType-输入类型" class="headerlink" title="9.1 parameterType 输入类型"></a>9.1 parameterType 输入类型</h3><ol><li><p><strong>传递基本数据类型和 String</strong></p></li><li><p><strong>传递pojo对象</strong></p><p>当传递参数为对象时，在sql语句中获取对象属性值需要使用<font color="red">OGNL表达式</font>。</p><ul><li>OGNL：Object Graphic Navigation Language 对象图导航语言</li><li>它是通过对象的取值方式来获取值，在写法上把get给省略了<ul><li>在类中，我们获取值：user.getUsername();</li><li>在OGNL中：user.userName</li></ul></li><li>Mybatis中为什么能直接写userName，而不加 <code>user.</code>呢?<ul><li>因为在<code>parameterType</code>中已经提供了属性所属的类，所以可以省略类名</li></ul></li></ul></li></ol><h3 id="9-2-使用包装类型作为参数类型"><a href="#9-2-使用包装类型作为参数类型" class="headerlink" title="9.2 使用包装类型作为参数类型"></a>9.2 使用包装类型作为参数类型</h3><p>​        有时候我们的查询条件可能是符合条件，比如说查询条件需要用户信息，还需要其他信息，这些信息可以组成一个对象，这时候我们就可以考虑使用保障类来组合条件。</p><p><font color="cornflowerblue">1. 创建包装类QueryVo</font></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 传递参数的包装类</span><br><span class="hljs-comment"> * @author lp</span><br><span class="hljs-comment"> * @version 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> QueryVo &#123;<br>    private <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span>;<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-keyword">User</span> getUser() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">user</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> setUser(<span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span>) &#123;<br>        this.<span class="hljs-keyword">user</span> = <span class="hljs-keyword">user</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 在接口中定义相应方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据QueryVo中的信息查询用户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findUserByVo</span><span class="hljs-params">(QueryVo vo)</span></span>;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 在配置文件UserDao.xml中进行配置</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--根据包装类信息模糊查询用户数据--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findUserByVo&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.wdzl.domain.QueryVo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wdzl.domain.User&quot;</span>&gt;</span><br>    select * from user where username like #&#123;user.username&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4. 测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试查询功能-根据包装类信息查询用户信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testVo</span><span class="hljs-params">()</span> </span>&#123;<br>    QueryVo vo = <span class="hljs-keyword">new</span> QueryVo();<br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setUsername(<span class="hljs-string">&quot;%周%&quot;</span>);<br>    vo.setUser(user);<br>    List&lt;User&gt; users = userDao.findUserByVo(vo);<br>    <span class="hljs-keyword">for</span> (User u : users) &#123;<br>        System.out.println(u);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-3-实体类属性与表字段不对应的问题解决"><a href="#9-3-实体类属性与表字段不对应的问题解决" class="headerlink" title="9.3 实体类属性与表字段不对应的问题解决"></a>9.3 实体类属性与表字段不对应的问题解决</h3><p>​        首先我们先将<code>User</code>类中的 <code>id</code>属性名改为<code>userId</code>,重写类中的方法，重新执行查询功能，我们会发现，查出来的数据，id项都为空，这是因为属性和数据库字段名无法匹配的原因，对于这些问题，我们有3种解决方案。</p><p><strong>方案1：统一实体类和表字段的名称（不做演示）</strong></p><p><strong>方案2：给数据库字段加别名 ，让别名与实体类属性名 统一（查询效率比较高）</strong></p><p>我们以<code>根据包装类信息模糊查询用户信息</code> 为例，对sql语句进行修改，并给不对应的列起一个别名。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--根据包装类信息模糊查询用户数据--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findUserByVo&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.wdzl.domain.QueryVo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wdzl.domain.User&quot;</span>&gt;</span><br>    select id as userId,username,birthday,sex,address from user where username like  #&#123;user.username&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再次执行测试，问题顺利解决。</p><p><strong>方案3：在UserDao.xml中配置对应关系</strong></p><p><font color="cornflowerblue">1. 在配置文件UserDao.xml中添加映射配置信息</font></p><p><img src="/color-ful/img/mybatis/image-20210310135449857.png" alt="image-20210310135449857"></p><p><font color="cornflowerblue">2.映射配置添加好以后，我们将对应的的<code>resultType</code> 修改为 <code>resultMap</code>,对应属性值为</font></p><p><img src="/color-ful/img/mybatis/image-20210310140054666.png" alt="image-20210310140054666"></p><p><font color="cornflowerblue">3. 执行相应测试，此时查询出来的信息中，id属性已经有了值，这就表示我们的配置信息已经配置成功。</font></p><h2 id="10-MyBatis实现Dao层的开发"><a href="#10-MyBatis实现Dao层的开发" class="headerlink" title="10. MyBatis实现Dao层的开发"></a>10. MyBatis实现Dao层的开发</h2><p>​        现实开发中，有时候也是需要我们自己去实现Dao层接口，那么如何使用MyBatis框架自定义实现类是我们接下来要研究的内容。</p><p><strong>准备工作：</strong></p><p><font color="cornflowerblue">新建工程，将前面演示CRUD操作的工程内容复制到该工程中，并做对应的修改。</font></p><ul><li>复制<code>main</code> 和 <code>test</code>目录</li><li>修改<code>pom.xml</code>,把相关依赖添加到配置文件中</li><li>删除<code>UserDao</code>中的<code>&lt;resultMap&gt;</code>,并将下面标签中使用到<code>&lt;resultMap&gt;</code>的地方换成<code>&lt;resultType&gt;</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">resultType=&quot;com.wdzl.domain.User&quot;<br></code></pre></td></tr></table></figure><ul><li>删除包装类<code>QueryVo</code> 还有对应的 配置 和 测试</li></ul><h4 id="10-1-查询所有的方法"><a href="#10-1-查询所有的方法" class="headerlink" title="10.1 查询所有的方法"></a>10.1 查询所有的方法</h4><p><font color="cornflowerblue">1. 添加UserDao对应的实现类:先实现查询所有列表的方法。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.dao.impl;<br><br><span class="hljs-keyword">import</span> com.wdzl.dao.UserDao;<br><span class="hljs-keyword">import</span> com.wdzl.domain.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * UserDao实现类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> SqlSessionFactory factory;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserDaoImpl</span><span class="hljs-params">(SqlSessionFactory factory)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.factory = factory;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1. 获取SqlSession对象</span><br>        SqlSession session = factory.openSession();<br>        <span class="hljs-comment">//2. 调用SqlSession的方法</span><br>        List&lt;User&gt; users = session.selectList(<span class="hljs-string">&quot;com.wdzl.dao.UserDao.findAll&quot;</span>);<span class="hljs-comment">//参数就是我们自定义Mybatis分析图中的那个“key”</span><br>        <span class="hljs-comment">//3. 释放资源</span><br>        session.close();<br>        <br>        <span class="hljs-keyword">return</span> users;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">findById</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">findByName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findTotal</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.测试：只修改需要用的方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.dao;<br><br><span class="hljs-keyword">import</span> com.wdzl.dao.impl.UserDaoImpl;<br><span class="hljs-keyword">import</span> com.wdzl.domain.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> org.junit.After;<br><span class="hljs-keyword">import</span> org.junit.Before;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * MyBatis实现Dao层-测试</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisTest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> InputStream is;<br>    <span class="hljs-keyword">private</span> SqlSessionFactoryBuilder builder;<br>    <span class="hljs-keyword">private</span> SqlSessionFactory factory;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  初始化方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException  </span>&#123;<br>        <span class="hljs-comment">//1.读取配置文件</span><br>        is = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-comment">//2.创建SqlSessionFactory工厂</span><br>        builder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>        factory = builder.build(is);<br>        <span class="hljs-comment">//3.获取UserDao实现类对象</span><br>        userDao = <span class="hljs-keyword">new</span> UserDaoImpl(factory);<br>    &#125;<br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//6.释放资源</span><br>        is.close();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试查询所有的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1.执行方法</span><br>        List&lt;User&gt; users = userDao.findAll();<br>        <span class="hljs-comment">//3.遍历</span><br>        <span class="hljs-keyword">for</span> (User user : users) &#123;<br>            System.out.println(user);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="10-2-添加用户"><a href="#10-2-添加用户" class="headerlink" title="10.2 添加用户"></a>10.2 添加用户</h4><p><font color="cornflowerblue">1. 在UserDaoImpl 中 实现 addUser()方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span> </span>&#123;<br>      <span class="hljs-comment">//1. 获取SqlSession对象</span><br>      SqlSession session = factory.openSession();<br>      <span class="hljs-comment">//2.执行方法</span><br>      session.insert(<span class="hljs-string">&quot;com.wdzl.dao.UserDao.addUser&quot;</span>, user);<br>      <span class="hljs-comment">//3.提交事务</span><br>      session.commit();<br>      <span class="hljs-comment">//4.释放资源</span><br>      session.close();<br>  &#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 编写测试案例</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 测试添加用户的方法</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAddUser</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">//1.创建用户对象</span><br>       User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;华罗庚&quot;</span>, <span class="hljs-string">&quot;1977-6-5&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;中国北京&quot;</span>);<br>       <span class="hljs-comment">//2.执行方法</span><br>       userDao.addUser(user);<br>       <span class="hljs-comment">//3.查询</span><br>       <span class="hljs-comment">//执行方法</span><br>       List&lt;User&gt; users = userDao.findAll();<br>       <span class="hljs-comment">//遍历</span><br>       <span class="hljs-keyword">for</span> (User user2 : users) &#123;<br>           System.out.println(user2);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="10-3-其他方法"><a href="#10-3-其他方法" class="headerlink" title="10.3 其他方法"></a>10.3 其他方法</h4><p>课堂练习作业</p><p><strong>1.更新操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span> </span>&#123;<br>    <span class="hljs-comment">//1. 获取SqlSession对象</span><br>    SqlSession session = factory.openSession();<br>    <span class="hljs-comment">//2.执行方法</span><br>    session.update(<span class="hljs-string">&quot;com.wdzl.dao.UserDao.updateUser&quot;</span>, user);<br>    <span class="hljs-comment">//3.提交事务</span><br>    session.commit();<br>    <span class="hljs-comment">//4.释放资源</span><br>    session.close();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 测试修改用户的方法</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdateUser</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">//1.创建用户对象</span><br>       User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;华罗庚&quot;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;首都北京&quot;</span>);<br>       <span class="hljs-comment">//2.执行方法</span><br>       userDao.updateUser(user);<br>       <span class="hljs-comment">//3.查询</span><br>       <span class="hljs-comment">//执行方法</span><br>       List&lt;User&gt; users = userDao.findAll();<br>       <span class="hljs-comment">//遍历</span><br>       <span class="hljs-keyword">for</span> (User user2 : users) &#123;<br>           System.out.println(user2);<br>       &#125;<br>   &#125;<br><br></code></pre></td></tr></table></figure><p><strong>2.删除操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>    <span class="hljs-comment">//1. 获取SqlSession对象</span><br>    SqlSession session = factory.openSession();<br>    <span class="hljs-comment">//2.执行方法</span><br>    session.delete(<span class="hljs-string">&quot;com.wdzl.dao.UserDao.deleteUser&quot;</span>, id);<br>    <span class="hljs-comment">//3.提交事务</span><br>    session.commit();<br>    <span class="hljs-comment">//4.释放资源</span><br>    session.close();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 测试删除用户的方法</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteUser</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">//1.执行方法</span><br>       userDao.deleteUser(<span class="hljs-number">7</span>);<br>       <span class="hljs-comment">//2.查询</span><br>       <span class="hljs-comment">//执行方法</span><br>       List&lt;User&gt; users = userDao.findAll();<br>       <span class="hljs-comment">//遍历</span><br>       <span class="hljs-keyword">for</span> (User user2 : users) &#123;<br>           System.out.println(user2);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p><strong>查询：单个用户，模糊查询，聚合函数查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 测试查询单个用户的方法</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindById</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">//1.执行方法</span><br>       User user = userDao.findById(<span class="hljs-number">5</span>);<br>       System.out.println(user);<br><br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 测试模糊查询</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindByName</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">//1.执行方法</span><br>       List&lt;User&gt; users = userDao.findByName(<span class="hljs-string">&quot;%德%&quot;</span>);<br>       <span class="hljs-comment">//遍历</span><br>       <span class="hljs-keyword">for</span> (User user : users) &#123;<br>           System.out.println(user);<br>       &#125;<br><br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 测试模糊查询</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindTotal</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">int</span> total = userDao.findTotal();<br>       System.out.println(total);<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 测试查询单个用户的方法</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindById</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">//1.执行方法</span><br>       User user = userDao.findById(<span class="hljs-number">5</span>);<br>       System.out.println(user);<br><br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 测试模糊查询</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindByName</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">//1.执行方法</span><br>       List&lt;User&gt; users = userDao.findByName(<span class="hljs-string">&quot;%德%&quot;</span>);<br>       <span class="hljs-comment">//遍历</span><br>       <span class="hljs-keyword">for</span> (User user : users) &#123;<br>           System.out.println(user);<br>       &#125;<br><br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 测试总记录数查询</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindTotal</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">int</span> total = userDao.findTotal();<br>       System.out.println(total);<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="11-properties标签"><a href="#11-properties标签" class="headerlink" title="11. properties标签"></a>11. properties标签</h2><p><strong>方式一：</strong>将配置提取出来进行统一管理，在需要使用的地方使用<code>$&#123;&#125;</code>引用即可</p><p><font color="cornflowerblue">1.提取</font></p><p><img src="/color-ful/img/mybatis/image-20210311112826392.png" alt="image-20210311112826392"></p><p><font color="cornflowerblue">2.引用</font></p><p><img src="/color-ful/img/mybatis/image-20210311112917638.png" alt="image-20210311112917638"></p><p><strong>方式二：引用外部配置文件</strong></p><p><img src="/color-ful/img/mybatis/image-20210311113843135.png" alt="image-20210311113843135"></p><p><font color="red">引用外部有两个属性</font>：</p><ul><li><p><strong>resource</strong> : 用于指定配置文件的位置类路径的写法，并且必须存在于类路径下。</p></li><li><p><strong>url</strong> : 统一资源定位符。可以标识资源的位置</p><p><code>Http  :  //  localhost  :  8080    /book/index.jsp</code></p><p> 协议                        主机地址           端口               URI</p><p>在windows文件夹中使用的是file协议，我们可以将配置文件所在目录拖入浏览器，就可以看到文件在文件系统中的rul</p></li></ul><p><img src="/color-ful/img/mybatis/image-20210311114607916.png" alt="image-20210311114607916"></p><h2 id="12-typeAliases标签-和-package标签"><a href="#12-typeAliases标签-和-package标签" class="headerlink" title="12. typeAliases标签 和 package标签"></a>12. typeAliases标签 和 package标签</h2><p>​        在之前的演示案例中，<code>UserDao.xml</code>配置文件可以配置映射关系，比如下图标签中，<code>resultType</code>标签的属性值，可以使<code>int</code>，<code>java.lang.Integer</code>,也可以是<code>INT</code>，这是因为MyBatis框架给这些标签起了别名，所以这几种属性值才可以表示相同的类。</p><p><img src="/color-ful/img/mybatis/image-20210311140550262.png" alt="image-20210311140550262"></p><p>​        下面我们来看如何给实体类配置别名：在 主配置文件中使用<code>typeAliases</code>配置别名，它只能给实体类配置别名。</p><p><img src="/color-ful/img/mybatis/image-20210311144346016.png" alt="image-20210311144346016"></p><p>在<code>typeAliases</code>中 有两个属性</p><ul><li><strong>type</strong>:用来指定起别名的实体类，如果省略<code>alias</code>属性，则使用默认别名，默认别名为类名 ，不区分大小写，任意组合都可识别。</li><li><strong>alias</strong>:指定一个新的别名，比如上图案例中将别名设置为<code>hehe</code>，则在下面使用时使用<code>hehe</code>即可表示User类。新的别名也不区分大小写。</li></ul><p>当实体类比较多时，我们可以使用<code>package</code>标签批量给包中的类添加别名</p><p><img src="/color-ful/img/mybatis/image-20210311150312782.png" alt="image-20210311150312782"></p><h2 id="13-连接池"><a href="#13-连接池" class="headerlink" title="13. 连接池"></a>13. 连接池</h2><h4 id="13-1-概述"><a href="#13-1-概述" class="headerlink" title="13.1 概述"></a>13.1 概述</h4><p>​        连接池就是用于存储连接对象的一个容器，当系统初始化完成后，容器被创建，容器会申请一些连接对象，当用户访问数据库时，从容器中获取连接对象即可。访问完之后，会将连接对象归还给连接池。这样做可以提高效率，提高连接对象的复用，不必频繁的创建和释放连接对象。</p><h4 id="13-2-MyBatis连接池"><a href="#13-2-MyBatis连接池" class="headerlink" title="13.2 MyBatis连接池"></a>13.2 MyBatis连接池</h4><p>连接池有很多种，最为熟悉的比如c3p0，DBCP，druid等。</p><p>MyBatis支持三种内置的数据源类型：</p><ul><li><code>POOLED：</code>实现dataSource接口，并且使用了池的思想。</li><li><code>UNPOOLED：</code>同样也是实现了dataSource接口，但是该类型并没有使用池的思想。</li><li><code>JDNI：</code>采用服务器提供的JDNI技术实现的，并且在不同服务器之间获取的连接池是不一样的。<ul><li>当前框架教学使用的是Tomcat服务器，采用的是dbcp连接池技术</li></ul></li></ul><p><font color="cornflowerblue">通过控制台的信息查看内置连接池</font></p><p><strong><font color="red">POOLED:</font></strong></p><p><img src="/color-ful/img/mybatis/image-20210311160625599.png" alt="image-20210311160625599"></p><p><font color="red"><strong>UNPOOLED:</strong></font></p><p><img src="/color-ful/img/mybatis/image-20210311160811775.png" alt="image-20210311160811775"></p><p>​        开发中我们根据需求：我们可以选择使用内置连接池 或者 整合<code>Druid</code>等得三方连接池技术都是可以的。</p><h2 id="14-事务"><a href="#14-事务" class="headerlink" title="14. 事务"></a>14. 事务</h2><p>​        对于事务的控制后期我们主要依赖于Spring来完成，当然MyBatis本身也是可以对事物进行控制的。我们查看演示案例执行<code>addUser</code>方法时，我们会发现，Mybatis框架 默认事务提交方式是手动的。</p><p><img src="/color-ful/img/mybatis/image-20210311220903479.png" alt="image-20210311220903479"></p><p>​        我们可以通过<code>SqlSession</code>的构造方法进行设置操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">session = factory.openSession(<span class="hljs-keyword">true</span>);<br></code></pre></td></tr></table></figure><p>​        再次执行<code>addUser()</code>，此时事务就会自动被提交。</p><p>​        该知识点我们只需知道MyBatis如何设置事务自动提交即可。</p><h2 id="15-动态SQL"><a href="#15-动态SQL" class="headerlink" title="15. 动态SQL"></a>15. 动态SQL</h2><p>开始此章学习前，我们先新建一个Maven项目，快速搭建MyBatis环境。</p><p><font color="cornflowerblue">1. 新建Maven工程，添加依赖，将CRUD演示工程复制到新建工程中</font></p><p><font color="cornflowerblue">2. 删除UserDao中的方法，只留4个查询方法，如下图所示，同样对应配置文件中的配置信息也删掉。</font></p><p><img src="/color-ful/img/mybatis/image-20210311222525198.png" alt="image-20210311222525198"></p><p>改好之后，我们来演示一个案例来解决一个查询需求。</p><h4 id="15-1-if标签"><a href="#15-1-if标签" class="headerlink" title="15.1 if标签"></a>15.1 if标签</h4><p><strong>需求：</strong>根据给定条件完成对满足条件的用户信息复合查询：查询满足名称叫刘德华 且 性别为男的所有员工信息</p><p><font color="cornflowerblue">1. 在接口中添加方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据给定条件 完成复合查询</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findUserByConditions</span><span class="hljs-params">(User user)</span></span>;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.在映射配置文件中添加配置信息</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--根据给定条件 完成复合查询--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findUserByConditions&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from user where 1=1<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username !=null&quot;</span>&gt;</span><br>      and  username=#&#123;username&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​        通过案例我们发现动态SQL的语法与 jsp中的JSTL标签非常类似。</p><p><font color="cornflowerblue">3. 测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 测试复合条件查询</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindByCondition</span><span class="hljs-params">()</span> </span>&#123;<br>      User user = <span class="hljs-keyword">new</span> User();<br>      user.setUsername(<span class="hljs-string">&quot;刘德华&quot;</span>);<br>      user.setSex(<span class="hljs-string">&quot;男&quot;</span>);<br>      <span class="hljs-comment">//执行查询</span><br>      List&lt;User&gt; users = userDao.findUserByConditions(user);<br>      <span class="hljs-keyword">for</span> (User user2 : users) &#123;<br>          System.out.println(user2);<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p><font color="red">通过案例我们再来理解什么是动态SQL？</font></p><blockquote><p>​        动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p><p>​                                                                                                                            —  MyBaits 官网</p></blockquote><h4 id="15-2-where标签"><a href="#15-2-where标签" class="headerlink" title="15.2 where标签"></a>15.2 where标签</h4><p><code>&lt;where&gt;</code>标签是为了解决拼接sql时需要添加一个恒等式的问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--根据给定条件 完成复合查询--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findUserByConditions&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>       select * from user<br>       <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username !=null and username!=&#x27;&#x27;&quot;</span>&gt;</span><br>               and username=#&#123;username&#125;<br>           <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sex!=null and sex!=&#x27;&#x27;&quot;</span>&gt;</span><br>               and sex=#&#123;sex&#125;<br>           <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再次执行测试，效果是相同的。</p><h4 id="15-3-foreach-标签"><a href="#15-3-foreach-标签" class="headerlink" title="15.3 foreach 标签"></a>15.3 foreach 标签</h4><p>​        当我们要查询满足条件在某个范围中的信息时：</p><p><strong>SQL：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>);<br></code></pre></td></tr></table></figure><p>​        在实际开发中我们该怎么解决呢？</p><p>​    1. 我们可以借助包装类，在包装类中声明一个集合，将范围信息存储到集合中。</p><pre><code>         2. 在配置文件中遍历集合，并将集合中的数据拼接到sql语句中</code></pre><p><font color="cornflowerblue">1. 在包装类中添加集合属性 和 对应的get、set方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 传递参数的包装类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QueryVo</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> User user;<br>    <span class="hljs-keyword">private</span> List&lt;Integer&gt; ids;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">getIds</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> ids;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setIds</span><span class="hljs-params">(List&lt;Integer&gt; ids)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.ids = ids;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUser</span><span class="hljs-params">(User user)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.user = user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. UserDao中添加相应方法并在映射文件中进行配置</font></p><p><strong>语法：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;集合名&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;and id in (&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;变量名&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;分隔符&quot;</span>&gt;</span><br>#&#123;变量名&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>collection：</strong>遍历的集合</li><li><strong>open：</strong>拼接SQL以该属性值为开头</li><li><strong>close：</strong>拼接SQL以该属性值为结尾</li><li><strong>item：</strong>变量名，相当于增强for循环中的那个变量。拼接在 <code>open</code> 和 <code>close</code> 之间</li><li><strong>separator：</strong>元素(变量)间以什么分割</li><li>#{变量名}：必须与<code>item</code>属性保持一致。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--根据包装类中的id集合，查询用户信息--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findUserByIds&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;queryVo&quot;</span>&gt;</span><br>    select * from user<br><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;ids != null and ids.size()&gt;0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;and id in (&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>            #&#123;id&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 测试根据包装类中的id集合，查询用户信息</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindUserByIds</span><span class="hljs-params">()</span> </span>&#123;<br>       QueryVo vo = <span class="hljs-keyword">new</span> QueryVo();<br>       List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>       list.add(<span class="hljs-number">1</span>);<br>       list.add(<span class="hljs-number">3</span>);<br>       list.add(<span class="hljs-number">5</span>);<br>       list.add(<span class="hljs-number">7</span>);<br>       vo.setIds(list);<br><br>       <span class="hljs-comment">//执行查询</span><br>       List&lt;User&gt; users = userDao.findUserByIds(vo);<br>       <span class="hljs-keyword">for</span> (User user : users) &#123;<br>           System.out.println(user);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p><font color="red">扩展标签：<code>&lt;sql&gt;</code></font></p><p>当配置文件中的相同的sql比较多时，我们可以将它统一提取出来</p><p><strong>声明：</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">sql</span> id=&quot;UserBase&quot;&gt;<br>    <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span><br>&lt;/<span class="hljs-keyword">sql</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>使用：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;select id=<span class="hljs-string">&quot;findAll&quot;</span> resultType=<span class="hljs-string">&quot;user&quot;</span>&gt;&lt;!--id属性对应方法的名称，不能随便写 --&gt;<br>   &lt;include refid=&quot;userBase&quot;&gt;&lt;/include&gt;<br>  <span class="hljs-comment">/*  select * from user;*/</span><br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><h2 id="16-MyBatis的多表查询"><a href="#16-MyBatis的多表查询" class="headerlink" title="16. MyBatis的多表查询"></a>16. MyBatis的多表查询</h2><p>在MySql中，表与表之间的关系有三种</p><ul><li>一对一</li><li>一对多（多对一）</li><li>多对多</li></ul><p><font color="cornflowerblue">举例</font>：</p><ul><li>一对一<ul><li>公民和身份证号：一个公民只能有一个身份证号</li></ul></li><li>一对多 或 多对一<ul><li>用户和订单是 一对多的关系：一个用户可以有多个订单</li><li>订单和用户是 多对一的关系：多个订单属于一个用户</li></ul></li><li>多对多<ul><li>学生和老师 是多对多：一个学生可以有多个老师，一个老师也有多个学生。</li></ul></li><li><font color="red">特殊：多对一</font><ul><li>如果将每一个订单取出，他都只能属于一个用户。所以在MyBatis中，就把多对一的关系 看做是一对一的关系</li></ul></li></ul><h3 id="16-1-MyBatis中的多表查询-1多对一，一对多"><a href="#16-1-MyBatis中的多表查询-1多对一，一对多" class="headerlink" title="16.1 MyBatis中的多表查询-1多对一，一对多"></a>16.1 MyBatis中的多表查询-1多对一，一对多</h3><h4 id="准备工作：Module创建-并能实现单表信息查询"><a href="#准备工作：Module创建-并能实现单表信息查询" class="headerlink" title="准备工作：Module创建 并能实现单表信息查询"></a><strong>准备工作：Module创建 并能实现单表信息查询</strong></h4><p><font color="cornflowerblue">1. 数据库表：用户表  和  账户表</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE mybatis2 CHARSET utf8;<br>USE mybatis2;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>` (<br>  `id` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `username` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户名称&#x27;</span>,<br>  `birthday` DATETIME <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;生日&#x27;</span>,<br>  `sex` <span class="hljs-type">CHAR</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;性别&#x27;</span>,<br>  `address` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;地址&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY  (`id`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-keyword">INSERT</span>  <span class="hljs-keyword">INTO</span> `<span class="hljs-keyword">user</span>`(`id`,`username`,`birthday`,`sex`,`address`) <br><span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;老王&#x27;</span>,<span class="hljs-string">&#x27;2017-05-27 18:27:09&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;北京&#x27;</span>),<br>(<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;小王&#x27;</span>,<span class="hljs-string">&#x27;2019-04-03 15:09:37&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;西安&#x27;</span>),<br>(<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;小李&#x27;</span>,<span class="hljs-string">&#x27;2019-07-22 17:44:33&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;咸阳&#x27;</span>),<br>(<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;小刘&#x27;</span>,<span class="hljs-string">&#x27;2018-03-04 15:52:36&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;渭南&#x27;</span>),<br>(<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;大王&#x27;</span>,<span class="hljs-string">&#x27;2016-11-03 17:37:26&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;富平&#x27;</span>),<br>(<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;小马&#x27;</span>,<span class="hljs-string">&#x27;2016-04-09 01:24:40&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;上海&#x27;</span>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `account` (<br>  `ID` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;编号&#x27;</span>,<br>  `UID` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户编号&#x27;</span>,<br>  `MONEY` <span class="hljs-keyword">DOUBLE</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;金额&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY  (`ID`),<br>  KEY `FK_Reference_8` (`UID`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `FK_Reference_8` <span class="hljs-keyword">FOREIGN</span> KEY (`UID`) <span class="hljs-keyword">REFERENCES</span> `<span class="hljs-keyword">user</span>` (`id`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-keyword">INSERT</span>  <span class="hljs-keyword">INTO</span> `account`(`ID`,`UID`,`MONEY`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1000</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 创建主配置文件：SqlMapConfig.xml,并且将log4j,jdbc的配置文件一起复制到<code>resources</code>目录下</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.wdzl.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--配置mysql环境--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--配置事务的类型--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--配置数据源（连接池）--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--Pooled 使用连接池--&gt;</span><br>                <span class="hljs-comment">&lt;!--配置连接数据库的4个基本信息--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-comment">&lt;!--指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/wdzl/dao/UserDao.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/wdzl/dao/AccountDao.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 建立两个实体类：用户实体类 和 账户实体类</font></p><p><strong>User:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  用户实体类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> Date birthday;<br>    <span class="hljs-keyword">private</span> Character sex;<br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(Integer id, String username, Date birthday, Character sex, String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.username = username;<br>        <span class="hljs-keyword">this</span>.birthday = birthday;<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getBirthday</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> birthday;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBirthday</span><span class="hljs-params">(Date birthday)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.birthday = birthday;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Character <span class="hljs-title">getSex</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSex</span><span class="hljs-params">(Character sex)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, birthday=&quot;</span> + birthday +<br>                <span class="hljs-string">&quot;, sex=&quot;</span> + sex +<br>                <span class="hljs-string">&quot;, address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>Account:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 账户实体类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> Integer uid;<br>    <span class="hljs-keyword">private</span> Double money;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span><span class="hljs-params">(Integer id, Integer uid, Double money)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.uid = uid;<br>        <span class="hljs-keyword">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getUid</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> uid;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUid</span><span class="hljs-params">(Integer uid)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.uid = uid;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Double <span class="hljs-title">getMoney</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> money;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMoney</span><span class="hljs-params">(Double money)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Account&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, uid=&quot;</span> + uid +<br>                <span class="hljs-string">&quot;, money=&quot;</span> + money +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4. 创建各自实体类操作的接口</font></p><p><strong>UserDao</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 操作用户的接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有用户信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>AccountDao</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 操作账户的接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AccountDao</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有账户信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">List&lt;Account&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5. 创建各接口对应的映射配置文件</font></p><p><strong>UserDao.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.wdzl.dao.UserDao&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--查询所有用户--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        select * from user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>AccountDao.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.wdzl.dao.AccountDao&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--查询所有账户--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;account&quot;</span>&gt;</span><br>        select * from account;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">6. 将映射配置文件添加到主配置文件中</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/wdzl/dao/UserDao.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/wdzl/dao/AccountDao.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">7. 测试：分别测试UserDao 和 AccountDao</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * UserDao测试类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserTest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> InputStream is;<br>    <span class="hljs-keyword">private</span> SqlSessionFactoryBuilder builder;<br>    <span class="hljs-keyword">private</span> SqlSessionFactory factory;<br>    <span class="hljs-keyword">private</span> SqlSession session;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  初始化方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException  </span>&#123;<br>        <span class="hljs-comment">//1.读取配置文件</span><br>        is = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-comment">//2.创建SqlSessionFactory工厂</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        使用SqlSessionFactoryBuilder创建工厂的好处是MyBatis将如何读取配置文件，如何使用配置文件，如何封装等细节都进行了封装，使我们使用极简的方式来实现功能。</span><br><span class="hljs-comment">         */</span><br>        builder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>        factory = builder.build(is);<br>        <span class="hljs-comment">//3.使用工厂生产SqlSession对象</span><br>        session = factory.openSession(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">//4.使用SqlSession创建Dao接口的代理对象</span><br>        userDao = session.getMapper(UserDao.class);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  释放资源</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//6.释放资源</span><br>        session.close();<br>        is.close();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询用户</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAllUser</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;User&gt; all = userDao.findAll();<br>        <span class="hljs-keyword">for</span> (User user : all) &#123;<br>            System.out.println(user);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountTest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> InputStream is;<br>    <span class="hljs-keyword">private</span> SqlSessionFactoryBuilder builder;<br>    <span class="hljs-keyword">private</span> SqlSessionFactory factory;<br>    <span class="hljs-keyword">private</span> SqlSession session;<br>    <span class="hljs-keyword">private</span> AccountDao accountDao;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  初始化方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException  </span>&#123;<br>        <span class="hljs-comment">//1.读取配置文件</span><br>        is = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-comment">//2.创建SqlSessionFactory工厂</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        使用SqlSessionFactoryBuilder创建工厂的好处是MyBatis将如何读取配置文件，如何使用配置文件，如何封装等细节都进行了封装，使我们使用极简的方式来实现功能。</span><br><span class="hljs-comment">         */</span><br>        builder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>        factory = builder.build(is);<br>        <span class="hljs-comment">//3.使用工厂生产SqlSession对象</span><br>        session = factory.openSession(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">//4.使用SqlSession创建Dao接口的代理对象</span><br>        accountDao = session.getMapper(AccountDao.class);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  释放资源</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//6.释放资源</span><br>        session.close();<br>        is.close();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询账户</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAllUser</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;Account&gt; all = accountDao.findAll();<br>        <span class="hljs-keyword">for</span> (Account account : all) &#123;<br>            System.out.println(account);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="需求：查询所有账户信息的同时，也显示账户所属用户的信息（多对一）"><a href="#需求：查询所有账户信息的同时，也显示账户所属用户的信息（多对一）" class="headerlink" title="需求：查询所有账户信息的同时，也显示账户所属用户的信息（多对一）"></a><strong>需求：查询所有账户信息的同时，也显示账户所属用户的信息（多对一）</strong></h4><p><font color="cornflowerblue">1.首先确定SQL语句</font></p><p><img src="/color-ful/img/mybatis/image-20210313005455559.png" alt="image-20210313005455559"></p><p>改进</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> a.`id`,a.`uid`, u.`username`,u.`sex`,u.`address`,a.`MONEY` <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">USER</span> u,account a <span class="hljs-keyword">WHERE</span> u.id<span class="hljs-operator">=</span>a.`uid`<br></code></pre></td></tr></table></figure><p><img src="/color-ful/img/mybatis/image-20210313005755918.png" alt="image-20210313005755918"></p><p><font color="cornflowerblue">2. 在实体类中添加一对一关系</font></p><p>在<code>Account</code>类中添加成员变量 <code>user</code>，并提供<code>get/set</code>方法</p><p><img src="/color-ful/img/mybatis/image-20210313013532449.png" alt="image-20210313013532449"></p><p><font color="cornflowerblue">3.修改映射配置文件</font></p><p><img src="/color-ful/img/mybatis/image-20210313014003747.png" alt="image-20210313014003747"></p><p><font color="cornflowerblue">4.执行测试即可</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 查询账户</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-meta">@Test</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAllAccount</span><span class="hljs-params">()</span> </span>&#123;<br>     List&lt;Account&gt; all = accountDao.findAll();<br>     <span class="hljs-keyword">for</span> (Account account : all) &#123;<br>         System.out.println(<span class="hljs-string">&quot;----------------&quot;</span>);<br>         System.out.println(account);<br>         System.out.println(account.getUser());<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h4 id="需求：查询所有用户信息的同时，显示该用户所拥有的账户信息"><a href="#需求：查询所有用户信息的同时，显示该用户所拥有的账户信息" class="headerlink" title="需求：查询所有用户信息的同时，显示该用户所拥有的账户信息"></a>需求：查询所有用户信息的同时，显示该用户所拥有的账户信息</h4><p><font color="cornflowerblue">1. 在实体类中添加一对多关系 </font></p><p><img src="/color-ful/img/mybatis/image-20210313014851911.png" alt="image-20210313014851911"></p><p><font color="cornflowerblue">2. 确定SQL语句</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">USER</span> u <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> account a <span class="hljs-keyword">ON</span> u.uid <span class="hljs-operator">=</span> a.uid;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 修改映射配置文件</font></p><p><img src="/color-ful/img/mybatis/image-20210313023442779.png" alt="image-20210313023442779"></p><p><font color="red">注意：Mybatis会自动去重，但是我们需要将表的主键字段设为不同名称才可以实现去重，这里我将两表的主键字段进行了修改。</font></p><p><font color="cornflowerblue">4.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询用户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAllUser</span><span class="hljs-params">()</span> </span>&#123;<br>    List&lt;User&gt; all = userDao.findAll();<br>    <span class="hljs-keyword">for</span> (User user : all) &#123;<br>        System.out.println(<span class="hljs-string">&quot;--------------&quot;</span>);<br>        System.out.println(user);<br>        System.out.println(user.getAccounts().size());<br>        System.out.println(user.getAccounts());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="16-2-MyBatis中的多表查询-2-多对多"><a href="#16-2-MyBatis中的多表查询-2-多对多" class="headerlink" title="16.2 MyBatis中的多表查询-2 多对多"></a>16.2 MyBatis中的多表查询-2 多对多</h3><p>我们知道SQL中 多对多的关系需要借助一张中间。</p><h4 id="需求：查询角色信息的同时显示赋予该角色的用户信息"><a href="#需求：查询角色信息的同时显示赋予该角色的用户信息" class="headerlink" title="需求：查询角色信息的同时显示赋予该角色的用户信息"></a>需求：查询角色信息的同时显示赋予该角色的用户信息</h4><p><strong>步骤：</strong></p><pre><code> 1. 建立两张表，用户表 和 角色表  - 让用户表和角色表具有多对多的关系。需要使用中间表，中间表中包含这两张表的主键，并且这两个主键在中间表中是外键2. 建立两个实体类：用户实体类 和 角色实体类- 让用户和角色实体类能体现出多对多的关系：各自包含对方的一个集合引用3. 建立配置文件- 用户配置文件- 角色配置文件4. 实现配置- 查询用户时，可以同时得到该用户所包含的角色信息。- 当我们查询角色时，可以同时得到拥有该角色的用户信息。</code></pre><p><strong>实现：先实现单表查询，再实现多对多关系查询</strong></p><p><font color="cornflowerblue">1. 新建Module, 修改pom.xml，添加相应依赖</font></p><p><font color="cornflowerblue">2. 将多表查询1的Module中 src下的内容拷贝到当前Module中</font></p><p><font color="cornflowerblue">3. 将 Account有关的类，接口 ，配置文件等进行删除</font></p><ul><li>实体类</li><li>接口</li><li>AccountDao配置文件</li><li>User实体类中与Account有关的属性和方法</li><li>UserDao.xml中有关Account的配置信息</li><li>测试类：Account测试类 和 User测试类中有关Account的部分</li></ul><p><font color="cornflowerblue">4. 创建数据库表并插入数据</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `role` (<br>  `rid` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;编号&#x27;</span>,<br>  `ROLE_NAME` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;角色名称&#x27;</span>,<br>  `ROLE_DESC` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">60</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;角色描述&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY  (`rid`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><br><span class="hljs-keyword">INSERT</span>  <span class="hljs-keyword">INTO</span> `role`(`rid`,`ROLE_NAME`,`ROLE_DESC`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;院长&#x27;</span>,<span class="hljs-string">&#x27;管理整个学院&#x27;</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;总裁&#x27;</span>,<span class="hljs-string">&#x27;管理整个公司&#x27;</span>),(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;校长&#x27;</span>,<span class="hljs-string">&#x27;管理整个学校&#x27;</span>);<br><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `user_role` (<br>  `UID` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户编号&#x27;</span>,<br>  `RID` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;角色编号&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY  (`UID`,`RID`),<br>  KEY `FK_Reference_10` (`RID`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `FK_Reference_10` <span class="hljs-keyword">FOREIGN</span> KEY (`RID`) <span class="hljs-keyword">REFERENCES</span> `role` (`rid`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `FK_Reference_9` <span class="hljs-keyword">FOREIGN</span> KEY (`UID`) <span class="hljs-keyword">REFERENCES</span> `<span class="hljs-keyword">user</span>` (`uid`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-keyword">INSERT</span>  <span class="hljs-keyword">INTO</span> `user_role`(`UID`,`RID`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>),(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5. 创建实体类</font></p><p><font color="red">注意：本次实体类的属性名和表字段并没有匹配，所以我们需要去手动配置映射</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Role实体类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Role</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer roleId;<br>    <span class="hljs-keyword">private</span> String roleName;<br>    <span class="hljs-keyword">private</span> String roleDesc;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Role</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Role</span><span class="hljs-params">(Integer roleId, String roleName, String roleDesc)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.roleId = roleId;<br>        <span class="hljs-keyword">this</span>.roleName = roleName;<br>        <span class="hljs-keyword">this</span>.roleDesc = roleDesc;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getRoleId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> roleId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRoleId</span><span class="hljs-params">(Integer roleId)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.roleId = roleId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getRoleName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> roleName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRoleName</span><span class="hljs-params">(String roleName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.roleName = roleName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getRoleDesc</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> roleDesc;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRoleDesc</span><span class="hljs-params">(String roleDesc)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.roleDesc = roleDesc;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Role&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;roleId=&quot;</span> + roleId +<br>                <span class="hljs-string">&quot;, roleName=&#x27;&quot;</span> + roleName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, roleDesc=&#x27;&quot;</span> + roleDesc + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">6. 创建Dao接口</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RoleDao</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有角色</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">List&lt;Role&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">7. 创建映射配置文件</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.wdzl.dao.RoleDao&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--对应dao的全限定类名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;roleMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Role&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roleId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;rid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roleName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;ROLE_NAME&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roleDesc&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;ROLE_DESC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;roleMap&quot;</span>&gt;</span><br>    select * from role<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">8. 主配置文件中添加相应的映射文件配置</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;mapper resource=<span class="hljs-string">&quot;com/wdzl/dao/RoleDao.xml&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">9. 测试单表查询是否成功</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java">**<br> * 测试类<br> *<br> * <span class="hljs-meta">@author</span> lp<br> * <span class="hljs-meta">@version</span> <span class="hljs-number">1.0</span><br> */<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RoleTest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> InputStream is;<br>    <span class="hljs-keyword">private</span> SqlSessionFactoryBuilder builder;<br>    <span class="hljs-keyword">private</span> SqlSessionFactory factory;<br>    <span class="hljs-keyword">private</span> SqlSession session;<br>    <span class="hljs-keyword">private</span> RoleDao roleDao;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.读取配置文件</span><br>        is = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-comment">//2.创建SqlSessionFactory工厂</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        使用SqlSessionFactoryBuilder创建工厂的好处是MyBatis将如何读取配置文件，如何使用配置文件，如何封装等细节都进行了封装，使我们使用极简的方式来实现功能。</span><br><span class="hljs-comment">         */</span><br>        builder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>        factory = builder.build(is);<br>        <span class="hljs-comment">//3.使用工厂生产SqlSession对象</span><br>        session = factory.openSession(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">//4.使用SqlSession创建Dao接口的代理对象</span><br>        roleDao = session.getMapper(RoleDao.class);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放资源</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//6.释放资源</span><br>        session.close();<br>        is.close();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询角色</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAllUser</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;Role&gt; roles = roleDao.findAll();<br>        <span class="hljs-keyword">for</span> (Role role : roles) &#123;<br>            System.out.println(role);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">10. 多对多关系在实体类中进行体现</font></p><p>在实体类中加入相应的属性，并提供get/set方法</p><p><img src="/color-ful/img/mybatis/image-20210314003318973.png" alt="image-20210314003318973"></p><p><font color="cornflowerblue">11. 分析SQL语句</font></p><p><img src="/color-ful/img/mybatis/image-20210314004759218.png" alt="image-20210314004759218"></p><p>通过图的分析，我们发现需要两个左外连接才能完成我们想要的查询</p><p><img src="/color-ful/img/mybatis/image-20210314005834016.png" alt="image-20210314005834016"></p><p>此时的结果已经基本是我们想要的，但是表中有一些字段时重复，比如 <code>rid</code> 和 <code>uid</code>，所以我们优化一下查询的字段</p><p><img src="/color-ful/img/mybatis/image-20210314010335787.png" alt="image-20210314010335787"></p><p><font color="cornflowerblue">12. 实现配置文件</font></p><p><img src="/color-ful/img/mybatis/image-20210314011314242.png" alt="image-20210314011314242"></p><p><font color="cornflowerblue">13. 测试：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询角色</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAllUser</span><span class="hljs-params">()</span> </span>&#123;<br>    List&lt;Role&gt; roles = roleDao.findAll();<br>    <span class="hljs-keyword">for</span> (Role role : roles) &#123;<br>        System.out.println(role);<br>        System.out.println(role.getUsers());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/color-ful/img/mybatis/image-20210314011436432.png" alt="image-20210314011436432"></p><h4 id="需求：-查询用户信息的同时显示用户所拥有的角色信息"><a href="#需求：-查询用户信息的同时显示用户所拥有的角色信息" class="headerlink" title="需求： 查询用户信息的同时显示用户所拥有的角色信息"></a>需求： 查询用户信息的同时显示用户所拥有的角色信息</h4><p>该需求与上一个需求的主要区别就是在SQL语句上，我们只需要稍加修改，即可实现</p><p><font color="cornflowerblue">1. 多对多关系在实体类上的体现</font></p><p><img src="/color-ful/img/mybatis/image-20210314011916686.png" alt="image-20210314011916686"></p><p><font color="cornflowerblue">2. 修改映射配置文件</font></p><p><img src="/color-ful/img/mybatis/image-20210314012427947.png" alt="image-20210314012427947"></p><p><font color="cornflowerblue">3. 测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询用户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAllUser</span><span class="hljs-params">()</span> </span>&#123;<br>    List&lt;User&gt; all = userDao.findAll();<br>    <span class="hljs-keyword">for</span> (User user : all) &#123;<br>        System.out.println(<span class="hljs-string">&quot;--------------&quot;</span>);<br>        System.out.println(user);<br>        System.out.println(user.getRoles());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/color-ful/img/mybatis/image-20210314012556351.png" alt="image-20210314012556351"></p><h2 id="17-延迟加载"><a href="#17-延迟加载" class="headerlink" title="17. 延迟加载"></a>17. 延迟加载</h2><p>首先我们先来分析一个问题：</p><p><strong>问题：</strong></p><p>在一对多的关系中，我们有一个用户，他有1000个账户。</p><ul><li>在查询用户时，要不要把关联的账户查出来？</li><li>在查询账户时，要不要把关联的用户查出来？</li></ul><p><strong>图解：</strong></p><ul><li>问题1：如果查出来，这一千个账户就会对应一千个账户对象，但是这些对象对于我们查询用户信息，无疑是没有用的，这样就造成了资源的浪费</li></ul><p><img src="/color-ful/img/mybatis/image-20210314014001436.png" alt="image-20210314014001436"></p><p><font color="red">所以：用户下的账户信息应该是什么时候使用，什么时候查询。</font></p><ul><li>问题2：我们查询账户信息时需要知道对应的用户信息</li></ul><p><img src="/color-ful/img/mybatis/image-20210314014253340.png" alt="image-20210314014253340"></p><p><font color="red">所以：账户所属用户信息应该随着账户的查询一并查出来</font></p><p>针对上述两个问题，我们引出两个概念：<strong>延迟加载和立即加载</strong></p><p>​    <strong>延迟加载：</strong>在真正使用的时候才发起查询，不用的时候不查询。延迟加载也可以称为<strong>按需加载</strong>或 <strong>懒加载</strong>。</p><p>​    <strong>立即加载：</strong>无论数据是否使用，只要调用方法，就会立马执行查询</p><p>在多表关系中：</p><p>​    <strong>一对多，多对多</strong>：通常情况下我们对 “多” 的一方采用延迟加载</p><p>​    <strong>多对一，一对一</strong>：通常情况下我们对 “一” 的一方采用立即加载</p><h3 id="17-1-一对一实现延迟加载"><a href="#17-1-一对一实现延迟加载" class="headerlink" title="17.1 一对一实现延迟加载"></a>17.1 一对一实现延迟加载</h3><p><font color="cornflowerblue">1. 新建Module，将 上面 “多对一”的项目复制到当前Module的 <code>src</code>下</font></p><p><font color="cornflowerblue">2. 修改<code>pom.xml</code>,添加相关依赖</font></p><p><font color="cornflowerblue">3. 在UserDao接口中添加一个方法：根据id查询用户的方法（懒加载要用）</font></p><p><img src="/color-ful/img/mybatis/image-20210314021542165.png" alt="image-20210314021542165"></p><p><font color="cornflowerblue">4. 在UserDao映射配置文件中实现该方法，并测试是否成功</font></p><p><img src="/color-ful/img/mybatis/image-20210314021618680.png" alt="image-20210314021618680"></p><p><font color="cornflowerblue">5.在AccountDao的映射配置文件中，我们对查询所有账户信息进行修改，实现赖加载。</font></p><p><img src="/color-ful/img/mybatis/image-20210314022926499.png" alt="image-20210314022926499"></p><p>此时测试我们观察控制台日志信息，发现并没有实现懒加载。原因是我们还需要在主配置文件中开启懒加载才可以。</p><p><img src="/color-ful/img/mybatis/image-20210314023031906.png" alt="image-20210314023031906"></p><p><font color="cornflowerblue">6. 在主配置文件中开启懒加载，配置的属性值我们可以去官网查看</font></p><p><img src="/color-ful/img/mybatis/image-20210314023315702.png" alt="image-20210314023315702"></p><p><img src="/color-ful/img/mybatis/image-20210314023233891.png" alt="image-20210314023233891"></p><p><font color="cornflowerblue">7.再次执行测试</font></p><p><img src="/color-ful/img/mybatis/image-20210314023351997.png" alt="image-20210314023351997"></p><p>​        这次的语句执行就和上一次不一样了，当我们执行<code>account.getUser()</code>时，用户信息才会被查询，否则则不查询。到此我们一对一实现延迟加载的需求就完成了。</p><h3 id="17-2-一对多实现延迟加载"><a href="#17-2-一对多实现延迟加载" class="headerlink" title="17.2 一对多实现延迟加载"></a>17.2 一对多实现延迟加载</h3><p><font color="cornflowerblue">1. 还是使用一对一实现延迟加载的工程。</font></p><p><font color="cornflowerblue">2. 在AccountDao中添加方法：根据用户id查询账户信息</font></p><p><img src="/color-ful/img/mybatis/image-20210314025741197.png" alt="image-20210314025741197"></p><p><font color="cornflowerblue">3. 在相应的映射配置文件中实现该方法,并进行测试</font></p><p><img src="/color-ful/img/mybatis/image-20210314025816089.png" alt="image-20210314025816089"></p><p><font color="cornflowerblue">4.在UserDao的映射配置文件中，在<code>findAll()</code>方法上实现懒加载</font></p><p><img src="/color-ful/img/mybatis/image-20210314030553938.png" alt="image-20210314030553938"></p><p><font color="cornflowerblue">5. 测试是否实现赖加载</font></p><p><img src="/color-ful/img/mybatis/image-20210314030756399.png" alt="image-20210314030756399"></p><h2 id="18-缓存"><a href="#18-缓存" class="headerlink" title="18. 缓存"></a>18. 缓存</h2><p><strong>概述：</strong></p><p>​    存在于内存中的数据叫做缓存</p><p><strong>应用：</strong></p><p>​    减少和数据库的交互，提高执行效率</p><p><strong>适用：</strong></p><ul><li>经常查询并且不经常改变的。</li><li>数据的正确与否对最终结果影响不大的。（比如视频访问量，回帖数量等）</li></ul><p><strong>不适用：</strong></p><ul><li>经常改变的数据</li><li>数据的正确与否对最终结果影响很大时（银行汇率，股票价格）</li></ul><p><strong>分类</strong></p><p>​        MyBatis中分为 一级缓存 和 二级缓存</p><h3 id="18-1-一级缓存"><a href="#18-1-一级缓存" class="headerlink" title="18.1 一级缓存"></a>18.1 一级缓存</h3><p><strong>概述：</strong></p><p>​    它指的是MyBatis中SqlSession对象的缓存。当我们执行查询后，查询结果会存入到SqlSession为我们提供的一款存储区域中。该区域的存储结构为Map。当我们再次查询同样数据时，MyBatis首先去一级缓存中查询，如果存在，则直接拿取使用</p><p><strong>注意：</strong></p><p>​    当SqlSession对象消失时，MyBatis的一级缓存也会消失</p><p><strong>演示：</strong></p><p><font color="cornflowerblue">1. 根据对象地址值确定两次结果都是从缓存中取出</font></p><p>我们在 演示CRUD的工程中 找到 测试 根据id查询用户的测试方法</p><p><img src="/color-ful/img/mybatis/image-20210314032336162.png" alt="image-20210314032336162"></p><p>结果：</p><p><img src="/color-ful/img/mybatis/image-20210314032557591.png" alt="image-20210314032557591"></p><p><font color="cornflowerblue">2. 关闭SqlSession,重新开启SqlSession,比较两个对象</font></p><p><img src="/color-ful/img/mybatis/image-20210314032807348.png" alt="image-20210314032807348"></p><p>结果：</p><p><img src="/color-ful/img/mybatis/image-20210314032754673.png" alt="image-20210314032754673"></p><p><font color="cornflowerblue">3. 我们也可以通过方法清除缓存：<code>clearCache()</code></font></p><p><img src="/color-ful/img/mybatis/image-20210314032925009.png" alt="image-20210314032925009"></p><p>结果：</p><p><img src="/color-ful/img/mybatis/image-20210314032909569.png" alt="image-20210314032909569"></p><p><strong><font color="red">注意：</font></strong></p><p>​    当sqlSession调用 add , update , delete，commit , close方法时，MyBatis会自动清空一级缓存，防止缓存数据与数据库中的数据不一致。</p><h3 id="18-2-二级缓存"><a href="#18-2-二级缓存" class="headerlink" title="18.2 二级缓存"></a>18.2 二级缓存</h3><p><strong>概述：</strong></p><p>​    它指的是MyBatis中SqlSessionFactory对象的缓存。由同一个SqlSessionFactory对象创建的SqlSession对象共享二级缓存。</p><p><strong>使用步骤:</strong></p><ol><li><p>在主配置文件中开启二级缓存</p><p><img src="/color-ful/img/mybatis/image-20210314034230636.png" alt="image-20210314034230636"></p></li><li><p>在映射配置文件中开启二级缓存</p><p><img src="/color-ful/img/mybatis/image-20210314034407604.png" alt="image-20210314034407604"></p></li><li><p>在当前操作（select标签）中开启二级缓存</p><p><img src="/color-ful/img/mybatis/image-20210314034429273.png" alt="image-20210314034429273"></p></li></ol><p>​    4. 测试</p><p><img src="/color-ful/img/mybatis/image-20210314035209602.png" alt="image-20210314035209602"></p><p>结果：</p><p><img src="/color-ful/img/mybatis/image-20210314035156982.png" alt="image-20210314035156982"></p><h2 id="19-MyBatis的注解开发"><a href="#19-MyBatis的注解开发" class="headerlink" title="19. MyBatis的注解开发"></a>19. MyBatis的注解开发</h2><p><strong>注意：</strong></p><p>​    注解开发是为了简化映射配置文件，但是主配置文件还是存在。</p><p><strong>环境搭建</strong></p><p><font color="cornflowerblue">1. 新建Module</font></p><p><font color="cornflowerblue">2. 修改pom.xml,添加相应的依赖</font></p><p><font color="cornflowerblue">3.创建实体类User</font></p><p><font color="cornflowerblue">4.创建主配置文件：SqlSessionConfig.xml</font></p><ul><li>引入外部配置文件</li><li>配置别名</li><li>配置数据源</li><li>指定带有注解的dao层接口所在位置</li></ul><p><font color="cornflowerblue">5.创建UserDao</font></p><ul><li>声明findAll()方法</li><li>在该方法上使用注解@Select</li></ul><p><font color="cornflowerblue">6.测试</font></p><ul><li>读取配置文件</li><li>获取SqlSessionFactory对象</li><li>使用Factory生成SqlSession</li><li>使用SqlSession生成代理对象</li><li>调用方法</li><li>释放资源</li></ul><p><font color="cornflowerblue">7. 注意事项：</font></p><p>​    采用注解开发时，如果对应目录下还存在配置文件，及时在主配置文件中没有配置<code>xml</code>，运行时也会报错。</p><ul><li>删除配置文件</li><li>将配置文件移动到其他目录下</li></ul><p><strong>注解分类：</strong></p><p>​    MyBatis针对CRUD操作一共有四个注解</p><ul><li>@Select</li><li>@Insert</li><li>@Delete</li><li>@Update</li></ul><h3 id="19-1-注解方式-CRUD操作"><a href="#19-1-注解方式-CRUD操作" class="headerlink" title="19.1 注解方式-CRUD操作"></a>19.1 注解方式-CRUD操作</h3><p><strong>UserDao</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有用户</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加用户</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Insert(&quot;insert into user(username,birthday,sex,address) values(#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <span class="hljs-meta">@Update(&quot;update user set address=#&#123;address&#125; where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <span class="hljs-meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisTest</span> </span>&#123;<br>    InputStream is;<br>    SqlSessionFactory factory;<br>    SqlSession session;<br>    UserDao userDao;<br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.读取配置文件</span><br>        is = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-comment">//2.创建SqlSessionFactory工厂</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        使用SqlSessionFactoryBuilder创建工厂的好处是MyBatis将如何读取配置文件，如何使用配置文件，如何封装等细节都进行了封装，使我们使用极简的方式来实现功能。</span><br><span class="hljs-comment">         */</span><br>        SqlSessionFactoryBuilder builder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>        factory = builder.build(is);<br>        <span class="hljs-comment">//3.使用工厂生产SqlSession对象</span><br>       session = factory.openSession();<br>        <span class="hljs-comment">//4.使用SqlSession创建Dao接口的代理对象</span><br>        userDao = session.getMapper(UserDao.class);<br>    &#125;<br><br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        is.close();<br>        session.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        List&lt;User&gt; users = userDao.findAll();<br>        <span class="hljs-keyword">for</span> (User user : users) &#123;<br>            System.out.println(user);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAddUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;呵呵&quot;</span>, <span class="hljs-string">&quot;1999-02-08&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-string">&quot;西安&quot;</span>);<br>        userDao.addUser(user);<br>        session.commit();<br>        System.out.println(user);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateAddUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;西安&quot;</span>);<br>        userDao.updateUser(user);<br>        session.commit();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        userDao.deleteUser(<span class="hljs-number">25</span>);<br>        session.commit();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="19-2-注解方式-其他操作"><a href="#19-2-注解方式-其他操作" class="headerlink" title="19.2 注解方式-其他操作"></a>19.2 注解方式-其他操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据id查询用户</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span><br><span class="hljs-function">User <span class="hljs-title">findUserById</span><span class="hljs-params">(Integer id)</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据用户名模糊查询用户信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Select(&quot;select * from user where username like #&#123;username&#125;&quot;)</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findUserByName</span><span class="hljs-params">(String name)</span></span>;<br><br><span class="hljs-meta">@Select(&quot;select count(*) from user&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findTotal</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><h3 id="19-3-处理字段名与属性名不同问题"><a href="#19-3-处理字段名与属性名不同问题" class="headerlink" title="19.3 处理字段名与属性名不同问题"></a>19.3 处理字段名与属性名不同问题</h3><p>通过 <code>@Results</code> 和 <code>@Rusult</code> 来处理不同问题</p><p><img src="/color-ful/img/mybatis/image-20210314044748081.png" alt="image-20210314044748081"></p><h3 id="19-4-配置一对一关系"><a href="#19-4-配置一对一关系" class="headerlink" title="19.4 配置一对一关系"></a>19.4 配置一对一关系</h3><p><strong>步骤：</strong></p><p><font color="cornflowerblue">1. 使用注解演示Module,新建Account类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer aid;<br>    <span class="hljs-keyword">private</span> Integer uid;<br>    <span class="hljs-keyword">private</span> Double money;<br>    <span class="hljs-comment">//一个账户只属于一个用户</span><br>    <span class="hljs-keyword">private</span> User user;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.创建AccountDao，添加相应的方法并添加注解</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 操作账户接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AccountDao</span> </span>&#123;<br><br>    <span class="hljs-meta">@Select(&quot;select * from account&quot;)</span><br>    <span class="hljs-meta">@Results(id =&quot;accountMap&quot; , value = &#123;</span><br><span class="hljs-meta">            @Result(id = true,property = &quot;aid&quot;,column = &quot;aid&quot;),</span><br><span class="hljs-meta">            @Result(property = &quot;uid&quot;,column = &quot;uid&quot;),</span><br><span class="hljs-meta">            @Result(property = &quot;money&quot;,column = &quot;money&quot;),</span><br><span class="hljs-meta">            @Result(property = &quot;user&quot;, column = &quot;uid&quot;, one=@One(select = &quot;com.wdzl.dao.UserDao.findUserById&quot;, fetchType = FetchType.EAGER))</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-function">List&lt;Account&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​        在配置一对一关系时与XML原理相同，配置完Account属性后，配置<code>user</code>对象属性，在多表关系中，一的一方用@One,多的一方用@Many</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Result(</span><br><span class="hljs-meta">    property = &quot;user&quot;,</span><br><span class="hljs-meta">    column = &quot;uid&quot;, //通过该列数据获取User对象数据</span><br><span class="hljs-meta">    one=@One(select = &quot;com.wdzl.dao.UserDao.findUserById&quot;, //获取User对象信息所调用的方法</span><br><span class="hljs-meta">    fetchType = FetchType.EAGER)//加载策略：延时，立即，默认</span><br><span class="hljs-meta">)</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    List&lt;Account&gt; accounts = accountDao.findAll();<br>    <span class="hljs-keyword">for</span> (Account account : accounts) &#123;<br>        System.out.println(account);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="19-5-配置一对多关系"><a href="#19-5-配置一对多关系" class="headerlink" title="19.5 配置一对多关系"></a>19.5 配置一对多关系</h3><p><font color="cornflowerblue">1. 在实体类中体现一对多关系</font></p><p><img src="/color-ful/img/mybatis/image-20210317140135563.png" alt="image-20210317140135563"></p><p><font color="cornflowerblue">2. 在UserDao中修改方法并添加注解</font></p><p><img src="/color-ful/img/mybatis/image-20210317140313781.png" alt="image-20210317140313781"></p><p><font color="cornflowerblue">3. 测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>     List&lt;User&gt; users = userDao.findAll();<br>     <span class="hljs-keyword">for</span> (User user : users) &#123;<br>         System.out.println(<span class="hljs-string">&quot;------------------&quot;</span>);<br>         System.out.println(user);<br>         System.out.println(user.getAccounts());<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="19-6-注解方式开启二级缓存"><a href="#19-6-注解方式开启二级缓存" class="headerlink" title="19.6 注解方式开启二级缓存"></a>19.6 注解方式开启二级缓存</h3><p><font color="cornflowerblue">1. 主配置中添加配置，但是该配置默认是开启的</font></p><p><font color="cornflowerblue">2. 在相应dao层接口上，添加注解</font></p><p><img src="/color-ful/img/mybatis/image-20210317142014018.png" alt="image-20210317142014018"></p>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring5 框架</title>
    <link href="/color-ful/2020/03/29/Spring5%20%E6%A1%86%E6%9E%B6/"/>
    <url>/color-ful/2020/03/29/Spring5%20%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring5-框架"><a href="#Spring5-框架" class="headerlink" title="Spring5 框架"></a>Spring5 框架</h1><!-- 该文章详细讲述了Spring5框架--><h2 id="1-本章主要内容"><a href="#1-本章主要内容" class="headerlink" title="1. 本章主要内容"></a>1. 本章主要内容</h2><ol><li><p>Spring框架概述</p><ol start="2"><li>IOC容器</li><li>AOP</li><li>JdbcTemplate</li><li>事务管理</li><li>Spring5 新特性</li></ol></li></ol><h2 id="2-Spring概述"><a href="#2-Spring概述" class="headerlink" title="2. Spring概述"></a>2. Spring概述</h2><p><strong>概述：</strong>Spring是轻量级的开源的JavaEE框架</p><ul><li><font color="limegreen">轻量级</font>：它的体积比较小，依赖的 Jar 包 比较少，并且不需要额外依赖其他的组件</li><li><font color="limegreen">开源</font>：免费提供源代码</li><li><font color="limegreen">框架</font>：可以简化我们构建软件的过程</li></ul><p><strong>目的：</strong>为了解决企业应用开发的复杂性</p><p><strong>核心：</strong>Spring的两大核心部分</p><ul><li>IOC：控制反转，把创建对象的过程交给Spring进行管理</li><li>AOP: 面向切面，不修改源代码进行功能增强</li></ul><p><strong>优点：</strong></p><ul><li>方便解耦，简化开发：</li><li>对AOP编程的支持</li><li>方便程序的测试</li><li>方便集成各种其他框架</li><li>方便进行事务操作</li><li>降低API开发难度</li></ul><h2 id="3-入门案例"><a href="#3-入门案例" class="headerlink" title="3. 入门案例"></a>3. 入门案例</h2><p>本入门案例使用Maven方式</p><p><font color="cornflowerblue">1. 创建Empty Project : spring_maven</font></p><p><font color="cornflowerblue">2. 在空项目中添加module</font></p><ul><li>不选模板，直接下一步</li><li>相关信息<ul><li>名称：day01_01first_spring</li><li>groupId：com.wdzl</li><li>artifactId：day01_01first_spring</li></ul></li></ul><p><font color="cornflowerblue">3. 添加maven依赖</font></p><p><img src="/color-ful/img/spring5/image-20210228150849879.png" alt="image-20210228150849879"></p><p>根据Spring的体系结构，我们需要导入四个基本jar包及一个日志依赖jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Spring--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-expression<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Spring日志依赖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4. 创建普通的类</font></p><p>在 <code>main.java</code> 中 创建 <code>comg.wdzl.User</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是User 对象&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5. 创建Spring配置文件，在配置文件配置创建的对象</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--创建User对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">6. 进行测试代码</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1 加载Spring的配置文件</span><br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>        <span class="hljs-comment">//2 获取配置创建的对象</span><br>        User user = context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>        user.showInfo();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-IOC容器"><a href="#4-IOC容器" class="headerlink" title="4.IOC容器"></a>4.IOC容器</h2><h3 id="4-1-IOC底层原理"><a href="#4-1-IOC底层原理" class="headerlink" title="4.1 IOC底层原理"></a>4.1 IOC底层原理</h3><p>​    <strong>概念：</strong></p><ul><li>控制反转</li></ul><blockquote><p>控制反转：传统方式如果我们要在B类中使用A类，我们需要在B类中通过new这个关键字来创建，这样无形中就增加了类与类之间的耦合性，通过控制反转，我们把创建对象，和对象间的调用的过程交给Spring来管理，这样就可以降低类与类之间的耦合性</p></blockquote><p>综上所述：</p><p>​    控制反转就是<font color="red">把创建对象，和对象间的调用的过程交给Spring来管理。</font>目的是为了<font color="red">降低类与类之间的耦合性</font>。</p><p><strong>底层原理：</strong></p><ul><li>XML解析</li><li>工厂模式</li><li>反射</li></ul><p><strong>原理图解：</strong></p><p><font color="cornflowerblue">1. 最原始的方法实现对象间的调用</font></p><p><img src="/color-ful/img/spring5/image-20210301203750755.png" alt="image-20210301203750755"></p><p><font color="cornflowerblue">2. 降低耦合，采用工厂模式</font></p><p><img src="/color-ful/img/spring5/image-20210301203904143.png" alt="image-20210301203904143"></p><p><font color="cornflowerblue">3. 使用IOC-控制反转</font></p><p><img src="/color-ful/img/spring5/image-20210301210136802.png" alt="image-20210301210136802"></p><p>工厂中的方法我们可以定义成getObject() 这样 我们想要哪个类的对象，我们的工厂都可以给我们生产。</p><p><strong>几个重要概念：</strong></p><ol><li><p><font color="limegreen">IOC容器</font>：IOC的实现依赖于IOC容器，而容器的本质就是对象工厂</p></li><li><p><font color="limegreen">IOC容器的实现方式</font>：</p><ul><li>BeanFactory：是最底层的接口，它只提供了最简单的容器功能：<code>加载配置文件</code>和<code>创建对象</code>的功能。<font color="red">当加载配置文件的时候，不会创建被配置的对象，只有在使用对象时，对象才会被创建。</font><ul><li>好处：节省内存</li><li>坏处：因为在使用过程中创建对象，所以效率低。</li></ul></li><li>ApplicationContext：应用上下文，继承BeanFactory接口，它是Spring的一各更高级的容器，提供了更多的有用的功能。<font color="red">当加载配置文件的时候，会同时创建被配置的对象</font>，当然，你也可以通过Bean配置lazy-init=true来让Bean延迟实例化。<ul><li>好处：效率高，将复杂的创建对象过程在启动服务时进行。</li><li>坏处：耗费资源</li></ul></li></ul></li><li><p><font color="limegreen">ApplicationContext的两个常用实现类</font>:( 在ApplicationContext接口中Ctrl+H打开继承体系结构)</p><ul><li>ClassPathXmlApplicationContext:从项目中的resource文件夹中加载配置文件</li><li>FileSystemXmlApplicationContext:从文件系统，Windows路径中加载文件（需要访问权限）</li><li>AnnotationConfigApplicationContext: 读取注解配置</li></ul><p><img src="/color-ful/img/spring5/image-20210302094629030.png" alt="image-20210302094629030"></p></li></ol><h2 id="5-IOC操作Bean管理"><a href="#5-IOC操作Bean管理" class="headerlink" title="5 IOC操作Bean管理"></a>5 IOC操作Bean管理</h2><p><strong>概念：</strong>IOC操作 - Bean管理指的是两个操作：1. Spring创建对象  2. Spring注入属性（属性赋值）</p><p><strong>实现方式：</strong></p><ol><li> 基于XML</li><li>  基于注解方式</li></ol><h3 id="5-1-基于XML方式-创建对象"><a href="#5-1-基于XML方式-创建对象" class="headerlink" title="5.1 基于XML方式 - 创建对象"></a>5.1 基于XML方式 - 创建对象</h3><blockquote><p>该方式与入门案例相似，将该案例作为课堂练习，给大家留10分钟来快速的完成。</p></blockquote><p>该方式是在 Spring配置文件中，使用bean标签，在标签中添加对应的属性，就可以实现对象的创建</p><p><strong>bean标签中的常用属性：</strong></p><ul><li><font color="limegreen">id</font>：唯一标识，通过该属性可以找到对应的bean标签</li><li><font color="limegreen">class</font> : 类的全限定类名</li></ul><p><strong>特点：</strong>创建对象时，默认是执行无参构造 方法来完成对象的创建。（反射）</p><h3 id="5-2-基于XML方式-注入属性"><a href="#5-2-基于XML方式-注入属性" class="headerlink" title="5.2 基于XML方式 - 注入属性"></a>5.2 基于XML方式 - 注入属性</h3><p>**DI:**依赖注入，就是注入属性。它是IOC的一个具体操作</p><p><strong>分类：</strong></p><ol><li> 使用set方法进行注入</li><li>使用构造器进行注入</li></ol><h4 id="5-2-1-使用Set方式进行注入："><a href="#5-2-1-使用Set方式进行注入：" class="headerlink" title="5.2.1 使用Set方式进行注入："></a>5.2.1 使用Set方式进行注入：</h4><p><font color="cornflowerblue">1. 新建Module</font></p><ul><li>名称：day01_02iocBean_xml</li><li>groupId：com.wdzl</li><li>artifactId：day01_02iocBean_xml</li></ul><p><font color="cornflowerblue">2. 在pom文件中添加Spring依赖与入门案例相同</font></p><p><font color="cornflowerblue">3. 新建类：Book</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String author;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Book</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAuthor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> author;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAuthor</span><span class="hljs-params">(String author)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.author = author;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Book&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, author=&#x27;&quot;</span> + author + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4. 添加配置文件bean.xml</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Book&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;葵花宝典&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;东方不败&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>属性注入通过<code>&lt;property&gt;</code>标签：</p><ul><li>name：属性名</li><li>value：属性值</li></ul><p><font color="cornflowerblue">5. 编写测试案例：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl;<br><br><span class="hljs-keyword">import</span> com.wdzl.pojo.Book;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 依赖注入-XML方式 演示案例</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XMLTest</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 依赖注入- 通过set方式注入</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1.加载Spring配置文件</span><br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>        <span class="hljs-comment">//2. 获取对象（new 和 调用set 都由Spring完成）</span><br>        Book book = context.getBean(<span class="hljs-string">&quot;book&quot;</span>, Book.class);<br>        System.out.println(book);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">6. 结果：</font></p><p><img src="/color-ful/img/spring5/image-20210302105843717.png" alt="image-20210302105843717"></p><h4 id="5-2-2-使用有参构造进行注入"><a href="#5-2-2-使用有参构造进行注入" class="headerlink" title="5.2.2 使用有参构造进行注入"></a>5.2.2 使用有参构造进行注入</h4><p><font color="cornflowerblue">1. 在上一个Module中新建一个bean配置文件:bean2.xml</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 构造方法注入 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Book&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;含笑半步癫&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;唐伯虎&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;constructor-arg&gt;</code>用来配置构造器的参数，其中 可以用<code>name</code>属性直接指定构造器中对应的参数名，也可以通过<code>index</code>属性按照索引指定参数。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 构造方法注入 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Book&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--        &lt;constructor-arg name=&quot;name&quot; value=&quot;含笑半步癫&quot;/&gt;</span><br><span class="hljs-comment">                &lt;constructor-arg name=&quot;author&quot; value=&quot;唐伯虎&quot;/&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;含笑半步癫&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;唐伯虎&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 编写测试案例：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 依赖注入 - 通过构造方法注入</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1.加载Spring配置文件</span><br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean2.xml&quot;</span>);<br>    <span class="hljs-comment">//2. 获取对象（new 和 调用set 都由Spring完成）</span><br>    Book book = context.getBean(<span class="hljs-string">&quot;book2&quot;</span>, Book.class);<br>    System.out.println(book);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">结果：</font></p><p><img src="/color-ful/img/spring5/image-20210302120000091.png" alt="image-20210302120000091"></p><h4 id="5-2-3-p命名空间"><a href="#5-2-3-p命名空间" class="headerlink" title="5.2.3 p命名空间"></a>5.2.3 p命名空间</h4><p><font color="cornflowerblue">1.同样在上一个Moule中添加一个bean配置文件：bean3.xml</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br>       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;&lt;!-- 添加p命名空间 --&gt;<br>       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans<br>http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;<br><span class="hljs-comment">&lt;!--p命名空间注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Book&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;呵呵&quot;</span> <span class="hljs-attr">p:author</span>=<span class="hljs-string">&quot;哈哈&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.编写测试案例 </font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 依赖注入 - 通过p命名空间</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1.加载Spring配置文件</span><br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean3.xml&quot;</span>);<br>    <span class="hljs-comment">//2. 获取对象（new 和 调用set 都由Spring完成）</span><br>    Book book = context.getBean(<span class="hljs-string">&quot;book&quot;</span>, Book.class);<br>    System.out.println(book);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-4-注入属性的特殊情况：null值-和-特殊符号"><a href="#5-2-4-注入属性的特殊情况：null值-和-特殊符号" class="headerlink" title="5.2.4 注入属性的特殊情况：null值 和 特殊符号"></a>5.2.4 注入属性的特殊情况：null值 和 特殊符号</h4><p><font color="cornflowerblue">1.同样在上一个Moule中添加一个bean配置文件：bean3.xml</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--p命名空间注入--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Book&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--null值--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span>&gt;</span><br>          <span class="hljs-comment">&lt;!--&lt;value&gt;&quot;&lt;&lt;嘿嘿&gt;&gt;&quot;&lt;/value&gt; 报错，包含特殊符号--&gt;</span><br>          <span class="hljs-comment">&lt;!--使用转译字符--&gt;</span><br>          <span class="hljs-comment">&lt;!--&lt;value&gt;&quot;&amp;lt;&amp;gt;&quot;&lt;/value&gt;--&gt;</span><br>          <span class="hljs-comment">&lt;!--方式2：使用CDATA--&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;??&gt;&gt;]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.编写测试案例 </font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 依赖注入 - 空值和特殊符号</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1.加载Spring配置文件</span><br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean4.xml&quot;</span>);<br>    <span class="hljs-comment">//2. 获取对象（new 和 调用set 都由Spring完成）</span><br>    Book book = context.getBean(<span class="hljs-string">&quot;book&quot;</span>, Book.class);<br>    System.out.println(book);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 结果</font></p><p><img src="/color-ful/img/spring5/image-20210302145052710.png" alt="image-20210302145052710"></p><h4 id="5-2-5注入属性-外部bean"><a href="#5-2-5注入属性-外部bean" class="headerlink" title="5.2.5注入属性 - 外部bean"></a>5.2.5注入属性 - 外部bean</h4><p>​        二阶段我们学习的三层架构中，<code>service</code>通过调用<code>dao</code>层方法来完成复杂的业务，但是传统方式，我们需要在<code>service</code>中直接创建<code>dao</code>层对象,这样无疑增加了<code>dao</code>层和<code>service</code>层的依赖。诸如这种情况我们就可以借助外部Bean的方式来 降低耦合性。我们通过案例来讲解外部bean注入。</p><p><strong>步骤：</strong></p><ol><li><p>在要被注入外部bean的类中 声明一个成员变量</p><ol start="2"><li>提供set方法</li></ol></li></ol><p><font color="cornflowerblue">1. 新建一个Module</font></p><ul><li>名称：day01_03iocBean_xml2</li><li>groupId：com.wdzl</li><li>artifactId：day01_03iocBean_xml2</li></ul><p><font color="cornflowerblue">2. 按照三层架构模型，创建 dao层 和service层</font></p><p><strong>UserDao</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>UserDaoImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserDao:addUser()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>UserService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>UserServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserService:UserDao...&quot;</span>);<br>        userDao.addUser();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userDao = userDao;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 创建Bean.xml 实现依赖注入</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.service.impl.UserServiceImpl&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--注入外部Bean-dao层,使用set方式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="red">注意：</font></p><p><img src="/color-ful/img/spring5/image-20210302173510471.png" alt="image-20210302173510471"></p><h4 id="5-2-6注入属性-内部bean"><a href="#5-2-6注入属性-内部bean" class="headerlink" title="5.2.6注入属性-内部bean"></a>5.2.6注入属性-内部bean</h4><p><font color="cornflowerblue">1. 创建emp类 和 dept类</font></p><ul><li>emp中 有 empName，gender和 dept对象属性</li><li>dept中有deptName属性</li></ul><p><font color="cornflowerblue">2.再上一个案例的基础上新建bean配置文件 ：bean2.xml</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Emp&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--基本数据类型--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;周杰伦&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--引用数据类型--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Dept&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;deptName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;研发部&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 测试案例</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean2.xml&quot;</span>);<br>    Emp emp = context.getBean(<span class="hljs-string">&quot;emp&quot;</span>, Emp.class);<br>    System.out.println(emp);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.结果</font></p><p><img src="/color-ful/img/spring5/image-20210303053300079.png" alt="image-20210303053300079"></p><h4 id="5-2-7-注入属性-级联操作"><a href="#5-2-7-注入属性-级联操作" class="headerlink" title="5.2.7 注入属性 - 级联操作"></a>5.2.7 注入属性 - 级联操作</h4><p><font color="cornflowerblue">1.再上一个案例的基础上新建bean配置文件 ：bean3.xml</font></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span><br><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;<br>    &lt;bean id=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.wdzl.pojo.Emp&quot;</span>&gt;<br>&lt;!--基本数据类型--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;empName&quot;</span> value=<span class="hljs-string">&quot;蔡依林&quot;</span>/&gt;<br>        &lt;property name=<span class="hljs-string">&quot;gender&quot;</span> value=<span class="hljs-string">&quot;女&quot;</span>/&gt;<br>&lt;!--引用数据类型：级联赋值--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;dept&quot;</span> ref=<span class="hljs-string">&quot;dept&quot;</span>/&gt;<br>    &lt;/bean&gt;<br>    &lt;bean id=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.wdzl.pojo.Dept&quot;</span>&gt;<br>        &lt;property name=&quot;deptName&quot; value=&quot;市场部&quot;&gt;&lt;/property&gt;<br>    &lt;/bean&gt;<br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure><p>其中：</p><p><img src="/color-ful/img/spring5/image-20210303053647543.png" alt="image-20210303053647543"></p><p><font color="cornflowerblue">2. 测试案例</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean3.xml&quot;</span>);<br>    Emp emp = context.getBean(<span class="hljs-string">&quot;emp&quot;</span>, Emp.class);<br>    System.out.println(emp);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 结果</font></p><p><img src="/color-ful/img/spring5/image-20210303053805170.png" alt="image-20210303053805170"></p><p><font color="red">方式2：</font></p><p>该方式的注意事项：</p><ul><li>对应的引用数据类型属性必须提供get方法，否则会报红</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Emp&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--基本数据类型--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;蔡依林&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--引用数据类型：级联赋值--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dept&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept.deptName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;运营部&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Dept&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/color-ful/img/spring5/image-20210303054656085.png" alt="image-20210303054656085"></p><h4 id="5-2-8-注入属性-集合数组类型"><a href="#5-2-8-注入属性-集合数组类型" class="headerlink" title="5.2.8 注入属性 - 集合数组类型"></a>5.2.8 注入属性 - 集合数组类型</h4><p><font color="cornflowerblue">1. 新建一个Module</font></p><p><font color="cornflowerblue">2. 在pom.xml中添加Spring依赖</font></p><p><font color="cornflowerblue">3. 创建一个Demo类，其中包含数组，list集合，Map集合。因为list 和 set使用相似，所以我们这里就不演示set集合</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.pojo;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String[] info;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; list;<br>    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; map;<br><br>    <span class="hljs-keyword">public</span> String[] getInfo() &#123;<br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setInfo</span><span class="hljs-params">(String[] info)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.info = info;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">getList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setList</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title">getMap</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMap</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.map = map;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Demo&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;strings=&quot;</span> + Arrays.toString(info) +<br>                <span class="hljs-string">&quot;, list=&quot;</span> + list +<br>                <span class="hljs-string">&quot;, map=&quot;</span> + map +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4.创建bean配置文件：bean.xml</font></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span><br><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;<br>    &lt;bean id=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.wdzl.pojo.Demo&quot;</span>&gt;<br>        &lt;!--给数组属性注入--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;info&quot;</span>&gt;<br>            &lt;array&gt;<br>                &lt;value&gt;你好&lt;/value&gt;<br>                &lt;value&gt;&quot;Spring&quot;&lt;/value&gt;<br>            &lt;/array&gt;<br>        &lt;/property&gt;<br>        &lt;!--给集合属性注入--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;list&quot;</span>&gt;<br>            &lt;list&gt;<br>                &lt;value&gt;Hello&lt;/value&gt;<br>                &lt;value&gt;&quot;Spring&quot;&lt;/value&gt;<br>                &lt;value&gt;again&lt;/value&gt;<br>            &lt;/list&gt;<br>        &lt;/property&gt;<br>        &lt;!--给map属性注入--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;map&quot;</span>&gt;<br>            &lt;map&gt;<br>                &lt;entry key=&quot;你好&quot; value=&quot;Hello&quot;&gt;&lt;/entry&gt;<br>                &lt;entry key=&quot;呵呵&quot; value=&quot;hehe&quot;&gt;&lt;/entry&gt;<br>            &lt;/map&gt;<br>        &lt;/property&gt;<br><br>    &lt;/bean&gt;<br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5. 测试案例 </font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoTest</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) &#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>        Demo demo = context.getBean(<span class="hljs-string">&quot;demo&quot;</span>, Demo.<span class="hljs-keyword">class</span>);<br>        System.out.println(demo);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">6. 结果</font></p><p><img src="/color-ful/img/spring5/image-20210303061822634.png" alt="image-20210303061822634"></p><h4 id="5-2-9-注入属性-集合数组类型2：集合中存储引用数据类型"><a href="#5-2-9-注入属性-集合数组类型2：集合中存储引用数据类型" class="headerlink" title="5.2.9 注入属性 - 集合数组类型2：集合中存储引用数据类型"></a>5.2.9 注入属性 - 集合数组类型2：集合中存储引用数据类型</h4><p><font color="cornflowerblue">1. 新建一个Module</font></p><p><font color="cornflowerblue">2. 在pom.xml中添加Spring依赖</font></p><p><font color="cornflowerblue">3. 创建Demo类 和 City类</font></p><p><strong>Demo类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;City&gt; cities;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;City&gt; <span class="hljs-title">getCities</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> cities;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCities</span><span class="hljs-params">(List&lt;City&gt; cities)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.cities = cities;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>City类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 城市类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">City</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;City&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4.创建bean配置文件：bean.xml</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.Demo&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cities&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;city1&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;city2&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;city1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.City&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;西安&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;city2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.City&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上海&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5.测试案例</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    Demo demo = context.getBean(<span class="hljs-string">&quot;demo&quot;</span>, Demo.class);<br>    System.out.println(demo);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">6.结果</font></p><p><img src="/color-ful/img/spring5/image-20210303070519058.png" alt="image-20210303070519058"></p><h4 id="5-2-10-注入属性-将集合内容提取为公共部分"><a href="#5-2-10-注入属性-将集合内容提取为公共部分" class="headerlink" title="5.2.10 注入属性- 将集合内容提取为公共部分"></a>5.2.10 注入属性- 将集合内容提取为公共部分</h4><p><font color="cornflowerblue">1. 引入一个新的命名空间</font></p><p><img src="/color-ful/img/spring5/image-20210303071531806.png" alt="image-20210303071531806"></p><p><font color="cornflowerblue">2. 使用util标签将集合提取出来</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:util</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/util</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--List集合提取为公共部分，其他bean都可以使用--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">util:list</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cityList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>西安<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">util:list</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.Demo&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cities&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;cityList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 修改Demo类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; cities;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">getCities</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> cities;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCities</span><span class="hljs-params">(List&lt;String&gt; cities)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.cities = cities;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Demo&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;cities=&quot;</span> + cities +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4. 测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean2.xml&quot;</span>);<br>    Demo demo = context.getBean(<span class="hljs-string">&quot;demo&quot;</span>, Demo.class);<br>    System.out.println(demo);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5. 结果</font></p><p><img src="/color-ful/img/spring5/image-20210303072434526.png" alt="image-20210303072434526"></p><h4 id="5-2-11-注入属性-FactoryBean"><a href="#5-2-11-注入属性-FactoryBean" class="headerlink" title="5.2.11 注入属性-FactoryBean"></a>5.2.11 注入属性-FactoryBean</h4><p><strong>概念：</strong>Spring中又两种类型的bean，一种是 普通bean，另一种是工厂bean。</p><ul><li>普通bean：在配置文件中定义的bean类型就是返回类型</li><li>工厂bean：在配置文件中定义的bean类型可以和返回类型不同</li></ul><p><strong>步骤：</strong></p><ol><li>创建类，实现FactoryBean接口</li><li>实现接口里的方法，在实现的方法中定义返回的bean类型</li></ol><p><strong>演示：</strong></p><p><font color="cornflowerblue">1. 新建一个Module,在pom.xml中添加Spring依赖。</font></p><p><font color="cornflowerblue">2. 新建一个空的类：MyBean</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBean</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 创建Bean配置文件：bean.xml</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.MyBean&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    MyBean myBean = context.getBean(<span class="hljs-string">&quot;myBean&quot;</span>, MyBean.class);<br>    System.out.println(myBean);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>此时我们注入的是普通bean</p><p><font color="cornflowerblue">4.让MyBean继承FactoryBean,并实现里面的3个方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.pojo;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.FactoryBean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FactoryBean</span>&lt;<span class="hljs-title">String</span>&gt; </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  返回对象：此方法中定义了注入MyBean时,真正的返回对象类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是字符串&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回对象类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  是否是单例</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSingleton</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5.再次执行测试案例，会报错</font></p><p><img src="/color-ful/img/spring5/image-20210303094632421.png" alt="image-20210303094632421"></p><p>这是因为返回类型和接收类型不匹配问题</p><p><font color="cornflowerblue">6.修改测试代码</font></p><p><img src="/color-ful/img/spring5/image-20210303094800930.png" alt="image-20210303094800930"></p><h3 id="5-3-Bean的作用域"><a href="#5-3-Bean的作用域" class="headerlink" title="5.3 Bean的作用域"></a>5.3 Bean的作用域</h3><p><strong>概念：</strong>在Spring里面，设置创建Bean实例是单实例还是多实例。默认情况下，Bean实例是单实例。</p><p><strong>演示：</strong></p><p>​        <font color="cornflowerblue">不设置作用域</font>：在上一个案例的测试案例中再创建一个对象，对比两个对象的地址值，如果相等则代表二者是同一个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean2.xml&quot;</span>);<br>    Demo demo = context.getBean(<span class="hljs-string">&quot;demo&quot;</span>, Demo.class);<br>    Demo demo2 = context.getBean(<span class="hljs-string">&quot;demo&quot;</span>, Demo.class);<br>    System.out.println(demo==demo2);<span class="hljs-comment">//true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>​        <font color="cornflowerblue">设置作用域：</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Book&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;葵花宝典&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;东方不败&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再次测试则结果变为false。</p><p><strong>singleton和prototype的区别：</strong></p><ul><li>singleton:加载配置文件时，对象便会被创建</li><li>prototype:加载配置文件时，并不创建对象，在调用getBean方法时，才会创建对象，并且每次调用都会创建。</li></ul><h3 id="5-4-Bean的生命周期"><a href="#5-4-Bean的生命周期" class="headerlink" title="5.4 Bean的生命周期"></a>5.4 Bean的生命周期</h3><p><strong>概述：</strong></p><p>​    一个对象从创建到销毁的过程。</p><p><strong>过程：</strong></p><ol><li>通过构造器创建Bean实例</li><li>为Bean的属性设置值或引用其他Bean（调用set方法）</li><li>调用Bean的初始化方法</li><li>Bean对象获取</li><li>容器关闭，调用Bean的销毁方法</li></ol><p><strong>演示：</strong></p><p><font color="cornflowerblue">1. 新建Module,添加pom依赖</font></p><p><font color="cornflowerblue">2. 新建实体类User</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;第一步：调用无参构造&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;第二步：调用set方法设置属性&quot;</span>);<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;第三步：调用初始化的方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;第五步：设置销毁的方法&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 配置文件中配置对象，同时配置它的初始化和销毁的方法</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.User&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroy&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;周杰伦&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>       ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>       User user = context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>       System.out.println(<span class="hljs-string">&quot;第四步：获取对象&quot;</span>);<br>       <span class="hljs-comment">//因为close是子类特有的方法，所以需要强转</span><br><br>       ((ClassPathXmlApplicationContext)context).close();<br>   &#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5. 结果</font></p><p><img src="/color-ful/img/spring5/image-20210321070118349.png" alt="image-20210321070118349"></p><p>在Bean的生命周期中，当你配置了后置处理器之后，生命周期会有额外的两步</p><ol><li>通过构造器创建Bean实例</li><li>为Bean的属性设置值或引用其他Bean（调用set方法）</li><li><font color="red">执行后置处理器</font></li><li>调用Bean的初始化方法</li><li><font color="red">执行后置处理器</font></li><li>Bean对象获取</li><li>容器关闭，调用Bean的销毁方法</li></ol><p><font color="cornflowerblue">1. 创建MyBeanPost 实体类，实现BeanPostProcessor接口</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBeanPost</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BeanPostProcessor</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;第三步：执行后置处理器&quot;</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;第五步:执行后置处理器&quot;</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 配置文件中配置该类</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBeanPost&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.MyBeanPost&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 修改相应步骤的编号，执行测试</font></p><p><img src="/color-ful/img/spring5/image-20210321071145081.png" alt="image-20210321071145081"></p><h3 id="5-5-自动装配"><a href="#5-5-自动装配" class="headerlink" title="5.5 自动装配"></a>5.5 自动装配</h3><p><strong>概念：</strong>根据指定的装配规则（属性名称，属性类型），Spring自动将匹配的属性值进行注入</p><p><strong>实现：</strong>借助<code>bean</code>标签的 <code>autowire</code>属性，该属性常用的两个值</p><ul><li>byName: 根据属性名称注入</li><li>byType:根据属性数据类型注入</li></ul><p><strong>演示：</strong></p><p>​    <font color="cornflowerblue">1.新建Module,在pom.xml中添加对Spring的依赖</font></p><p>​    <font color="cornflowerblue">2. 创建Emp 和 Dept类</font></p><p>​    <strong>Emp类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 员工表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Emp</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Dept dept;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">getDept</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> dept;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDept</span><span class="hljs-params">(Dept dept)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.dept = dept;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Emp&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, dept=&quot;</span> + dept +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Dept类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 部门类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dept</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String deptName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDeptName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> deptName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDeptName</span><span class="hljs-params">(String deptName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.deptName = deptName;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 创建bean的配置文件：bean.xml</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  实现自动装备借助属性autowire，该属性常用的两个值：</span><br><span class="hljs-comment">    byName:根据属性名匹配。注入值bean的id和类的属性名称必须保持一致</span><br><span class="hljs-comment">    byType:根据属性的数据类型进行注入</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Emp&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Dept&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4. 测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    Emp emp = context.getBean(<span class="hljs-string">&quot;emp&quot;</span>, Emp.class);<br>    System.out.println(emp);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5.结果</font></p><p><img src="/color-ful/img/spring5/image-20210303112649962.png" alt="image-20210303112649962"></p><p><font color="cornflowerblue">6. 注意事项：</font></p><p>​        将 <code>autowire</code>的属性值换成<code>bytype</code>后依然测试成功，但是 需要注意：使用<code>byType</code>时，如果有多个<code>class</code>属性相同的<code>bean</code>标签，则会报错</p><p><img src="/color-ful/img/spring5/image-20210303113111126.png" alt="image-20210303113111126"></p><h3 id="5-6-引入外部配置文件"><a href="#5-6-引入外部配置文件" class="headerlink" title="5.6 引入外部配置文件"></a>5.6 引入外部配置文件</h3><p>我们以JDBC连接数据库为例</p><p><font color="cornflowerblue">1. 新建Module,修改pom.xml，添加Spring依赖和Druid连接池依赖</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Spring--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-expression<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Spring日志依赖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Druid连接池 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 在配置文件中配置数据库连接信息</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 直接配置连接池的方式--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 创建外部配置文件：jdbc.properties</font></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">druid.driverClass</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-meta">druid.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/test</span><br><span class="hljs-meta">druid.userName</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">druid.password</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4.将外部配置文件引入到Spring中</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入外部配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--读取外部配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.driverClass&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.url&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.userName&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.password&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-7-基于注解方式-创建对象"><a href="#5-7-基于注解方式-创建对象" class="headerlink" title="5.7  基于注解方式 - 创建对象"></a>5.7  基于注解方式 - 创建对象</h3><p><strong>概念：</strong>注解是代码的特殊标记</p><p><strong>格式：</strong>@注解名称（属性名称=属性值，属性名称=属性值….）</p><p><strong>应用：</strong>它可以简化XML配置，注解可以用在类上，属性上，方法上</p><p><strong>Spring针对Bean管理中创建对象提供的注解：</strong></p><ul><li>@Component : 普通类使用</li><li>@Service :Service层中使用</li><li>@Controller：Web层中使用</li><li>@Repository：Dao层中使用</li></ul><p><font color="red">这4个注解功能是相同的，都可以用来创建Bean实例，其实他们的本质都是@Component。</font></p><p><strong>演示：</strong></p><p><font color="cornflowerblue">1. 新建Module</font></p><p><font color="cornflowerblue">2. 修改pom.xml，额外新增aop的依赖jar包</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--Spring--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-expression<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--Spring日志依赖 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 按照三层架构创建包结构，在dao层中添加UserDao，并在UserDao上添加注解</font></p><p><img src="/color-ful/img/spring5/image-20210303143705113.png" alt="image-20210303143705113"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.dao;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//注解中的value值可以省略不写</span><br><span class="hljs-comment">//默认值：类名首字母小写</span><br><br><span class="hljs-meta">@Repository(value = &quot;userDao&quot;)</span><span class="hljs-comment">//此处的value相当于xml配置文件中的id属性</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserDao:addUser()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">6. 开启注解扫描</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--开启组件扫描</span><br><span class="hljs-comment">    1. 如果扫描多个包，这多个包之间可以使用逗号隔开</span><br><span class="hljs-comment">    2. 扫描包上层目录</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wdzl&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5. 测试案例</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>        UserDao userDao = context.getBean(<span class="hljs-string">&quot;userDao&quot;</span>, UserDao.class);<br>        userDao.addUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-8-组件扫描常见用法"><a href="#5-8-组件扫描常见用法" class="headerlink" title="5.8 组件扫描常见用法"></a>5.8 组件扫描常见用法</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    use-default-filters=&quot;false&quot;：不使用默认过滤器</span><br><span class="hljs-comment">    context:include-filter:设置扫描哪些内容</span><br><span class="hljs-comment">    type=&quot;annotation&quot;：注解</span><br><span class="hljs-comment">    expression:具体哪些</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wdzl&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Repository&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">       使用默认过滤器</span><br><span class="hljs-comment">        context:exclude-filter:不扫描扫描哪些内容</span><br><span class="hljs-comment">        type=&quot;annotation&quot;：注解</span><br><span class="hljs-comment">        expression:具体内容</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wdzl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Repository&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-9-基于注解方式-属性注入"><a href="#5-9-基于注解方式-属性注入" class="headerlink" title="5.9 基于注解方式 - 属性注入"></a>5.9 基于注解方式 - 属性注入</h3><p><strong>常用注解：</strong></p><ol><li>@AutoWired ：根据属性类型进行自动装载</li><li>@Qualifier：根据属性名称进行注入</li><li>@Resource：可以根据类型注入，可以根据名称注入</li><li>@Value : 注入基本普通类型数据</li></ol><p><strong>演示：</strong></p><p><font color="red"><strong>1. @AutoWired</strong></font></p><p><font color="cornflowerblue">1.新建Module,修改pom.xml  </font></p><p><font color="cornflowerblue">2. 按照三层架构，创建目录结构：dao，service，web</font></p><p><font color="cornflowerblue">3. 在dao层中添加接口和对应实现类</font></p><p><strong>UserDao</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.dao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>UserDaoImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserDao：addUser()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4. 在service中添加接口和对应实现类，在对应实现类中注入UsesrDao</font></p><p><strong>UserService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>UserServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.service.impl;<br><br><span class="hljs-keyword">import</span> com.wdzl.dao.UserDao;<br><span class="hljs-keyword">import</span> com.wdzl.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        userDao.addUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5. 添加配置文件，添加组件扫描</font></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xmlns:context=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span><br><span class="hljs-string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="hljs-string">                           http://www.springframework.org/schema/context</span><br><span class="hljs-string">                           http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;<br>    &lt;context:component-scan base-<span class="hljs-keyword">package</span>=<span class="hljs-string">&quot;com.wdzl&quot;</span>/&gt;<br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">6. 测试类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    UserServiceImpl userServiceImpl = context.getBean(<span class="hljs-string">&quot;userServiceImpl&quot;</span>, UserServiceImpl.class);<br>    userServiceImpl.add();<br><br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">7. 结果</font></p><p><img src="/color-ful/img/spring5/image-20210303161453784.png" alt="image-20210303161453784"></p><p><font color="red"><strong>2.Qualifier</strong></font></p><p><font color="cornflowerblue">1. 首先需要明确： </font></p><ul><li>@Qualifier 必须与 @AutoWired同时使用</li><li>同时使用的目的是为了解决根据属性类型无法自动装载的情况，比如UserDao有多个实现类</li></ul><p><font color="cornflowerblue">2. 在UserDaoImpl中指定value值。</font></p><p><img src="/color-ful/img/spring5/image-20210303163349728.png"></p><p><font color="cornflowerblue">3. 在注入时，使用@Qualifier指定具体的类</font></p><p><img src="/color-ful/img/spring5/image-20210303163712488.png" alt="image-20210303163712488"></p><p><font color="cornflowerblue">4. 测试结果与上一次相同</font></p><p>但是，如果<code>@Qualifier </code>中的 <code>value</code> 与 <code>@Repository</code> 中的<code>value</code>值不对应，则会报错。</p><p><font color="red"><strong>@Resource</strong></font></p><p>该注解默认按照数据类型进行注入。</p><p>也可以通过<code>@Resource（name = &quot;userDao&quot;）</code>按照名称匹配，但是因为它不是Spring中的注解，所以官方建议开发中使用<code>@AutoWired</code>,<code>@Qualifier </code>, <code>@Repository</code></p><p><font color="red"><strong>@Value</strong></font></p><p>使用该注解可以给属性注入基本数据类型或者String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(value=&quot;刘德华&quot;)</span><br><span class="hljs-keyword">private</span> String info;<br></code></pre></td></tr></table></figure><h3 id="5-10-完全注解开发"><a href="#5-10-完全注解开发" class="headerlink" title="5.10 完全注解开发"></a>5.10 完全注解开发</h3><p>​        通过上面的讲解，基本上所有的配置都是通过注解实现的，只剩下扫描组件还定义在xml中，为了实现完全注解开发，我们可以将配置文件定义成一个类，我们称之为配置类，并为其加上相应的注解，就可以替代xml配置文件。在实际开发中完全注解开发这种模式会使用另一框架：SpringBoot，但它实际本质还是Spring，只不过它是针对Spring的一个简化升级版。</p><p><strong>演示：</strong>在5.9案例的基础上进行修改</p><p><font color="cornflowerblue">1. 创建配置类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><span class="hljs-comment">//配置类注解</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.wdzl&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringConfig</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 测试类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);<br>    UserServiceImpl userServiceImpl = context.getBean(<span class="hljs-string">&quot;userServiceImpl&quot;</span>, UserServiceImpl.class);<br>    userServiceImpl.add();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-AOP"><a href="#6-AOP" class="headerlink" title="6. AOP"></a>6. AOP</h2><p><strong>概述：</strong>面向切面编程 -  在不修改源代码的前提下，实现对程序功能进行维护</p><p><strong>举例：</strong>XBOX</p><h3 id="6-1-AOP底层原理"><a href="#6-1-AOP底层原理" class="headerlink" title="6.1 AOP底层原理"></a>6.1 AOP底层原理</h3><p><strong>概述：</strong>AOP底层的实现使用了<font color="red">动态代理</font>技术</p><p><strong>分类：</strong>两种情况的动态代理</p><ol><li> 有接口的情况，使用JDK动态代理</li></ol><ul><li>代理对象与被代理对象都实现相同的接口</li></ul><ol start="2"><li>没有接口的情况，使用CGLIB动态代理<ul><li>通过创建子类对象，在子类中重写方法，并通过super.方法名() 调用被代理类中的方法</li></ul></li></ol><h3 id="6-2-AOP-动态代理演示（待定）"><a href="#6-2-AOP-动态代理演示（待定）" class="headerlink" title="6.2 AOP 动态代理演示（待定）"></a>6.2 AOP 动态代理演示（待定）</h3><h3 id="6-3-AOP-相关术语"><a href="#6-3-AOP-相关术语" class="headerlink" title="6.3 AOP 相关术语"></a>6.3 AOP 相关术语</h3><ul><li>连接点（Joinpoint）：类里面哪些方法可以被增强，这些方法称为连接点。</li><li>切入点（Pointcut）：类中实际被真正增强的方法，称为切入点。</li><li>增强/通知（Advice）：被增强的方法中<font color="red">增强的部分的代码</font>称为通知或者增强<ul><li>前置增强：在调用被增强方法前执行。</li><li>后置增强：在调用被增强方法后执行。</li><li>环绕增强：在调用被增强方法前后都执行。</li><li>异常增强：在调用被增强方法出现异常时执行</li><li>最终增强：在调用被增强方法后，无论是否出现异常，都会被执行</li></ul></li><li>切面（Aspect）：切面本身是一个动作，是将通知应用到切入点的过程。</li><li>代理（Proxy）</li><li>目标对象（Target）</li><li>织入（Weaving）</li></ul><h3 id="6-4-ASpectJ"><a href="#6-4-ASpectJ" class="headerlink" title="6.4 ASpectJ"></a>6.4 ASpectJ</h3><p><strong>概述：</strong></p><p>​    AspectJ 是一个独立的AOP框架，一般开发中会将AspectJ 和 Spring 框架一起使用，进行AOP操作</p><p><strong>实现AOP的两种方式：</strong></p><ol><li><p>基于XML配置文件实现</p><ol start="2"><li><font color="red">基于注解方式实现</font></li></ol></li></ol><p><strong>相关依赖：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Spring--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-expression<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Spring日志依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--aspectJ依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>aopalliance<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aopalliance<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>切入点表达式：</strong></p><ul><li><p>概述：切入点表达式的作用：让Spring框架知道哪个类里面的哪个方法需要增强。</p></li><li><p>语法结构</p><ul><li>execution( [ 权限修饰符 ] [返回值类型] [ 全限定类名 ] ( [ 参数列表 ] ))<ul><li>权限修饰符可以省略</li><li>返回值为 <code>*</code> 代表任意返回值类型</li></ul></li></ul></li><li><p>举例</p><ol><li><p>对com.wdzl.dao.UserDao 类中的addUsesr()方法进行增强</p><p>execution( * com.wdzl.dao.UserDao.addUser(..))</p></li></ol></li></ul><p><strong>案例：</strong></p><p><font color="cornflowerblue">1.新建Moduled,在pom.xml中添加相应的依赖</font></p><p><font color="cornflowerblue">2.按照三层架构模型创建包结构： dao,service,web</font></p><p><font color="cornflowerblue">3.在dao层新建接口和相应的实现类</font></p><p><strong>UserDao</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>UserDaoImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中addUser()是我们要增强的方法</p><p><font color="cornflowerblue">4. 在配置文件中开启注解扫描</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/aop</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--开启注解扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wdzl&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--开启Aspectj,生成代理对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5.在需要创建对象的类上添加注解</font></p><p><img src="/color-ful/img/spring5/image-20210304142340599.png" alt="image-20210304142340599"></p><p><img src="/color-ful/img/spring5/image-20210304142423520.png" alt="image-20210304142423520"></p><p><font color="cornflowerblue">6. 在增强类上加入注解@Aspect</font></p><p><img src="/color-ful/img/spring5/image-20210304144357022.png" alt="image-20210304144357022"></p><p><font color="cornflowerblue">7. 配置不同类型的通知</font></p><p>在增强类的中，在作为增强方法声明上面添加通知类型的注解，并结合切入点表达式来配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * UserDao增强类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span>  <span class="hljs-comment">//将该类生成代理对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoProxy</span> </span>&#123;<br>    <span class="hljs-comment">//前置增强</span><br>    <span class="hljs-meta">@Before(value=&quot;execution(* com.wdzl.dao.impl.UserDaoImpl.addUser(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;before...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//后置增强</span><br>    <span class="hljs-meta">@After(value=&quot;execution(* com.wdzl.dao.impl.UserDaoImpl.addUser(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;after...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//返回增强</span><br>    <span class="hljs-meta">@AfterReturning(value=&quot;execution(* com.wdzl.dao.impl.UserDaoImpl.addUser(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturning</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;afterReturning...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//异常增强</span><br>    <span class="hljs-meta">@AfterThrowing(value=&quot;execution(* com.wdzl.dao.impl.UserDaoImpl.addUser(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterThrowing</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;AfterThrowing...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//环绕增强</span><br>    <span class="hljs-meta">@Around(value=&quot;execution(* com.wdzl.dao.impl.UserDaoImpl.addUser(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕之前...&quot;</span>);<br>        joinPoint.proceed();<br>        System.out.println(<span class="hljs-string">&quot;环绕之后...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">结果：</font></p><p><img src="/color-ful/img/spring5/image-20210304220845222.png" alt="image-20210304220845222"></p><h2 id="7-JDBCTemplate"><a href="#7-JDBCTemplate" class="headerlink" title="7. JDBCTemplate"></a>7. JDBCTemplate</h2><p><strong>概述：</strong>对JDBC进行了封装，使用JDBCTemplate可以方便的去操作数据库。</p><p><strong>需要的依赖：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Druid连接池 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--连接驱动--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--JDBC操作--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--事务--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--映射：整合ORM框架使用--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-orm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7-1-添加功能"><a href="#7-1-添加功能" class="headerlink" title="7.1 添加功能"></a>7.1 添加功能</h4><p><font color="cornflowerblue">1. 配置文件中配置连接池</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--数据库连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///mybatis?useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 配置JdbcTemplate对象，并注入DataSource</font></p><p><img src="/color-ful/img/spring5/image-20210318175112187.png" alt="image-20210318175112187"></p><p><font color="cornflowerblue">3. 创建Dao层，在Dao层实现类中注入jdbcTemplate,创建Service层，在Service层中注入Dao层</font></p><p><strong>Dao层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"> * 学生持久层接口<br> * <span class="hljs-meta">@author</span> lp<br> * <span class="hljs-meta">@version</span> <span class="hljs-number">1.0</span><br> */<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentDao</span> </span>&#123;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加学生</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addStudent</span><span class="hljs-params">(Student student)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Dao层实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学生持久层实现类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">StudentDao</span> </span>&#123;<br>    <span class="hljs-comment">//注入JDBCTemplate</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addStudent</span><span class="hljs-params">(Student student)</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;insert into student(id,username,gender,birthday,address) values(?,?,?,?,?)&quot;</span>;<br>        <span class="hljs-keyword">int</span> update = jdbcTemplate.update(sql, student.getId(), student.getUsername(), student.getGender(), student.getBirthday(), student.getAddress());<br>        System.out.println(update);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Service层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学生业务层接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentService</span> </span>&#123;<br>    <br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加学生</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addStudent</span><span class="hljs-params">(Student student)</span></span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Service层实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学生业务层接口实现类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentServiceImpl</span> </span>&#123;<br>    <span class="hljs-comment">//注入Dao</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StudentDao studentDao;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addStudent</span><span class="hljs-params">(Student student)</span> </span>&#123;<br>        studentDao.addStudent(student);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4. 开启组件扫描</font></p><p><img src="/color-ful/img/spring5/image-20210319144038704.png" alt="image-20210319144038704"></p><p><font color="cornflowerblue">5. 测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAddStudent</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1.读取配置文件</span><br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    <span class="hljs-comment">//2.创建服务层对象</span><br>    StudentService studentServiceImpl = context.getBean(<span class="hljs-string">&quot;studentServiceImpl&quot;</span>, StudentService.class);<br>    Student student = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;刘德华&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;2020-02-03&quot;</span>, <span class="hljs-string">&quot;香港&quot;</span>);<br>    studentServiceImpl.addStudent(student);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-2-修改和删除功能"><a href="#7-2-修改和删除功能" class="headerlink" title="7.2 修改和删除功能"></a>7.2 修改和删除功能</h4><p>修改功能和添加功能比较类似，所以我们快速的将修改和删除功能来讲解一下</p><p><font color="cornflowerblue">1. dao层和实现层添加相应方法</font></p><p><strong>Dao层:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 修改</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateStudent</span><span class="hljs-params">(Student student)</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据id删除用户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteStudent</span><span class="hljs-params">(String id)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Dao层实现层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateStudent</span><span class="hljs-params">(Student student)</span> </span>&#123;<br>       String sql = <span class="hljs-string">&quot;update student set username=? where id=?&quot;</span>;<br>       Object[] args = &#123;student.getUsername(), student.getId()&#125;;<br>       <span class="hljs-keyword">int</span> update = jdbcTemplate.update(sql, args);<br>       System.out.println(update);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteStudent</span><span class="hljs-params">(String id)</span> </span>&#123;<br>       String sql = <span class="hljs-string">&quot;delete from student where id=?&quot;</span>;<br>       <span class="hljs-keyword">int</span> update = jdbcTemplate.update(sql, id);<br>       System.out.println(update);<br>   &#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. service层和实现层</font></p><p><strong>Service层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改学生</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateStudent</span><span class="hljs-params">(Student student)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除学生</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteStudent</span><span class="hljs-params">(String id)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Service实现层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateStudent</span><span class="hljs-params">(Student student)</span> </span>&#123;<br>    studentDao.updateStudent(student);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteStudent</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    studentDao.deleteStudent(id);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.测试：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdateStudent</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-comment">//1.读取配置文件</span><br>      ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>      <span class="hljs-comment">//2.创建服务层对象</span><br>      StudentService studentServiceImpl = context.getBean(<span class="hljs-string">&quot;studentServiceImpl&quot;</span>, StudentService.class);<br>      Student student = <span class="hljs-keyword">new</span> Student();<br>      student.setId(<span class="hljs-number">1</span>);<br>      student.setUsername(<span class="hljs-string">&quot;aaa&quot;</span>);<br>      studentServiceImpl.updateStudent(student);<br><br>  &#125;<br><br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteStudent</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-comment">//1.读取配置文件</span><br>      ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>      <span class="hljs-comment">//2.创建服务层对象</span><br>      StudentService studentServiceImpl = context.getBean(<span class="hljs-string">&quot;studentServiceImpl&quot;</span>, StudentService.class);<br>      studentServiceImpl.deleteStudent(<span class="hljs-string">&quot;6&quot;</span>);<br><br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="7-3-查询功能"><a href="#7-3-查询功能" class="headerlink" title="7.3 查询功能"></a>7.3 查询功能</h4><p><strong>需求1：查询结果返回某个值</strong></p><p><font color="cornflowerblue">1.dao层和实现层中添加对应的方法 </font></p><p><strong>Dao层:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询学生的总人数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findStudentTotal</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Dao层实现层:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findStudentTotal</span><span class="hljs-params">()</span> </span>&#123;<br>    String sql = <span class="hljs-string">&quot;select count(id) from student&quot;</span>;<br>    Integer result = jdbcTemplate.queryForObject(sql, Integer.class);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.service层和实现层添加相应的方法</font></p><p><strong>Service层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询学生总数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findStudentTotal</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Service实现层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findStudentTotal</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> studentDao.findStudentTotal();<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindStudentTotal</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">//1.读取配置文件</span><br>       ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>       <span class="hljs-comment">//2.创建服务层对象</span><br>       StudentService studentServiceImpl = context.getBean(<span class="hljs-string">&quot;studentServiceImpl&quot;</span>, StudentService.class);<br>       <span class="hljs-keyword">int</span> studentTotal = studentServiceImpl.findStudentTotal();<br>       System.out.println(<span class="hljs-string">&quot;学生总数：&quot;</span>+studentTotal);<br>   &#125;<br></code></pre></td></tr></table></figure><p><strong>需求2：查询结果返回对象</strong></p><p><font color="cornflowerblue">1.dao层和实现层中添加对应的方法 </font></p><p><strong>Dao层:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据id查询学生详细信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">findStudentById</span><span class="hljs-params">(String id)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Dao层实现层:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">findStudentById</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    String sql = <span class="hljs-string">&quot;select * from student where id=?&quot;</span>;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        queryForObject（）方法的三个参数</span><br><span class="hljs-comment">        1. sql语句</span><br><span class="hljs-comment">        2. RowMapper接口：完成属性和字段的映射，常用实现类-BeanPropertyRowMapper</span><br><span class="hljs-comment">        3.sql语句的占位符</span><br><span class="hljs-comment">     */</span><br>    Student student = jdbcTemplate.queryForObject(sql, <span class="hljs-keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Student.class), id);<br>    <span class="hljs-keyword">return</span> student;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.service层和实现层添加相应的方法</font></p><p><strong>Service层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据id查询学生信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">Student <span class="hljs-title">findStudentById</span><span class="hljs-params">(String id)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Service实现层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">findStudentById</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> studentDao.findStudentById(id);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindStudentById</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1.读取配置文件</span><br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    <span class="hljs-comment">//2.创建服务层对象</span><br>    StudentService studentServiceImpl = context.getBean(<span class="hljs-string">&quot;studentServiceImpl&quot;</span>, StudentService.class);<br>    Student student = studentServiceImpl.findStudentById(<span class="hljs-string">&quot;2&quot;</span>);<br>    System.out.println(student);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>需求3：查询结果返回集合</strong></p><p><font color="cornflowerblue">1.dao层和实现层中添加对应的方法 </font></p><p><strong>Dao层:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 查询所有学生信息</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Dao层实现层:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;<br>    String sql = <span class="hljs-string">&quot;select * from student&quot;</span>;<br>    List&lt;Student&gt; students = jdbcTemplate.query(sql, <span class="hljs-keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Student.class));<br>    <span class="hljs-keyword">return</span> students;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.service层和实现层添加相应的方法</font></p><p><strong>Service层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询学生列表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Service实现层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> studentDao.findAll();<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindStudentById</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1.读取配置文件</span><br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    <span class="hljs-comment">//2.创建服务层对象</span><br>    StudentService studentServiceImpl = context.getBean(<span class="hljs-string">&quot;studentServiceImpl&quot;</span>, StudentService.class);<br>    Student student = studentServiceImpl.findStudentById(<span class="hljs-string">&quot;2&quot;</span>);<br>    System.out.println(student);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-4-批量添加"><a href="#7-4-批量添加" class="headerlink" title="7.4 批量添加"></a>7.4 批量添加</h4><p><font color="cornflowerblue">1.dao层和实现层中添加对应的方法 </font></p><p><strong>Dao层:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 批量添加</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">batchAdd</span><span class="hljs-params">(List&lt;Object[]&gt; students)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Dao层实现层:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">batchAdd</span><span class="hljs-params">(List&lt;Object[]&gt; students)</span> </span>&#123;<br>    String sql = <span class="hljs-string">&quot;insert into student(username,gender,birthday,address) values(?,?,?,?)&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量添加：</span><br><span class="hljs-comment">     * 参数1：sql语句</span><br><span class="hljs-comment">     * 参数2：集合中的元素是Object[]数组，每一个数组存储了与占位符对应的数据。</span><br><span class="hljs-comment">     * 原理：每执行一次sql，jdbcTemplate会从集合中取出一个数组元素，将数组中的数据取出</span><br><span class="hljs-comment">     *      替换sql中的占位符。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">int</span>[] ints = jdbcTemplate.batchUpdate(sql, students);<br>    System.out.println(Arrays.toString(ints));<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.service层和实现层添加相应的方法</font></p><p><strong>Service层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 批量添加学生信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">batchAdd</span><span class="hljs-params">(List&lt;Object[]&gt; students)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Service实现层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">batchAdd</span><span class="hljs-params">(List&lt;Object[]&gt; students)</span> </span>&#123;<br>    studentDao.batchAdd(students);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBatchAdd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1.读取配置文件</span><br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    <span class="hljs-comment">//2.创建服务层对象</span><br>    StudentService studentServiceImpl = context.getBean(<span class="hljs-string">&quot;studentServiceImpl&quot;</span>, StudentService.class);<br>    List&lt;Object[]&gt; args = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    Object[] o1 = &#123;<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;2020-2-2&quot;</span>,<span class="hljs-string">&quot;北京&quot;</span>&#125;;<br>    Object[] o2 = &#123;<span class="hljs-string">&quot;bbb&quot;</span>,<span class="hljs-string">&quot;女&quot;</span>,<span class="hljs-string">&quot;2020-2-2&quot;</span>,<span class="hljs-string">&quot;北京&quot;</span>&#125;;<br>    Object[] o3 = &#123;<span class="hljs-string">&quot;ccc&quot;</span>,<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;2020-2-2&quot;</span>,<span class="hljs-string">&quot;北京&quot;</span>&#125;;<br>    Object[] o4 = &#123;<span class="hljs-string">&quot;ddd&quot;</span>,<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;2020-2-2&quot;</span>,<span class="hljs-string">&quot;北京&quot;</span>&#125;;<br>    args.add(o1);<br>    args.add(o2);<br>    args.add(o3);<br>    args.add(o4);<br>    studentServiceImpl.batchAdd(args);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-5-批量修改"><a href="#7-5-批量修改" class="headerlink" title="7.5 批量修改"></a>7.5 批量修改</h4><p>批量修改与批量添加原理相同，作为课堂练习，先让学生自行练习。</p><p><font color="cornflowerblue">1.dao层和实现层中添加对应的方法 </font></p><p><strong>Dao层:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 批量修改</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bathUpdate</span><span class="hljs-params">(List&lt;Object[]&gt; students)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Dao层实现层:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">   <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据id批量修改学生信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> students</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bathUpdate</span><span class="hljs-params">(List&lt;Object[]&gt; students)</span> </span>&#123;<br>    String sql = <span class="hljs-string">&quot;update student set address=? where id=?&quot;</span>;<br>    <span class="hljs-keyword">int</span>[] ints = jdbcTemplate.batchUpdate(sql, students);<br>    System.out.println(Arrays.toString(ints));<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.service层和实现层添加相应的方法</font></p><p><strong>Service层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 批量修改学生信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">batchUpdate</span><span class="hljs-params">(List&lt;Object[]&gt; students)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Service实现层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">batchUpdate</span><span class="hljs-params">(List&lt;Object[]&gt; students)</span> </span>&#123;<br>    studentDao.bathUpdate(students);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBatchUpdate</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1.读取配置文件</span><br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    <span class="hljs-comment">//2.创建服务层对象</span><br>    StudentService studentServiceImpl = context.getBean(<span class="hljs-string">&quot;studentServiceImpl&quot;</span>, StudentService.class);<br>    List&lt;Object[]&gt; args = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    Object[] o1 = &#123;<span class="hljs-string">&quot;中国&quot;</span>,<span class="hljs-number">1</span>&#125;;<br>    Object[] o2 = &#123;<span class="hljs-string">&quot;中国&quot;</span>,<span class="hljs-number">2</span>&#125;;<br>    Object[] o3 = &#123;<span class="hljs-string">&quot;中国&quot;</span>,<span class="hljs-number">3</span>&#125;;<br>    Object[] o4 = &#123;<span class="hljs-string">&quot;中国&quot;</span>,<span class="hljs-number">4</span>&#125;;<br><br>    args.add(o1);<br>    args.add(o2);<br>    args.add(o3);<br>    args.add(o4);<br>    studentServiceImpl.batchUpdate(args);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-事务"><a href="#8-事务" class="headerlink" title="8. 事务"></a>8. 事务</h2><p>概念在这里就不赘述了，忘记的同学可以去查看MySQL笔记中有关事务的相关概念</p><h3 id="8-1-事务环境搭建"><a href="#8-1-事务环境搭建" class="headerlink" title="8.1 事务环境搭建"></a>8.1 事务环境搭建</h3><p><font color="cornflowerblue">1. 新建Module,在pom中添加相应依赖，与JdbcTemplate相同</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Spring--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-expression<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Spring日志依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Druid连接池 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--连接驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--JDBC操作--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--事务--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--映射：整合ORM框架使用--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-orm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--aspectJ依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>aopalliance<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aopalliance<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.创建配置文件，开启注解扫描，配置数据源，和JdbcTemplate</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--组件扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wdzl&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--数据库连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///test?useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--JDBCTemplate--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 创建Dao层及实现层</font></p><p><strong>Dao层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AccountDao</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转出操作</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">moneyOut</span><span class="hljs-params">(String name,<span class="hljs-keyword">double</span> money)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转入操作</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">moneyIn</span><span class="hljs-params">(String name,<span class="hljs-keyword">double</span> money)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Dao层实现层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.dao.impl;<br><br><span class="hljs-keyword">import</span> com.wdzl.dao.AccountDao;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AccountDao</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">moneyOut</span><span class="hljs-params">(String name,<span class="hljs-keyword">double</span> money)</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;update zhuanzhang set money=money-? where name=?&quot;</span>;<br>        <span class="hljs-keyword">int</span> update = jdbcTemplate.update(sql, money, name);<br>        System.out.println(update);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">moneyIn</span><span class="hljs-params">(String name,<span class="hljs-keyword">double</span> money)</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;update zhuanzhang set money=money+? where name=?&quot;</span>;<br>        <span class="hljs-keyword">int</span> update = jdbcTemplate.update(sql, money, name);<br>        System.out.println(update);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Service层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AccountService</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转账操作</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transferAccounts</span><span class="hljs-params">(String outName,String inName,<span class="hljs-keyword">double</span> money)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Service层实现层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AccountService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountDao accountDao;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transferAccounts</span><span class="hljs-params">(String outName, String inName, <span class="hljs-keyword">double</span> money)</span> </span>&#123;<br>        <span class="hljs-comment">//转出</span><br>        accountDao.moneyOut(outName, money);<br>        <span class="hljs-comment">//转入</span><br>        accountDao.moneyIn(inName,money);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4. 测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        String outName = <span class="hljs-string">&quot;张三&quot;</span>;<br>        String inName = <span class="hljs-string">&quot;李四&quot;</span>;<br>        <span class="hljs-keyword">double</span> money = <span class="hljs-number">500.00</span>;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>        AccountService accountServiceImpl = context.getBean(<span class="hljs-string">&quot;accountServiceImpl&quot;</span>, AccountService.class);<br>        accountServiceImpl.transferAccounts(outName,inName,money);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-2-事务操作"><a href="#8-2-事务操作" class="headerlink" title="8.2 事务操作"></a>8.2 事务操作</h3><ol><li>事务添加到JavaEE 三层架构里的Service层。<ul><li>因为Service负责组装业务</li></ul></li><li>在Spring进行事务管理<ul><li>编程式事务</li><li><strong><font color="red">声明式事务</font></strong></li></ul></li><li>声明式事务管理<ul><li><strong><font color="red">基于注解方式</font></strong></li><li>基于XML方式</li></ul></li><li>在Spring进行声明式事务管理，底层使用了AOP原理</li><li>Spring针对不同的框架提供了不同的API<ul><li>针对JDBC，MyBatis : DataSourceTransactionManager</li><li>针对Hibernate：HibernateTransactionManager</li></ul></li></ol><p><img src="/color-ful/img/spring5/image-20210326102617171.png" alt="image-20210326102617171"></p><h3 id="8-3-基于注解方式-声明式事务"><a href="#8-3-基于注解方式-声明式事务" class="headerlink" title="8.3 基于注解方式-声明式事务"></a>8.3 基于注解方式-声明式事务</h3><p><font color="cornflowerblue">1. 在配置文件中配置事务管理器</font></p><p><img src="/color-ful/img/spring5/image-20210326111913889.png" alt="image-20210326111913889"></p><p><font color="cornflowerblue">2. 在配置文件中添加相应命名空间</font></p><p><img src="/color-ful/img/spring5/image-20210326112803896.png" alt="image-20210326112803896"></p><p><font color="cornflowerblue">3. 开启事务注解</font></p><p><img src="/color-ful/img/spring5/image-20210326113226955.png" alt="image-20210326113226955"></p><p><font color="cornflowerblue">4.在service类上添加事务注解</font></p><p><img src="/color-ful/img/spring5/image-20210326114154687.png" alt="image-20210326114154687"></p><p><strong>@Transactional 注解可以加到类上面，也可以加在方法上：</strong></p><ul><li>注解添加在类上面，则给类中所有的方法添加事务</li><li>注解添加方法上面，则给这个方法添加事务</li></ul><p><font color="cornflowerblue">5.测试即可，此时事务已经开启。</font></p><h4 id="8-3-1-Transactional-常见配置"><a href="#8-3-1-Transactional-常见配置" class="headerlink" title="8.3.1 @Transactional 常见配置"></a>8.3.1 @Transactional 常见配置</h4><p>先来看一下常见配置（通过该注解的源码查看）</p><ul><li>propagation ：事务传播行为</li><li>isolation: 事务隔离级别</li><li>timeout:超时时间</li><li>readOnly:是否只读</li><li>rollbackFor:回滚</li><li>noRollbackFor：不回滚</li></ul><ol><li><strong>propagation ：事务传播行为</strong></li></ol><p>什么叫<strong>事务传播行为</strong>？<br>即然是传播，那么至少有两个东西，才可以发生传播。单体不存在传播这个行为。</p><p>事务传播行为（propagation behavior）指的就是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行。<br>例如：methodA事务方法调用methodB事务方法时，methodB是继续在调用者methodA的事务中运行呢，还是为自己开启一个新事务运行，这就是由methodB的事务传播行为决定的。</p><table><thead><tr><th>事务传播行为类型</th><th>说明</th></tr></thead><tbody><tr><td><strong>PROPAGATION_REQUIRED</strong></td><td>如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>支持当前事务，如果当前没有事务，就以非事务方式执行。</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>使用当前的事务，如果当前没有事务，就抛出异常。</td></tr><tr><td><strong>PROPAGATION_REQUIRES_NEW</strong></td><td>新建事务，如果当前存在事务，把当前事务挂起。</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td></tr><tr><td>PROPAGATION_NEVER</td><td>以非事务方式执行，如果当前存在事务，则抛出异常。</td></tr><tr><td>PROPAGATION_NESTED</td><td>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</td></tr></tbody></table><ul><li><strong>PROPAGATION_REQUIRED</strong></li></ul><p><img src="/color-ful/img/spring5/image-20210326152601124.png" alt="image-20210326152601124"></p><ul><li><strong>PROPAGATION_REQUIRES_NEW</strong></li></ul><p><img src="/color-ful/img/spring5/image-20210326153159052.png" alt="image-20210326153159052"></p><ol start="2"><li><p><strong>隔离级别</strong>（MySQL笔记中有）</p><p>不考虑事务隔离级别会产生3个问题</p><ul><li>脏读</li><li>不可重复度</li><li>虚读</li></ul></li></ol><blockquote><p>​    <strong>概述：</strong></p><p>​        多个事务之间是相互隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题</p><p>​    <strong>存在问题：</strong></p><ol><li><p>脏读：一个事务，读取到另一个数据没有提交的数据</p></li><li><p>不可重复度（虚读）：在同一个事务中，两次读取到的数据不一致</p></li><li><p>幻读：一个事务1操作（DML）数据表中的所有数据，另一个事务2此时插入数据，事务1查询数据发现与自己修改的数据不一致，就好像产生了幻觉一样。</p></li></ol><p>​    <strong>隔离级别：</strong></p><pre><code>     1. read uncommitted： 读未提交  - 问题：脏读，不可重复读，幻读     2. read committed：读已提交（Oracle 默认）  - 问题：不可重复读，幻读     3. repeatable read: 可重复读（MySQL默认）  - 问题：幻读     4. serializable: 串行化  - 可以解决所有问题</code></pre></blockquote><p><img src="/color-ful/img/spring5/image-20210326220333725.png" alt="image-20210326220333725"></p><h3 id="8-4-基于XML方式-声明式事务"><a href="#8-4-基于XML方式-声明式事务" class="headerlink" title="8.4 基于XML方式-声明式事务"></a>8.4 基于XML方式-声明式事务</h3><p>在上一个项目的基础上新建一个<code>bean2.xml</code>。在该配置文件中配置声明式事务</p><p><font color="cornflowerblue">1. 在配置文件中创建事务管理器</font></p><p><font color="cornflowerblue">2. 配置通知</font></p><p><font color="cornflowerblue">3. 配置切入点和切面</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--组件扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wdzl&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--数据库连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///test?useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--JDBCTemplate--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--1. 创建事务管理器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--注入数据源--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--2. 配置通知--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--配置事务参数--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--指定哪些方法上添加事务及事务的属性--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;transferAccounts&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--直接指定方法名--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;tx:method name=&quot;*Accounts&quot;/&gt;&amp;lt;!&amp;ndash;以Accounts结尾&amp;ndash;&amp;gt;--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--3.配置切入点和切面 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--配置切入点--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pt&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.wdzl.service.impl.AccountServiceImpl.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--配置切面--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pt&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:advisor</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4. 测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>    String outName = <span class="hljs-string">&quot;张三&quot;</span>;<br>    String inName = <span class="hljs-string">&quot;李四&quot;</span>;<br>    <span class="hljs-keyword">double</span> money = <span class="hljs-number">500.00</span>;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean2.xml&quot;</span>);<br>    AccountService accountServiceImpl = context.getBean(<span class="hljs-string">&quot;accountServiceImpl&quot;</span>, AccountService.class);<br>    accountServiceImpl.transferAccounts(outName,inName,money);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-5-完全注解进行声明式事务管理"><a href="#8-5-完全注解进行声明式事务管理" class="headerlink" title="8.5 完全注解进行声明式事务管理"></a>8.5 完全注解进行声明式事务管理</h3><p>继续使用上一个项目</p><p><font color="cornflowerblue">1.结合着注解方式的配置文件，我们对照着写注解配置类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.config;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 注解配置类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@ComponentScan(basePackages = &quot;com.wdzl&quot;)</span><span class="hljs-comment">//组件扫描</span><br><span class="hljs-meta">@EnableTransactionManagement</span><span class="hljs-comment">//开启事务</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TxConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">//配置数据源</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title">getDruidDataSource</span><span class="hljs-params">()</span> </span>&#123;<br>        DruidDataSource dataSource = <span class="hljs-keyword">new</span> DruidDataSource();<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql:///test?useUnicode=true&amp;characterEncoding=utf8&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;root&quot;</span>);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br><br>    <span class="hljs-comment">//配置JdbcTemplate</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title">getJdbcTemplate</span><span class="hljs-params">(DataSource dataSource)</span> </span>&#123;<br>        JdbcTemplate jdbcTemplate = <span class="hljs-keyword">new</span> JdbcTemplate();<br>        <span class="hljs-comment">//注入DataSource完全可以使用set方式，但是此时我们的容器中已经有了DataSource对象，所以我们可以直接拿来使用，</span><br>        jdbcTemplate.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> jdbcTemplate;<br>    &#125;<br><br>    <span class="hljs-comment">//配置事务管理器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSourceTransactionManager <span class="hljs-title">getDataSourceTransactionManager</span><span class="hljs-params">(DataSource dataSource)</span> </span>&#123;<br>        DataSourceTransactionManager dataSourceTransactionManager = <span class="hljs-keyword">new</span> DataSourceTransactionManager();<br>        dataSourceTransactionManager.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> dataSourceTransactionManager;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 在AccountServiceImpl上加上开启事务的注解</font></p><p><img src="/color-ful/img/spring5/image-20210326233755103.png" alt="image-20210326233755103"></p><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br>    String outName = <span class="hljs-string">&quot;张三&quot;</span>;<br>    String inName = <span class="hljs-string">&quot;李四&quot;</span>;<br>    <span class="hljs-keyword">double</span> money = <span class="hljs-number">500.00</span>;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(TxConfig.class);<br>    AccountService accountServiceImpl = context.getBean(<span class="hljs-string">&quot;accountServiceImpl&quot;</span>, AccountService.class);<br>    accountServiceImpl.transferAccounts(outName,inName,money);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-Spring5-新特性"><a href="#9-Spring5-新特性" class="headerlink" title="9. Spring5 新特性"></a>9. Spring5 新特性</h2><h3 id="9-1-整合日志框架-Log4J2"><a href="#9-1-整合日志框架-Log4J2" class="headerlink" title="9.1 整合日志框架-Log4J2"></a>9.1 整合日志框架-Log4J2</h3><p>在事务的项目上添加依赖</p><p><font color="cornflowerblue">1. 添加依赖</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--log4j--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.14.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.14.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.14.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.将配置文件拷贝到resources目录下，直接执行事务的测试查看日志的变化</font></p><p><img src="/color-ful/img/spring5/image-20210327003146419.png" alt="image-20210327003146419"></p><p><font color="cornflowerblue">3. 修改log4j2.xml</font></p><p><img src="/color-ful/img/spring5/image-20210327003524698.png" alt="image-20210327003524698"></p><p><font color="cornflowerblue">4. 再次执行测试</font></p><p><img src="/color-ful/img/spring5/image-20210327003602129.png" alt="image-20210327003602129"></p><p><font color="cornflowerblue">5.也可以自定义日志输出</font></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">test3</span>(<span class="hljs-params"></span>)</span> &#123;<br>    Logger logger = LoggerFactory.getLogger(AccountTest.class);<br>    logger.info(<span class="hljs-string">&quot;Hello INFO&quot;</span>);<br>    logger.warn(<span class="hljs-string">&quot;Hello WARN&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果</strong></p><p><img src="/color-ful/img/spring5/image-20210327003948127.png" alt="image-20210327003948127"></p><h3 id="9-2-核心容器支持-Nullable注解"><a href="#9-2-核心容器支持-Nullable注解" class="headerlink" title="9.2 核心容器支持@Nullable注解"></a>9.2 核心容器支持@Nullable注解</h3><p><strong>概述：</strong></p><p>​    注解可以使用在方法，属性，参数上。</p><ul><li><p>方法：返回值可以为空</p><ul><li><p>ApplicationContext接口中：</p><p><img src="/color-ful/img/spring5/image-20210327004448089.png" alt="image-20210327004448089"></p></li></ul></li><li><p>属性：属性值可以为空</p><ul><li><p>AnnotationConfigApplicationContext中：</p><p><img src="/color-ful/img/spring5/image-20210327004720064.png" alt="image-20210327004720064"></p></li></ul></li><li><p>参数：参数值可以为空</p><ul><li><p>自己写一个</p><p><img src="/color-ful/img/spring5/image-20210327004833171.png" alt="image-20210327004833171"></p></li></ul></li></ul><h3 id="9-3-核心容器支持Lambda表达式-函数式风格创建对象"><a href="#9-3-核心容器支持Lambda表达式-函数式风格创建对象" class="headerlink" title="9.3 核心容器支持Lambda表达式-函数式风格创建对象"></a>9.3 核心容器支持Lambda表达式-函数式风格创建对象</h3><p>使用事务的项目</p><p><font color="cornflowerblue">1. 创建一个User类，什么都不用写</font></p><p><font color="cornflowerblue">2. 通过Lamda表达式创建对象</font></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">   @Test<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> test4() &#123;<br>        //<span class="hljs-number">1.</span> 创建GenericApplicationContext对象<br>        GenericApplicationContext context = <span class="hljs-built_in">new</span> GenericApplicationContext();<br>        //<span class="hljs-number">2.</span>注册对象<br>        context.<span class="hljs-keyword">refresh</span>();<br>        //普通写法<br>        context.registerBean(&quot;user&quot;, <span class="hljs-keyword">User</span>.<span class="hljs-keyword">class</span>, <span class="hljs-built_in">new</span> Supplier&lt;<span class="hljs-keyword">User</span>&gt;() &#123;<br>            @Override<br>            <span class="hljs-built_in">public</span> <span class="hljs-keyword">User</span> <span class="hljs-keyword">get</span>() &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();<br>            &#125;<br>        &#125;);<br>        //lambdab表达式<br>//        context.registerBean(&quot;user&quot;,<span class="hljs-keyword">User</span>.<span class="hljs-keyword">class</span>,()-&gt;<span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>());<br>        <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = (<span class="hljs-keyword">User</span>) context.getBean(&quot;user&quot;);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="9-4-整合JUnit测试框架"><a href="#9-4-整合JUnit测试框架" class="headerlink" title="9.4 整合JUnit测试框架"></a>9.4 整合JUnit测试框架</h3><p>还是在事务的项目中</p><p><font color="red"><strong>整合JUnit4</strong></font></p><p><font color="cornflowerblue">1. 添加依赖</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Junit4--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 编写测试类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><span class="hljs-comment">//指定单元测试框架</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:bean.xml&quot;)</span><span class="hljs-comment">//加载配置文件</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Junit4TestDemo</span> </span>&#123;<br><br>    <span class="hljs-comment">//注入Service层</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountService accountService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        String outName = <span class="hljs-string">&quot;张三&quot;</span>;<br>        String inName = <span class="hljs-string">&quot;李四&quot;</span>;<br>        <span class="hljs-keyword">double</span> money = <span class="hljs-number">500.00</span>;<br>        accountService.transferAccounts(outName,inName,money);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="red">注意：注解配置文件会和xml配置文件冲突，所以我们先将配置文件内容全部注释之后再进行测试</font></p><p><font color="red"><strong>整合JUnit5</strong></font></p><p><font color="cornflowerblue">1.添加依赖</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Junit5测试单元--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.wdzl.service.AccountService;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.extension.ExtendWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit.jupiter.SpringExtension;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@ExtendWith(SpringExtension.class)</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:bean.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Junit5TestDemo</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountService accountService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        String outName = <span class="hljs-string">&quot;张三&quot;</span>;<br>        String inName = <span class="hljs-string">&quot;李四&quot;</span>;<br>        <span class="hljs-keyword">double</span> money = <span class="hljs-number">500.00</span>;<br>        accountService.transferAccounts(outName,inName,money);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简化写法</p><p><img src="/color-ful/img/spring5/image-20210327015510433.png" alt="image-20210327015510433"></p>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XML</title>
    <link href="/color-ful/2020/01/17/1.XML/"/>
    <url>/color-ful/2020/01/17/1.XML/</url>
    
    <content type="html"><![CDATA[<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p><strong>XML:Extendsible Markup Language 可扩展标记语言</strong></p><h3 id="1-可扩展："><a href="#1-可扩展：" class="headerlink" title="1. 可扩展："></a>1. 可扩展：</h3><p>标签都是自定义的</p><h3 id="2-功能："><a href="#2-功能：" class="headerlink" title="2. 功能："></a>2. 功能：</h3><ol><li><p>配置文件</p><ol start="2"><li>在网络中传输</li></ol></li></ol><h3 id="3-与HTML的区别："><a href="#3-与HTML的区别：" class="headerlink" title="3. 与HTML的区别："></a>3. 与HTML的区别：</h3><ol><li><p>XML标签是自定义的，HTML标签是预定义的。</p><ol start="2"><li>XML的语法严格，HTML语法松散</li><li>XML是存储数据的，HTML是展示数据</li></ol></li></ol><h2 id="2-语法"><a href="#2-语法" class="headerlink" title="2. 语法"></a>2. 语法</h2><h3 id="1-语法："><a href="#1-语法：" class="headerlink" title="1. 语法："></a>1. 语法：</h3><ol><li><p>XML文档的后缀：.xml</p><ol start="2"><li>XML文档的第一行必须是文档声明：<code>&lt;?xml version=&#39;1.0&#39;?&gt;</code></li><li>XML文档中有且仅有一个跟标签</li><li>属性值必须使用引号（单双引号均可）引起来</li><li>标签必须正确关闭</li><li>XML标签区分大小写</li></ol></li></ol><p><font color="cornflowerblue">案例：</font></p><p>新建一个.xml文件，将下列内容写入该文件中，使用浏览器打开 ，只要不报错，就证明XML格式正确。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&#x27;1.0&#x27;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">users</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;1&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>比尔盖茨<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>67<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gender</span>&gt;</span>male<span class="hljs-tag">&lt;/<span class="hljs-name">gender</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;2&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>乔布斯<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>64<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gender</span>&gt;</span>male<span class="hljs-tag">&lt;/<span class="hljs-name">gender</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">users</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-组成"><a href="#2-组成" class="headerlink" title="2. 组成"></a>2. 组成</h3><ol><li><p><strong>文档声明</strong></p><ul><li><p>格式:<code>&lt;?xml 属性列表 ?&gt;</code></p></li><li><p>属性列表：</p><ul><li><p><font color="red">version :版本号</font></p></li><li><p>encoding :编码格式。告知 解析引擎当前文档使用的字符集，默认值：ISO-8859-1 。用来校验文本     实际编码集是否与告知编码集相符</p></li><li><p>standalone :是否独立</p><p>取值：</p><ul><li>yes：不依赖其他文件</li><li>no：依赖其他文件</li></ul></li></ul></li></ul></li><li><p><strong>指令</strong>：与css结合使用控制XML样式的。现在已经不用了。</p></li><li><p><strong>标签</strong>：自定义标签</p><ul><li>规则：<ol><li>名称可以包含字母，数字以及其他字符</li><li>名称不能以数字或者标点符号开始</li><li>名称不能以 字母组合xml（任何大小写组合都不行，XML，Xml等）开始</li><li>名称不能包含空格</li></ol></li></ul></li><li><p><strong>属性</strong></p><ul><li>规则<ol><li>以键值对的形式存在</li><li>属性必须用引号引起来</li><li>id属性值必须唯一</li></ol></li></ul></li><li><p><strong>文本</strong></p><ul><li><p>注意</p><ol><li>文本中 包含 <code>&lt;</code>,<code>&gt;</code>,<code>&amp;</code>必须使用转译字符：<code>&lt;</code> = <code>&amp;lt</code> , <code>&amp;</code>=<code>&amp;amp</code> , <code>&gt;</code> = <code>&amp;gt</code></li><li>CDATA区：该区域中的数据会被原样输出，不必使用转译字符<ul><li>格式：<font color="red"> <code>&lt;![CDATA[内容]]&gt;</code> </font></li></ul></li></ol>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;![CDATA[ if(a&gt;b &amp;&amp; a&lt;100) ]]&gt;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="3-约束"><a href="#3-约束" class="headerlink" title="3. 约束"></a>3. 约束</h3><h4 id="3-1-概述："><a href="#3-1-概述：" class="headerlink" title="3.1 概述："></a>3.1 概述：</h4><p>规定xml文档的书写规范</p><ol start="2"><li><strong>学习要求：</strong></li></ol><ul><li>能够在xml中引入约束文档<ul><li>能够大致读懂约束文档</li></ul></li></ul><ol start="3"><li><strong>约束图解：</strong></li></ol><p><img src="/color-ful/img%5Cxml%E7%BA%A6%E6%9D%9F%E5%9B%BE%E8%A7%A3.png"></p><ol start="4"><li><strong>分类</strong><ul><li>DTD：简单的约束 技术</li><li>Schema:复杂的约束技术</li></ul></li></ol><h4 id="3-2-DTD"><a href="#3-2-DTD" class="headerlink" title="3.2 DTD"></a>3.2 DTD</h4><ul><li><p>引入：</p><ul><li>内部DTD:将约束规则定义在XML文档中（写完外部再写内部即可）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span><br><span class="hljs-comment">&lt;!--&lt;!DOCTYPE students SYSTEM &quot;\dtd\Student.dtd&quot;&gt;--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">students</span> [</span><br><span class="hljs-meta">        &lt;!--students 标签，它内部可以包含0-n个 student标签--&gt;</span><br><span class="hljs-meta">        <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">students</span> (<span class="hljs-meta-keyword">student</span>*)&gt;</span></span><br><span class="hljs-meta">        &lt;!--student 标签，它内部包含name,age,sex三个标签,顺序必须按照规定顺序，并且只能出现一次--&gt;</span><br><span class="hljs-meta">        <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">student</span> (<span class="hljs-meta-keyword">name</span>,<span class="hljs-meta-keyword">age</span>,<span class="hljs-meta-keyword">sex</span>)&gt;</span></span><br><span class="hljs-meta">        &lt;!--name 标签 #pcdata代表 String类型--&gt;</span><br><span class="hljs-meta">        <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">name</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta">        <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">age</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta">        <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">sex</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta">        &lt;!--定义属性：student标签中  number:属性名   ID：唯一  #required:必须的--&gt;</span><br><span class="hljs-meta">        <span class="hljs-meta">&lt;!ATTLIST <span class="hljs-meta-keyword">student</span> <span class="hljs-meta-keyword">number</span> <span class="hljs-meta-keyword">ID</span> <span class="hljs-meta-keyword">#REQUIRED</span>&gt;</span></span><br><span class="hljs-meta">        ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">students</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">student</span> <span class="hljs-attr">number</span>=<span class="hljs-string">&quot;s001&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>刘德华<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>25<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">students</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>外部DTD：将约束的规则定义在外部DTD中<ul><li>本地：<code>&lt;!DOCTYPE 根标签名 SYSTEM &quot;DTD文件位置&quot;&gt;</code></li><li>网络:<code>&lt;!DOCTYPE 跟标签名 PUBLIC &quot;DTD文件名&quot; &quot;DTD文件位置（URL）&quot;</code></li></ul></li></ul><p><font color="cornflowerblue"><strong>先写DTD约束</strong></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!--students 标签，它内部可以包含0-n个 student标签--&gt;<br>&lt;!ELEMENT students (student*)&gt;<br>&lt;!--student 标签，它内部包含name,age,sex三个标签,顺序必须按照规定顺序，并且只能出现一次--&gt;<br>&lt;!ELEMENT student (name,age,sex)&gt;<br>&lt;!--name 标签 #pcdata代表 String类型--&gt;<br>&lt;!ELEMENT name (#PCDATA)&gt;<br>&lt;!ELEMENT age (#PCDATA)&gt;<br>&lt;!ELEMENT sex (#PCDATA)&gt;<br>&lt;!--定义属性：student标签中  number:属性名   ID：唯一  #required:必须的--&gt;<br>&lt;!ATTLIST student number ID #REQUIRED&gt;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue"><strong>再写XML，并引入DTD</strong></font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">students</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;\dtd\Student.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">students</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">student</span> <span class="hljs-attr">number</span>=<span class="hljs-string">&quot;s001&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>刘德华<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>25<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">students</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​        通过上述案例，我们不难发现DTD的弊端：<font color="red">无法对属性内容进行限定</font>。比如我们无法去限定age必须在0~100之间。</p></li></ul><h4 id="3-3-Schema"><a href="#3-3-Schema" class="headerlink" title="3.3 Schema"></a>3.3 Schema</h4><p><strong><font color="red">Schema文档要求能够读懂，可以做简单修改即可。</font></strong></p><p><strong><font color="cornflowerblue">Student.xsd</font></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">xsd:schema</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.wdzl.cn/xml&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:xsd</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">targetNamespace</span>=<span class="hljs-string">&quot;http://www.wdzl.cn/xml&quot;</span> <span class="hljs-attr">elementFormDefault</span>=<span class="hljs-string">&quot;qualified&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsd:element</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;studentsType&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsd:complexType</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;studentsType&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsd:sequence</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">xsd:element</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;studentType&quot;</span> <span class="hljs-attr">minOccurs</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">maxOccurs</span>=<span class="hljs-string">&quot;unbounded&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">xsd:sequence</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">xsd:complexType</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsd:complexType</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;studentType&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsd:sequence</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">xsd:element</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;xsd:string&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">xsd:element</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;ageType&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">xsd:element</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;sexType&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">xsd:sequence</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsd:attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;numberType&quot;</span> <span class="hljs-attr">use</span>=<span class="hljs-string">&quot;required&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">xsd:complexType</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsd:simpleType</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sexType&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsd:restriction</span> <span class="hljs-attr">base</span>=<span class="hljs-string">&quot;xsd:string&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">xsd:enumeration</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">xsd:enumeration</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">xsd:restriction</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">xsd:simpleType</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsd:simpleType</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ageType&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsd:restriction</span> <span class="hljs-attr">base</span>=<span class="hljs-string">&quot;xsd:integer&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">xsd:minInclusive</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">xsd:maxInclusive</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;256&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">xsd:restriction</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">xsd:simpleType</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsd:simpleType</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;numberType&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsd:restriction</span> <span class="hljs-attr">base</span>=<span class="hljs-string">&quot;xsd:string&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">xsd:pattern</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;IT_\d&#123;3&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">xsd:restriction</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">xsd:simpleType</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">xsd:schema</span>&gt;</span> <br></code></pre></td></tr></table></figure><p><strong>头信息：</strong></p><p><img src="/color-ful/img/javaee/image-20210113144219267.png" alt="image-20210113144219267"></p><p><strong>主体部分：</strong></p><p><img src="/color-ful/img/javaee/image-20210113144527802.png" alt="image-20210113144527802"></p><p><strong><font color="cornflowerblue">Student.xml</font></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">     1. xml的根元素</span><br><span class="hljs-comment">     2.引入xsi前缀-固定格式：http://www.w3.org/2001/XMLSchema-instance</span><br><span class="hljs-comment">     3.引入xsd文件命名空间：xsi:schemaLocation=&quot;http://www.wdzl.cn/xml student.xsd</span><br><span class="hljs-comment">        *http://www.wdzl.cn/xml：命名空间</span><br><span class="hljs-comment">        *student.xsd：文件存储路径</span><br><span class="hljs-comment">     4.为每一个 xsd 约束 声明一个前缀，作为标识</span><br><span class="hljs-comment">        *因为一个xml中可能有多个约束文档，前缀的作用用于区分同名标签属于哪一个xsd的情况</span><br><span class="hljs-comment">        *声明格式：&lt;xmlns:标签名=“命名空间”&gt;</span><br><span class="hljs-comment">        *使用格式：&lt;a:name&gt;&lt;/a:name&gt;,不写使用默认空前缀</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">students</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.wdzl.cn/xml student.xsd&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:a</span>=<span class="hljs-string">&quot;http://www.wdzl.cn/xml&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a:student</span> <span class="hljs-attr">number</span>=<span class="hljs-string">&quot;IT_001&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a:name</span>&gt;</span>周杰a:伦<span class="hljs-tag">&lt;/<span class="hljs-name">a:name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a:age</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">a:age</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a:sex</span>&gt;</span>female<span class="hljs-tag">&lt;/<span class="hljs-name">a:sex</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">a:student</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">student</span> <span class="hljs-attr">number</span>=<span class="hljs-string">&quot;IT_002&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>呵呵<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>male<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">students</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-解析"><a href="#4-解析" class="headerlink" title="4. 解析"></a>4. 解析</h2><h3 id="4-1-常见XML操作"><a href="#4-1-常见XML操作" class="headerlink" title="4.1 常见XML操作"></a>4.1 常见XML操作</h3><ol><li><strong>解析（读取）</strong>：将文档中的数据读取到内存中</li><li><strong>写入（持久化）</strong>：将内存中的数据保存到xml文档中。不常用</li></ol><h3 id="4-2-解析XML的方式"><a href="#4-2-解析XML的方式" class="headerlink" title="4.2 解析XML的方式"></a>4.2 解析XML的方式</h3><ol><li><p><strong>DOM</strong>：将标记语言文档一次性加载进内存，在内存中形成一颗dom数</p><p><img src="/color-ful/img/javaee/DOM%E6%A0%91.png"></p><p><font color="red">优点：</font>操作简单，可以对文档进行CRUD的所有操作</p><p><font color="red">缺点：</font>占内存，不适用移动和嵌入式设备。</p></li><li><p><strong>SAX</strong>：逐行读取，基于事件驱动的解析方式</p><p>Sun公司在JDK5版本对DOM解析技术的升级，并命名为SAX（Simple API for XML）。SAX是逐行读取xml文件，不会创建大量的DOM对象，所以在内存使用和性能上，都优于DOM解析。</p><ol start="3"><li><strong>第三方的解析</strong></li></ol><ul><li>jdom：在dom基础上进行封装。</li><li><font color="red">dom4j</font>：是在jdom上进行了在封装。</li><li>pull 主要用在Android手机开发。它与SAX非常类似，都是事件驱动方式解析xml文件。</li></ul></li></ol><h2 id="3-dom4j解析技术-重点"><a href="#3-dom4j解析技术-重点" class="headerlink" title="3. dom4j解析技术 - 重点"></a>3. dom4j解析技术 - 重点</h2><h3 id="3-1-dom4j类库的使用"><a href="#3-1-dom4j类库的使用" class="headerlink" title="3.1  dom4j类库的使用"></a>3.1  dom4j类库的使用</h3><p>由于dom4j它不是sun公司的技术，而属于第三方公司的技术，需要我们配置依赖jar包。</p><h3 id="3-2-dom4j解析案例"><a href="#3-2-dom4j解析案例" class="headerlink" title="3.2 dom4j解析案例"></a>3.2 dom4j解析案例</h3><p><font color="cornflowerblue">1. 准备xml解析用例</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">books</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">bid</span>=<span class="hljs-string">&quot;BID123456&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Java葵花宝典<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>20.50<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>詹姆斯高斯林<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">bid</span>=<span class="hljs-string">&quot;BID223456&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>JavaSE入门宝典<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>29.90<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>比尔盖茨<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">books</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 准备对应的Book类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String bid;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String price;<br>    <span class="hljs-keyword">private</span> String author;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Book</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Book</span><span class="hljs-params">(String bid, String name, String price, String author)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.bid = bid;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.price = price;<br>        <span class="hljs-keyword">this</span>.author = author;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getBid</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bid;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBid</span><span class="hljs-params">(String bid)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.bid = bid;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPrice</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPrice</span><span class="hljs-params">(String price)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAuthor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> author;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAuthor</span><span class="hljs-params">(String author)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.author = author;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Book&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;bid=&#x27;&quot;</span> + bid + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, price=&quot;</span> + price +<br>                <span class="hljs-string">&quot;, author=&#x27;&quot;</span> + author + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 新建jar包，并将jar添加到项目中</font></p><p><img src="/color-ful/img/javaee/image-20210113170522585.png" alt="image-20210113170522585"></p><p><font color="cornflowerblue">4.使用dom4j读取xml文件</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> DocumentException </span>&#123;<br>    <span class="hljs-comment">//创建一个SAXReader输入流，读取xml文件，生成Document对象</span><br>    SAXReader saxReader = <span class="hljs-keyword">new</span> SAXReader();<br>    Document document = saxReader.read(<span class="hljs-string">&quot;xml\\book.xml&quot;</span>);<br>    System.out.println(document);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="limegreen">结果：</font></p><p><img src="/color-ful/img/javaee/image-20210113171901151.png" alt="image-20210113171901151"></p><p><font color="cornflowerblue">5. 通过Document对象获取xml数据包装成实体类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//读取books.xml文件生成book类</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> DocumentException </span>&#123;<br>       <span class="hljs-comment">//1.读取book.xml文件</span><br>        SAXReader saxReader = <span class="hljs-keyword">new</span> SAXReader();<br>        Document document = saxReader.read(<span class="hljs-string">&quot;xml\\book.xml&quot;</span>);<br>        <span class="hljs-comment">//2.通过Document对象获取根元素</span><br>        Element rootElement = document.getRootElement();<br><br>        <span class="hljs-comment">//3.通过跟元素获取book标签对象</span><br>        <span class="hljs-comment">//element() 和 elements()都可以获取子元素，我们只需要根据子元素的多少选择用哪一个即可</span><br>        List&lt;Element&gt; books = rootElement.elements(<span class="hljs-string">&quot;book&quot;</span>);<br>        <span class="hljs-comment">//4.遍历，处理每个标签转换为Book类</span><br>        <span class="hljs-keyword">for</span> (Element book : books) &#123;<br>            <span class="hljs-comment">//asXML():将标签对象，转换为标签对应的字符串</span><br>           <span class="hljs-comment">// System.out.println(book.asXML());</span><br><br>            <span class="hljs-comment">//单独拿出name标签</span><br>            Element nameElement = book.element(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-comment">//System.out.println(nameElement.asXML());</span><br><br>            <span class="hljs-comment">// getText() 获取标签中的文本内容</span><br>            String nameText = nameElement.getText();<br>            <span class="hljs-comment">//System.out.println(nameText);</span><br><br>            <span class="hljs-comment">// 直接获取指定标签名的文本内容</span><br>            String priceText = book.elementText(<span class="hljs-string">&quot;price&quot;</span>);<br>            String authorText = book.elementText(<span class="hljs-string">&quot;author&quot;</span>);<br>            <span class="hljs-comment">//System.out.println(nameText+&quot;--&quot;+priceText+&quot;--&quot;+authorText);</span><br><br>            <span class="hljs-comment">// 获取属性</span><br>            String bid = book.attributeValue(<span class="hljs-string">&quot;bid&quot;</span>);<br><span class="hljs-comment">//            System.out.println(bid+&quot;--&quot;+nameText+&quot;--&quot;+priceText+&quot;--&quot;+authorText);</span><br>            System.out.println(<span class="hljs-keyword">new</span> Book(bid,nameText,priceText,authorText));<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaEE 二阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC</title>
    <link href="/color-ful/2020/01/17/2.JDBC/"/>
    <url>/color-ful/2020/01/17/2.JDBC/</url>
    
    <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="1-概述："><a href="#1-概述：" class="headerlink" title="1. 概述："></a>1. 概述：</h2><p>JDBC - Java DataBase Connectivity  Java数据库连接，更简单的说就是Java语言操作数据库。</p><p><img src="/color-ful/img/javaee/JDBC%E5%9B%BE%E8%A7%A3.png"></p><p>​        <font color="red"><strong>JDBC本质：其实是Sun公司定义的一套操作所有关系型数据库的规则，即接口，各个厂商去实现这套接口，提供数据库驱动Jar包，我们可以使用这套接口进行编程，真正执行的代码是数据库驱动中的实现类。</strong></font></p><p>​     其实这也是多态编程的优点：比如我调用了JDBC接口中的一个getName()方法，实际执行会根据不同的驱动，调用不同的方法。</p><h2 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2. 快速入门"></a>2. 快速入门</h2><p><strong>步骤：</strong></p><ol><li>导入驱动Jar包</li><li> 注册驱动，让程序知道我们用的是哪个版本的驱动</li><li>获取数据库连接对象 Connection</li><li>定义SQL</li><li>获取执行SQL语句的对象：Statement</li><li>执行SQL，接收返回结果</li><li>处理结果</li><li>释放资源</li></ol><p><font color="cornflowerblue">1. 创建一个空Project</font></p><p><font color="cornflowerblue">2. 在空项目中添加Module</font></p><p><img src="/color-ful/img/javaee/image-20210119001825356.png" alt="image-20210119001825356"></p><p> 选择<code>Java</code>项目</p><p><img src="/color-ful/img/javaee/image-20210119001926720.png" alt="image-20210119001926720"></p><p>选择存储路径</p><p><img src="/color-ful/img/javaee/image-20210119001952049.png" alt="image-20210119001952049"></p><p><font color="cornflowerblue">3. 在项目中新建包 和 对应的快速入门演示案例类</font></p><p><img src="/color-ful/img/javaee/image-20210119002328874.png" alt="image-20210119002328874"></p><p><font color="cornflowerblue">4. 导入驱动jar包</font></p><p>在项目中添加一个文件夹，将驱动包复制到该包中，右键—》 add as library…</p><p> <img src="/color-ful/img/javaee/image-20210119002703244.png" alt="image-20210119002703244"></p><p>接下来就是代码部分</p><p><font color="cornflowerblue"><strong>演示案例</strong></font></p><p>数据库：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> test CHARSET utf8;<br>USE test;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> student(<br>id <span class="hljs-type">INT</span>,#学号<br><span class="hljs-type">NAME</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),#姓名<br>age <span class="hljs-type">INT</span>,#年龄<br>sex <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">5</span>),#性别<br>address <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>),#地址<br>math <span class="hljs-type">INT</span>,#数学<br>english <span class="hljs-type">INT</span>#英语<br>);<br><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> student (id,<span class="hljs-type">NAME</span>,age,sex,address,math,english) <span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;马云&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;杭州&#x27;</span>,<span class="hljs-number">80</span>,<span class="hljs-number">80</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;马化腾&#x27;</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;深圳&#x27;</span>,<span class="hljs-number">75</span>,<span class="hljs-number">60</span>),<br>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;埃隆马斯克&#x27;</span>,<span class="hljs-number">31</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;美国&#x27;</span>,<span class="hljs-number">76</span>,<span class="hljs-number">93</span>),<br>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;扎克伯格&#x27;</span>,<span class="hljs-number">27</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;美国&#x27;</span>,<span class="hljs-number">65</span>,<span class="hljs-keyword">NULL</span>),<br>(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;郎平&#x27;</span>,<span class="hljs-number">16</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;上海&#x27;</span>,<span class="hljs-number">90</span>,<span class="hljs-number">98</span>),<br>(<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;姚明&#x27;</span>,<span class="hljs-number">32</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;上海&#x27;</span>,<span class="hljs-number">80</span>,<span class="hljs-number">81</span>);<br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> student;<br></code></pre></td></tr></table></figure><p>测试案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>         <span class="hljs-comment">//1. 注册驱动</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">//2.获取数据库连接对象</span><br>        Connection connection = DriverManager.getConnection(<br>                <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>,<br>                <span class="hljs-string">&quot;root&quot;</span>,<br>                <span class="hljs-string">&quot;root&quot;</span>);<br><br>        <span class="hljs-comment">//3.定义sql语句</span><br>        String sql = <span class="hljs-string">&quot;update student set english=90 where id = 4&quot;</span>;<br>        <span class="hljs-comment">//4获取执行sql的对象</span><br>        Statement statement = connection.createStatement();<br>        <span class="hljs-comment">//5.执行sql</span><br>        <span class="hljs-keyword">int</span> count = statement.executeUpdate(sql);<br>        <span class="hljs-comment">//6.处理结果</span><br>        System.out.println(count);<br><br>        <span class="hljs-comment">//7.释放资源</span><br>        statement.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-JDBC过程中的对象详解"><a href="#3-JDBC过程中的对象详解" class="headerlink" title="3. JDBC过程中的对象详解"></a>3. JDBC过程中的对象详解</h2><h3 id="3-1-Class-forName"><a href="#3-1-Class-forName" class="headerlink" title="3.1 Class.forName"></a>3.1 Class.forName</h3><p><font color="red">疑问：这行代码获取到Class对象，却又不用变量接收，这行代码有什么意义？</font></p><p>答：我们先去驱动包中找到Driver的源码</p><p><font color="cornflowerblue">源码截图</font></p><p><img src="/color-ful/img/javaee/image-20210119005452350.png" alt="image-20210119005452350"></p><p>​        JVM加载类的过程分为三步：<strong>加载，链接，初始化</strong>。</p><p>​        在初始化这步，会执行类构造器方法<code>clinit()</code>,而该方法是由变量的赋值动作 和 静态代码块的语句合并产生的。也就是说 <strong>类的加载器在加载指定的类的时候，如果该类结构中包含静态代码块，则会执行静态代码块中的代码</strong>。</p><p>​        因为JDBC的驱动有多种版本，所以JDBC规范中规定，所有驱动都必须向驱动管理器注册以区分各个版本。而<code>Driver</code>类 中只有一个无参构造 和 一个静态代码块，静态代码块中的内容 刚好就是 驱动向驱动管理器注册的代码。所以：<font color="red"><strong>Class.forName()的目的是加载Driver类的时候向驱动管理器注册自己。</strong></font></p><h3 id="3-2-DriverManager-驱动器管理对象"><a href="#3-2-DriverManager-驱动器管理对象" class="headerlink" title="3.2 DriverManager : 驱动器管理对象"></a>3.2 DriverManager : 驱动器管理对象</h3><p><strong>功能：</strong></p><ol><li><p>注册驱动（Class.forName()中已经解释）：MySql5之后的驱动Jar可以不注册驱动，它会自动帮我们注册。</p></li><li><p>获取数据库连接对象：</p><ul><li><p>方法：</p><p><strong>DriverManager.getConnection(“URL”, “用户名”, “密码”);</strong></p></li><li><p>参数：</p><ul><li><p>url：<font color="red">jdbc : mysql : // ip地址(域名):端口号 / 数据库名称</font></p><ul><li><p>注意：如果mysql是本机数据库且端口是默认端口3306，则可以将<code>ip地址(域名):端口号</code>部分省略</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">jdbc:</span>mysql:<span class="hljs-comment">///test</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>用户名：连接mysql的用户名</p></li><li><p>密码：对应的密码</p></li></ul></li></ul></li></ol><h3 id="3-3-Connection-数据库连接对象"><a href="#3-3-Connection-数据库连接对象" class="headerlink" title="3.3 Connection : 数据库连接对象"></a>3.3 Connection : 数据库连接对象</h3><p><strong>功能：</strong></p><pre><code> 1. 获取执行sql的对象 -  **Statement  createStatement()** - **PreparedStatement prepareStatement(String sql)**2. 管理事务：</code></pre><ul><li>开启事务：**void  setAutoCommit(boolean autoCommit)**：调用该方法，参数为false，即开启事务</li><li>提交事务：<strong>commit()</strong></li><li>回滚事务:  <strong>rollback()</strong></li></ul><h3 id="3-4-Statement-执行静态sql的对象"><a href="#3-4-Statement-执行静态sql的对象" class="headerlink" title="3.4 Statement : 执行静态sql的对象"></a>3.4 Statement : 执行静态sql的对象</h3><p><strong>功能：</strong></p><ol><li>执行 静态SQL 的对象<ul><li><strong>boolean execute(String sql)</strong> ：可以执行任意的sql （不常用）</li><li><strong>int executeUpdate(String sql)</strong> ：执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句<ul><li>返回值int为影响行数可以作为语句是否执行成功的判断标准：&gt;0 成功</li></ul></li><li><strong>ResultSet executeQuery(String sql)</strong>  ：执行DQL（select)语句</li></ul></li></ol><p><strong>练习：</strong></p><p>​    <font color="cornflowerblue">1. 给student表中增加一条记录</font> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 给student表中添加一条记录</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Statement statement = <span class="hljs-keyword">null</span>;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//注册驱动</span><br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            <span class="hljs-comment">//获取连接对象</span><br>           connection = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>            <span class="hljs-comment">//编写sql</span><br>            String sql = <span class="hljs-string">&quot;insert into student (id,name,age,sex,address,math,english) values(21,&#x27;呵呵&#x27;,18,&#x27;男&#x27;,&#x27;杭州&#x27;,80,80)&quot;</span>;<br>            <span class="hljs-comment">//获取执行sql的对象</span><br>            statement = connection.createStatement();<br>            <span class="hljs-comment">//执行sql</span><br>            <span class="hljs-keyword">int</span> count = statement.executeUpdate(sql);<br>            <span class="hljs-comment">//处理结果</span><br>            <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;添加成功&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;添加失败&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (statement != <span class="hljs-keyword">null</span>) &#123;<br>                        statement.close();<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>) &#123;<br>                        connection.close();<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException se) &#123;<br>                    se.printStackTrace();<br>                &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.修改student表中的数据<br></font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 修改表中的数据</span><br><span class="hljs-comment"> */</span><br>public class JdbcDemo3 &#123;<br>    public static void main(String[] args) &#123;<br>        Statement statement <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span>;<br>        Connection connection <span class="hljs-operator">=</span> <span class="hljs-keyword">null</span>;<br><br>        try &#123;<br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span>注册驱动<br>            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);<br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span>获取连接对象<br>            connection <span class="hljs-operator">=</span> DriverManager.getConnection(<br>                    &quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&quot;,<br>                    &quot;root&quot;,<br>                    &quot;root&quot;);<br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span>编写<span class="hljs-keyword">sql</span><br>            String <span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> &quot;update student set name =&#x27;丁磊&#x27; where id=20&quot;;<br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span>获取执行<span class="hljs-keyword">sql</span>的对象<br>            statement <span class="hljs-operator">=</span> connection.createStatement();<br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span>执行<span class="hljs-keyword">sql</span><br>            <span class="hljs-type">int</span> count <span class="hljs-operator">=</span> statement.executeUpdate(<span class="hljs-keyword">sql</span>);<br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span>处理结果<br>            if (count &gt; 0) &#123;<br>                System.out.println(&quot;修改成功&quot;);<br>            &#125; else &#123;<br>                System.out.println(&quot;修改失败&quot;);<br>            &#125;<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;finally &#123;<br>            try &#123;<br>                if (statement != null) &#123;<br>                    statement.close();<br>                &#125;<br>                if (connection != null) &#123;<br>                    connection.close();<br>                &#125;<br>            &#125; catch (SQLException se) &#123;<br>                se.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-5-ResultSet-结果集对象"><a href="#3-5-ResultSet-结果集对象" class="headerlink" title="3.5 ResultSet : 结果集对象"></a>3.5 ResultSet : 结果集对象</h3><p><strong>功能：</strong></p><ol><li><p><strong>next（）</strong>: 与Itrator迭代器的next（）功能类似，将游标移动到吓一条记录。 起始位置在表头位置，所以第一                次取数据需要先调用一次next（）。</p></li><li><p>**getXxx(参数)**：获取数据</p><ul><li>Xxx: 代表数据类型：比如 int getInt()</li><li>参数：<ul><li>int  :  代表列的编号，从1开始</li><li>String : 代表列名称：比如 getString(“name”)</li></ul></li></ul><p><font color="cornflowerblue"><strong>演示案例1：取一条记录</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询表中数据，并取一条记录</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Statement statement = <span class="hljs-keyword">null</span>;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        ResultSet resultSet = <span class="hljs-keyword">null</span>;<br>        <br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//注册驱动</span><br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            <span class="hljs-comment">//获取连接对象</span><br>            connection = DriverManager.getConnection(<br>                    <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&quot;</span>,<br>                    <span class="hljs-string">&quot;root&quot;</span>,<br>                    <span class="hljs-string">&quot;root&quot;</span>);<br>            <span class="hljs-comment">//编写sql</span><br>            String sql = <span class="hljs-string">&quot;select * from student&quot;</span>;<br>            <span class="hljs-comment">//获取执行sql的对象</span><br>            statement = connection.createStatement();<br>            <span class="hljs-comment">//执行sql</span><br>            resultSet = statement.executeQuery(sql);<br>            <span class="hljs-comment">//处理结果</span><br>            resultSet.next();<br>            String name = resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-keyword">int</span> age = resultSet.getInt(<span class="hljs-string">&quot;age&quot;</span>);<br>            System.out.println(name+<span class="hljs-string">&quot;--&quot;</span>+age);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (resultSet != <span class="hljs-keyword">null</span>) &#123;<br>                    resultSet.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (statement != <span class="hljs-keyword">null</span>) &#123;<br>                    statement.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>) &#123;<br>                    connection.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException se) &#123;<br>                se.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong><font color="cornflowerblue">演示案例2：遍历结果集</font></strong></p><p>​        通过查询API，我们看到 <strong>next()方法 的返回值为是否还有下一条数据：false:没有 true:有</strong>。那么我们就可以根据next方法的返回值来作为循环的条件，对结果集进行遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询表中数据，遍历结果集</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcDemo5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Statement statement = <span class="hljs-keyword">null</span>;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        ResultSet resultSet = <span class="hljs-keyword">null</span>;<br>        <br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//注册驱动</span><br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            <span class="hljs-comment">//获取连接对象</span><br>            connection = DriverManager.getConnection(<br>                    <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&quot;</span>,<br>                    <span class="hljs-string">&quot;root&quot;</span>,<br>                    <span class="hljs-string">&quot;root&quot;</span>);<br>            <span class="hljs-comment">//编写sql</span><br>            String sql = <span class="hljs-string">&quot;select * from student&quot;</span>;<br>            <span class="hljs-comment">//获取执行sql的对象</span><br>            statement = connection.createStatement();<br>            <span class="hljs-comment">//执行sql</span><br>            resultSet = statement.executeQuery(sql);<br>            <span class="hljs-comment">//处理结果</span><br><br>            <span class="hljs-keyword">while</span> (resultSet.next()) &#123;<br>                String name = resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-keyword">int</span> age = resultSet.getInt(<span class="hljs-string">&quot;age&quot;</span>);<br>                System.out.println(name+<span class="hljs-string">&quot;--&quot;</span>+age);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (resultSet != <span class="hljs-keyword">null</span>) &#123;<br>                    resultSet.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (statement != <span class="hljs-keyword">null</span>) &#123;<br>                    statement.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>) &#123;<br>                    connection.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException se) &#123;<br>                se.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><font color="cornflowerblue">演示案例3：查询Student表中所有数据，并将数据存储到集合中</font></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询Student表中数据，并将所有数据存入到集合中</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcDemo6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(findAll());<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Student&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;<br>        Statement statement = <span class="hljs-keyword">null</span>;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        ResultSet resultSet = <span class="hljs-keyword">null</span>;<br>        List&lt;Student&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//注册驱动</span><br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            <span class="hljs-comment">//获取连接对象</span><br>            connection = DriverManager.getConnection(<br>                    <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&quot;</span>,<br>                    <span class="hljs-string">&quot;root&quot;</span>,<br>                    <span class="hljs-string">&quot;root&quot;</span>);<br>            <span class="hljs-comment">//编写sql</span><br>            String sql = <span class="hljs-string">&quot;select * from student&quot;</span>;<br>            <span class="hljs-comment">//获取执行sql的对象</span><br>            statement = connection.createStatement();<br>            <span class="hljs-comment">//执行sql</span><br>            resultSet = statement.executeQuery(sql);<br>            <span class="hljs-comment">//处理结果集</span><br>            <span class="hljs-keyword">while</span> (resultSet.next()) &#123;<br>                <span class="hljs-keyword">int</span> id = resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>                String name = resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-keyword">int</span> age = resultSet.getInt(<span class="hljs-string">&quot;age&quot;</span>);<br>                String sex = resultSet.getString(<span class="hljs-string">&quot;sex&quot;</span>);<br>                String address = resultSet.getString(<span class="hljs-string">&quot;address&quot;</span>);<br>                <span class="hljs-keyword">int</span> math = resultSet.getInt(<span class="hljs-string">&quot;math&quot;</span>);<br>                <span class="hljs-keyword">int</span> english = resultSet.getInt(<span class="hljs-string">&quot;english&quot;</span>);<br>                <span class="hljs-comment">//封装对象</span><br>                Student student = <span class="hljs-keyword">new</span> Student(id, name, age, sex, address, math, english);<br>                list.add(student);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (resultSet != <span class="hljs-keyword">null</span>) &#123;<br>                    resultSet.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (statement != <span class="hljs-keyword">null</span>) &#123;<br>                    statement.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>) &#123;<br>                    connection.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException se) &#123;<br>                se.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-抽取JDBC工具类"><a href="#4-抽取JDBC工具类" class="headerlink" title="4. 抽取JDBC工具类"></a>4. 抽取JDBC工具类</h2><p><strong>目的：简化书写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  简化JDBC操作的工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCUtils</span> </span>&#123;<br>    <span class="hljs-comment">//配置文件中的键对应的属性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String user;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String password;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String url;<br><br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-comment">//在静态代码块中读取配置信息，可以减少读取次数</span><br>        <span class="hljs-comment">//读取配置文件</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.创建Properties对象</span><br>            Properties properties = <span class="hljs-keyword">new</span> Properties();<br>            <span class="hljs-comment">//2.加载文件</span><br>            ClassLoader classLoader = JDBCUtils.class.getClassLoader();<br>            InputStream resourceAsStream = classLoader.getResourceAsStream(<span class="hljs-string">&quot;jdbc.properties&quot;</span>);<br>            properties.load(resourceAsStream);<br><br><br>            <span class="hljs-comment">//获取值</span><br>            url = properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>            user = properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>            password = properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>            <span class="hljs-comment">//注册驱动</span><br>            Class.forName(properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  获取连接对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SQLException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-keyword">return</span> DriverManager.getConnection(url, user, password);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  释放资源(增删改)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stmt 执行sql语句对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> conn mysql连接对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(Statement stmt, Connection conn)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (stmt != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                stmt.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException se) &#123;<br>                se.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//两个异常处理不能写一起，因为一旦前面语句出现异常，会导致后面资源不能正确被释放造成资源浪费</span><br>        <span class="hljs-keyword">if</span> (conn != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException se) &#123;<br>                se.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  释放资源(查询)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stmt 执行sql语句对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> conn mysql连接对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rs 存储查询结果集的对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(Statement stmt, Connection conn, ResultSet rs)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (stmt != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                stmt.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException se) &#123;<br>                se.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (conn != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException se) &#123;<br>                se.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (rs != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException se) &#123;<br>                se.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>注意1：</strong></p><ol><li><p>抽取获取连接对象的方法时，如果使用用户传参的方式与实际代码中获取连接对象的代码一致，达不到简化效果，所以我们将url，user，password , driver 抽取到配置文件中</p><ol start="2"><li>配置文件信息的读取涉及到IO流，所以应该是次数越少越好，所以我们将读取配置文件 和 注册驱动这两步放在静态代码块中，这样随着类的加载，配置文件只需读取一次就可以有所有我们需要的信息。</li></ol></li></ol><p><font color="cornflowerblue"><strong>演示案例：JDBC工具类使用</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> org.wdzl.utils.JDBCUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JDBCUtils使用:查询Student表中id = 2 的学生信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcDemo7</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-comment">//获取连接对象</span><br>        Connection connection = JDBCUtils.getConnection();<br>        <span class="hljs-comment">//编写sql</span><br>        String sql = <span class="hljs-string">&quot;select * from student where id=2&quot;</span>;<br>        <span class="hljs-comment">//获取statement对象</span><br>        Statement statement = connection.createStatement();<br>        ResultSet resultSet = statement.executeQuery(sql);<br><br>        <span class="hljs-comment">//处理结果</span><br>        <span class="hljs-keyword">while</span> (resultSet.next()) &#123;<br>            System.out.println(resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>));<br>        &#125;<br><br>        <span class="hljs-comment">//释放资源</span><br>        JDBCUtils.close(statement,connection,resultSet);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue"><strong>演示案例2：模拟登陆</strong></font></p><p><strong>分析：</strong></p><pre><code>    1. 用户输入用户名，密码      2. 数据库查询是否有该信息   - 如果有,提示登录成功   - 如果没有，提示用户名或密码错误</code></pre><ol><li><p>数据库表准备</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> <span class="hljs-keyword">user</span>(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key  auto_increment,<br>username <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>password <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br><br>) <br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">values</span>(<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure></li><li><p>测试案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> org.wdzl.utils.JDBCUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  模拟用户登录</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcDemo8</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入用户名：&quot;</span>);<br>        String username = sc.next();<br>        System.out.println(<span class="hljs-string">&quot;请输入密码：&quot;</span>);<br>        String password = sc.next();<br>        <span class="hljs-comment">//登录</span><br>        <span class="hljs-keyword">boolean</span> flag = login(username, password);<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            System.out.println(<span class="hljs-string">&quot;登录成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;登录失败&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  登录方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password 密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">login</span><span class="hljs-params">(String username, String password)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-keyword">if</span> (username != <span class="hljs-keyword">null</span> &amp;&amp; password != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">//获取连接对象</span><br>            Connection connection = JDBCUtils.getConnection();<br>            String sql = <span class="hljs-string">&quot;select * from user where username=&#x27;&quot;</span> + username +<br>                    <span class="hljs-string">&quot;&#x27; and password = &#x27;&quot;</span> + password + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>            <span class="hljs-comment">//获取指定sql的对象</span><br>            Statement statement = connection.createStatement();<br>            <span class="hljs-comment">//执行sql</span><br>            ResultSet resultSet = statement.executeQuery(sql);<br>            <span class="hljs-comment">//判断</span><br>            <span class="hljs-keyword">return</span> resultSet.next();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="red"><strong>这个案例中有一个很大的BUG：</strong></font></p><p>​    在控制台输入密码时，我们这样输入，用户名 随便输</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">a<span class="hljs-string">&#x27;or&#x27;</span>a<span class="hljs-string">&#x27;=&#x27;</span>a<br></code></pre></td></tr></table></figure><p>最终即便是密码用户名不匹配，依旧可以登录成功！这就是我们常说的 <font color="cornflowerblue">SQL注入</font>。</p><p><strong>SQL注入：</strong></p><p>​    因为某些关键字参与SQL语句拼接导致出现安全问题。</p><p><strong>如何解决SQL注入：</strong></p><p>​    使用 PreparedStatement</p></li></ol><h2 id="5-PreparedStatement-执行动态sql的对象"><a href="#5-PreparedStatement-执行动态sql的对象" class="headerlink" title="5. PreparedStatement: 执行动态sql的对象"></a>5. PreparedStatement: 执行动态sql的对象</h2><p>​        Statement 对象执行的sql 是在编译期就确定的</p><p>​        而PreparedStatement 执行的sql语句中，参数使用<code>？</code>占位符替代，在执行时通过某些方法给相应的占位符赋值才能获得完整的的SQL语句。这样就有效的防止了SQL注入</p><p><strong>步骤：</strong></p><ol><li>导入驱动Jar包</li><li> 注册驱动，让程序知道我们用的是哪个版本的驱动</li><li>获取数据库连接对象 Connection</li><li>定义SQL,参数使用占位符</li><li>获取执行动态SQL语句的对象PreparedStatement  ：<strong>Connection.PreparedStatement(String sql)</strong></li><li>给<code>?</code>占位符赋值<ul><li>setXxx（参数1，参数2）<ul><li>参数1：<code>？</code>的位置编号，从1开始</li><li>参数2： <code>？</code>对应的值</li></ul></li></ul></li><li>执行SQL，接收返回结果,执行时不需要再传递sql语句</li><li>处理结果</li><li>释放资源</li></ol><p><font color="cornflowerblue"><strong>演示案例：改进登录代码</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  登录方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password 密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">login</span><span class="hljs-params">(String username, String password)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-keyword">if</span> (username != <span class="hljs-keyword">null</span> &amp;&amp; password != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">//获取连接对象</span><br>            Connection connection = JDBCUtils.getConnection();<br>            String sql = <span class="hljs-string">&quot;select * from user where username=? and password = ?&quot;</span>;<br>            System.out.println(sql);<br>            <span class="hljs-comment">//获取指定sql的对象</span><br>            PreparedStatement statement = connection.prepareStatement(sql);<br>            <span class="hljs-comment">//设置？的值</span><br>            statement.setString(<span class="hljs-number">1</span>, username);<br>            statement.setString(<span class="hljs-number">2</span>,password);<br>            <span class="hljs-comment">//执行sql</span><br>            ResultSet resultSet = statement.executeQuery();<br>            <span class="hljs-comment">//判断</span><br>            <span class="hljs-keyword">return</span> resultSet.next();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p><font color="red"><strong>后期开发我们都使用PreparedStatement。因为它可以防止SQL注入</strong></font></p><h2 id="6-JDBC-控制事务"><a href="#6-JDBC-控制事务" class="headerlink" title="6. JDBC 控制事务"></a>6. JDBC 控制事务</h2><h3 id="6-1-事务："><a href="#6-1-事务：" class="headerlink" title="6.1 事务："></a>6.1 事务：</h3><p>一个包含多个步骤的业务操作。如果这个业务被事务管理，则这多个步骤要么同时成功，要么同时失败。</p><h3 id="6-2-事务操作"><a href="#6-2-事务操作" class="headerlink" title="6.2 事务操作"></a>6.2 事务操作</h3><pre><code>1. 开启事务 2. 提交事务 3. 回滚事务</code></pre><h3 id="6-3-使用Connection对象管理事务"><a href="#6-3-使用Connection对象管理事务" class="headerlink" title="6.3 使用Connection对象管理事务"></a>6.3 使用Connection对象管理事务</h3><ol><li>开启事务：**void  setAutoCommit(boolean autoCommit)**：调用该方法，参数为false，即开启事务<ul><li>获取Connection对象后即可开启事务</li></ul></li><li>提交事务：<strong>commit()</strong><ul><li>所有sql语句执行完毕后即可提交事务</li></ul></li><li>回滚事务:  <strong>rollback()</strong><ul><li>只要捕获异常，就在catch中进行事务回滚</li></ul></li></ol><p><strong><font color="cornflowerblue">演示案例：JDBC控制事务</font></strong></p><ol><li><p>准备数据库表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> zhuanzhang(<br>NAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>),<br>money <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>)<br>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> zhuanzhang (NAME,money) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">1000</span>),(<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">1000</span>);<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> zhuanzhang;<br></code></pre></td></tr></table></figure></li><li><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> org.wdzl.utils.JDBCUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  JDBC 控制事务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcDemo10</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br><br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        PreparedStatement stmt1 = <span class="hljs-keyword">null</span>;<br>        PreparedStatement stmt2 = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取连接</span><br>            connection = JDBCUtils.getConnection();<br>            <span class="hljs-comment">//开启事务</span><br>            connection.setAutoCommit(<span class="hljs-keyword">false</span>);<br>            <span class="hljs-comment">//定义sql</span><br>            <span class="hljs-comment">//张三+500</span><br>            String sql1 = <span class="hljs-string">&quot;update zhuanzhang set money = money + ? where name = ?&quot;</span>;<br>            <span class="hljs-comment">//李四-500</span><br>            String sql2 = <span class="hljs-string">&quot;update zhuanzhang set money = money - ? where name = ?&quot;</span>;<br>            <span class="hljs-comment">//获取执行sql对象</span><br>            stmt1 = connection.prepareStatement(sql1);<br>            stmt2 = connection.prepareStatement(sql2);<br>            <span class="hljs-comment">//设置参数</span><br>            stmt1.setDouble(<span class="hljs-number">1</span>, <span class="hljs-number">500</span>);<br>            stmt1.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;张三&quot;</span>);<br><br>            stmt2.setDouble(<span class="hljs-number">1</span>, <span class="hljs-number">500</span>);<br>            stmt2.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;李四&quot;</span>);<br>            <span class="hljs-comment">//执行更新</span><br>            stmt1.execute();<span class="hljs-comment">//更新操作不能使用executeQuery()方法</span><br>            <span class="hljs-comment">//int a = 3 / 0;手动添加异常</span><br>            stmt2.execute();<br><br>            <span class="hljs-comment">//提交事务</span><br>            connection.commit();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>) &#123;<br>                connection.rollback();<br>            &#125;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//释放资源</span><br>            JDBCUtils.close(stmt1, connection);<br>            JDBCUtils.close(stmt2, <span class="hljs-keyword">null</span>);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="7-数据库连接池"><a href="#7-数据库连接池" class="headerlink" title="7. 数据库连接池"></a>7. 数据库连接池</h2><p>数据库连接池类似于多线程种的线程池。</p><p><strong>概述：</strong></p><p>​    数据库连接池就是一个容器，存放了一些数据库连接对象。</p><p>​    当系统初始化完成后，容器被创建，容器会申请一些连接对象，当用户访问数据库时，从容器中获取连接对象即可。访问完之后，会将连接对象归还给连接池。这样做可以提高效率，提高连接对象的复用，不必频繁的创建和释放连接对象。</p><p><strong>实现：</strong></p><p>​    Java中提供了一个接口：<code>javax . sql . DataSource</code>。该接口是连接池技术的规范，具体实现由数据库厂商实现。该接口中定义了两个方法：</p><ul><li>​    方法：<ul><li>获取连接：getConnection()</li><li>归还连接：close() 。如果连接对象是从连接池中获得，那么调用Connection.close()将不再关闭连接，而                    是归还连接。</li></ul></li><li>连接池技术实现<ul><li>C3P0 ：数据库连接池技术</li><li>Druid: 由阿里巴巴提供的数据库连接池技术</li></ul></li></ul><h3 id="7-1-C3P0连接池"><a href="#7-1-C3P0连接池" class="headerlink" title="7.1 C3P0连接池"></a>7.1 C3P0连接池</h3><p><strong>步骤:</strong></p><ol><li><strong>导入Jar包</strong><ul><li>c3p0-0.9.5.2.jar</li><li>mchange-commons-java-0.2.12.jar</li></ul></li><li><strong>定义配置文件</strong>：<ul><li>规定名称：c3p0.properties 或者 c3p0-config.xml</li><li>规定路径：放在src目录下</li></ul></li><li><strong>创建核心对象</strong> ：数据库连接池对象 ComboPooledDataSource</li><li> <strong>获取连接</strong>： getConnection</li></ol><p><font color="cornflowerblue"><strong>演示案例：入门案例</strong></font></p><ol><li>新建一个Module ,在Module中新建lib目录，将jar包拷贝的lib中，将配置文件拷贝到src下。<font color="red">不要忘记还有mysql连接驱动jar包</font></li></ol><p><img src="/color-ful/img/javaee/image-20210119183607448.png" alt="image-20210119183607448"></p><ol start="2"><li> 查看配置文件 c3p0-config.xml</li></ol><p><img src="/color-ful/img/javaee/image-20210119184000473.png" alt="image-20210119184000473"></p><ol start="3"><li> 创建包和相应的演示案例类</li></ol><p><img src="/color-ful/img/javaee/image-20210119185248491.png" alt="image-20210119185248491"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wdzl.datasource.c3p0;<br><br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  C3P0演示案例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C3P0Demo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>         <span class="hljs-comment">//1.创建数据库连接池对象</span><br>        DataSource dataSource = <span class="hljs-keyword">new</span> ComboPooledDataSource();<br>        <span class="hljs-comment">//2. 获取连接对象</span><br>        Connection connection = dataSource.getConnection();<br>        <span class="hljs-comment">//3. 查看连接对象</span><br>        System.out.println(connection);<br><span class="hljs-comment">//打印出对象信息就表示创建成功。</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue"><strong>演示案例：配置参数演示</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wdzl.datasource.c3p0;<br><br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  C3P0 配置参数演示案例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C3P0Demo2</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     验证 最大连接数 和 等待时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>         <span class="hljs-comment">//1.创建数据库连接池对象</span><br>        DataSource dataSource = <span class="hljs-keyword">new</span> ComboPooledDataSource();<br>        <span class="hljs-comment">//2. 获取连接对象：通过循环获取11个，前10个都能获取，第11个等待3秒就会报错</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">11</span>; i++) &#123;<br>            Connection connection = dataSource.getConnection();<br>            System.out.println(i+<span class="hljs-string">&quot; &quot;</span>+connection);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">      验证 连接池的连接会被归还</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-comment">//1.创建数据库连接池对象</span><br>        DataSource dataSource = <span class="hljs-keyword">new</span> ComboPooledDataSource();<br>        <span class="hljs-comment">//2. 获取连接对象：通过循环获取11个，前10个都能获取，第11个等待3秒就会报错</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">11</span>; i++) &#123;<br>            Connection connection = dataSource.getConnection();<br>            System.out.println(i+<span class="hljs-string">&quot; &quot;</span>+connection);<br><br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;<br>                connection.close();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     指定配置信息:如果new ComboPooledDataSource()方法不传参数，则默认使用配置文件中的default-config</span><br><span class="hljs-comment">     如果指定字符串，使用指定名称的配置信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-comment">//1.创建数据库连接池对象</span><br>        DataSource dataSource = <span class="hljs-keyword">new</span> ComboPooledDataSource(<span class="hljs-string">&quot;otherc3p0&quot;</span>);<br>        <span class="hljs-comment">//2. 获取连接对象：通过循环获取11个，前10个都能获取，第11个等待3秒就会报错</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>            Connection connection = dataSource.getConnection();<br>            System.out.println(i+<span class="hljs-string">&quot; &quot;</span>+connection);<br>            &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-2-Druid-连接池-目前公认最先进的连接池技术"><a href="#7-2-Druid-连接池-目前公认最先进的连接池技术" class="headerlink" title="7.2 Druid 连接池 - 目前公认最先进的连接池技术"></a>7.2 Druid 连接池 - 目前公认最先进的连接池技术</h3><p><strong>步骤：</strong></p><ol><li>导包：druid-1.0.9.jar</li><li>定义配置文件：<ul><li>是properties形式的<pre><code>  * 可以叫任意名称，可以放在任意目录下</code></pre></li></ul></li><li>加载配置文件：<strong>Properties</strong></li><li>获取数据库连接池对象：通过工厂来来获取  <strong>DruidDataSourceFactory</strong></li><li>获取连接：getConnection</li></ol><p><font color="cornflowerblue"><strong>演示案例：</strong></font></p><ol><li>将jar包拷入lib目录，将配置 <code>druid.properties</code> 文件拷贝到src下</li><li>创建包，在包中创建演示案例类</li></ol><p><img src="/color-ful/img/javaee/image-20210119192041962.png" alt="image-20210119192041962"></p><ol start="3"><li><p>测试案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wdzl.datasource.druid;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Druid 演示</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DruidDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>         <span class="hljs-comment">//加载配置文件</span><br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        InputStream resourceAsStream = DruidDemo1.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;druid.properties&quot;</span>);<br>        properties.load(resourceAsStream);<br><br>        <span class="hljs-comment">//获取连接池对象</span><br>        DataSource dataSource = DruidDataSourceFactory.createDataSource(properties);<br>        Connection connection = dataSource.getConnection();<br><br>        <span class="hljs-comment">//查看连接对象</span><br>        System.out.println(connection);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="7-3-定义Druid-工具类"><a href="#7-3-定义Druid-工具类" class="headerlink" title="7.3 定义Druid 工具类"></a>7.3 定义Druid 工具类</h3><p><strong>步骤：</strong></p><ol><li><p>定义一个工具类：JDBCUtils</p><ol start="2"><li>提供静态代码块，加载配置文件，初始化连接池对象</li><li>提供方法</li></ol><ul><li>获取连接的方法：</li><li>释放资源：</li><li>获取连接池的方法：因为有一些框架自己会通过连接池获取连接对象。所以也需要提供这样一个方法。</li></ul></li></ol><p><font color="cornflowerblue"><strong>演示案例：JDBCUtils工具类</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wdzl.datasource.utils;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><span class="hljs-keyword">import</span> com.mysql.jdbc.Statement;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Druid连接池工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCUtils</span> </span>&#123;<br>    <span class="hljs-comment">//成员变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DataSource dataSource;<br><br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 加载配置文件</span><br>            Properties properties = <span class="hljs-keyword">new</span> Properties();<br>            properties.load(JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;druid.properties&quot;</span>));<br>            <span class="hljs-comment">//2. 获取连接池对象</span><br>            dataSource = DruidDataSourceFactory.createDataSource(properties);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  获取连接对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 连接对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-keyword">return</span> dataSource.getConnection();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  释放资源</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stmt 执行sql的对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> conn 连接数据库的对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(Statement stmt, Connection conn)</span> </span>&#123;<br>         close(stmt,conn,<span class="hljs-keyword">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  释放资源</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stmt 执行sql的对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> conn 连接数据库的对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rs 查询结果集对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(Statement stmt, Connection conn, ResultSet rs)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (stmt != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                stmt.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (conn != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (rs != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  获取连接池对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 连接池对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DataSource <span class="hljs-title">getDataSource</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong><font color="cornflowerblue">演示案例2：使用工具类操作数据库</font></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  使用JDBC工具类操作数据库</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DruidDemo2</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">      向student表中添加一条数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-comment">//1. 获取连接</span><br>        Connection connection = JDBCUtils.getConnection();<br>        <span class="hljs-comment">//2.定义sql</span><br>        String sql = <span class="hljs-string">&quot;insert into student (id,name,age,sex,address,math,english)&quot;</span> +<br>                <span class="hljs-string">&quot; values(?,?,?,?,?,?,?)&quot;</span>;<br>        <span class="hljs-comment">//3. 获取执行sql的对象</span><br>        PreparedStatement pst = connection.prepareStatement(sql);<br>        <span class="hljs-comment">//4. 给占位符赋值</span><br>        pst.setInt(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>);<br>        pst.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;哈哈&quot;</span>);<br>        pst.setInt(<span class="hljs-number">3</span>, <span class="hljs-number">20</span>);<br>        pst.setString(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;女&quot;</span>);<br>        pst.setString(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;西安&quot;</span>);<br>        pst.setInt(<span class="hljs-number">6</span>,<span class="hljs-number">100</span>);<br>        pst.setInt(<span class="hljs-number">7</span>,<span class="hljs-number">100</span>);<br><br>        <span class="hljs-comment">//5.执行</span><br>        <span class="hljs-keyword">int</span> count = pst.executeUpdate();<br>        System.out.println(count);<br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="8-Spring-JDBCTemplate"><a href="#8-Spring-JDBCTemplate" class="headerlink" title="8. Spring -JDBCTemplate"></a>8. Spring -JDBCTemplate</h2><p><strong>概述：</strong></p><p>Spring框架 对JDBC的简单封装，提供了一个JDBCTemplate对象，来简化JDBC的开发。</p><p><strong>步骤：</strong></p><ol><li><p>导包:Spring的5个jar包，mysql连接驱动包，Druid连接池jar包</p></li><li><p>创建JdbcTemplate对象。依赖于数据源DataSource</p></li><li><p>调用JdbcTemplate的方法来完成CRUD操作</p><ul><li><strong>update()</strong> : 执行DML语句。增，删，改语句。</li><li><strong>queryForMap()</strong>:查询结果，将结果封装为Map集合</li><li><strong>queryForList()</strong>:查询结果，将结果集封装为List集合</li><li>**query()**：查询结果，将结果封装为JavaBean对象</li><li><strong>queryForObject()</strong>:查询结果，将结果封装为对象</li></ul><p><font color="red">练习中会对上述方法进行详细说明</font></p></li></ol><p><strong><font color="cornflowerblue">入门案例：</font></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  JDBCTemplate 入门</span><br><span class="hljs-comment"> *  新项目中我们需要使用JDBCTemplate, 我们需要先添加Druid连接池的jar包和配置文件，添加JDBCUtiles工具类，才能使用JDBCTemplate。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCTemplateDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 创建JDBCTemplate对象</span><br>        JdbcTemplate template = <span class="hljs-keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());<br>        <span class="hljs-comment">//2.调用方法</span><br>        String sql = <span class="hljs-string">&quot;update student set sex=?,address=? where id=?&quot;</span>;<br>        <span class="hljs-comment">// 有几个？，就在update()方法中传几个参数即可。</span><br>        <span class="hljs-keyword">int</span> update = template.update(sql, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;太原&quot;</span>, <span class="hljs-number">20</span>);<br>        System.out.println(update);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>使用JDBCTemplate操作数据库只关心sql的编写 和 执行，其他的操作JDBCTemplate都会替我们完成。</strong></p><p><font color="cornflowerblue"><strong>演示案例：DML,DQL语句</strong></font></p><p><strong>需求：</strong>使用Student表，将Student实体类复制到当前工程中</p><pre><code>      1. 修改id为3 的学生数据，将 age改为 30     2. 添加一条记录    3. 删除刚才添加的记录    4. 查询id为3的记录，将其封装为Map集合    5. 查询所有记录，将其封装为List集合    6. 查询所有记录，将其封装为Student对象的List集合    7. 查询name=&quot;埃隆马斯克&quot; 的学生信息，并封装成Student对象</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.RowMapper;<br><span class="hljs-keyword">import</span> org.wdzl.datasource.utils.JDBCUtils;<br><span class="hljs-keyword">import</span> org.wdzl.pojo.Student;<br><br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  JDBCTemplate 入门</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCTemplateDemo2</span> </span>&#123;<br>    <span class="hljs-comment">//方便使用</span><br>    <span class="hljs-keyword">private</span>  JdbcTemplate template = <span class="hljs-keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        修改id为3 的学生数据，将 age改为 30</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1.获取连接对象</span><br><span class="hljs-comment">//        JdbcTemplate template = new JdbcTemplate(JDBCUtils.getDataSource());</span><br>        <span class="hljs-comment">//2.编写sql</span><br>        String sql = <span class="hljs-string">&quot;update student set age=? where id=?&quot;</span>;<br>        <span class="hljs-comment">//3.执行sql，给占位符赋值</span><br>        <span class="hljs-keyword">int</span> update = template.update(sql, <span class="hljs-number">30</span>, <span class="hljs-number">3</span>);<br>        System.out.println(update);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    添加一条记录</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//2.编写sql</span><br>        String sql = <span class="hljs-string">&quot;insert into student values(?,?,?,?,?,?,?)&quot;</span>;<br>        <span class="hljs-comment">//3. 执行</span><br>        <span class="hljs-keyword">int</span> update = template.update(sql, <span class="hljs-number">22</span>, <span class="hljs-string">&quot;刘德华&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;香港&quot;</span>, <span class="hljs-number">80</span>, <span class="hljs-number">75</span>);<br>        System.out.println(update);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     删除刚添加的记录</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;delete from student where id=?&quot;</span>;<br>        <span class="hljs-keyword">int</span> update = template.update(sql, <span class="hljs-number">22</span>);<br>        System.out.println(update);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    查询id为3的记录，将其封装为Map集合</span><br><span class="hljs-comment">    queryForMap():将记录的字段名作为键，字段值作为值封装到map集合中。</span><br><span class="hljs-comment">    map格式 ： 字段名 = 字段值</span><br><span class="hljs-comment">    注意： 结果集长度只能是1 超过则会报错</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;select * from student where id=?&quot;</span>;<br>        Map&lt;String, Object&gt; map = template.queryForMap(sql, <span class="hljs-number">3</span>);<br><span class="hljs-comment">//        String sql = &quot;select * from student where id=? or id=?&quot;;</span><br><span class="hljs-comment">//        Map&lt;String, Object&gt; map = template.queryForMap(sql, 3,4);//报错，因为记录超过两条</span><br>        System.out.println(map);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     查询所有记录，将其封装为List集合</span><br><span class="hljs-comment">     queryForList():将每一条记录封装到map集合，再把每一条记录的map集合存入list集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;select * from student&quot;</span>;<br>        List&lt;Map&lt;String, Object&gt;&gt; maps = template.queryForList(sql);<br>        <span class="hljs-keyword">for</span> (Map&lt;String, Object&gt; map : maps) &#123;<br>            System.out.println(map);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        查询所有记录，将其封装为Student对象的List集合--方式1</span><br><span class="hljs-comment">        template.query(sql, new RowMapper&lt;Student&gt;() &#123;mapRow()&#125;);</span><br><span class="hljs-comment">        该方法需要自己实现一个接口，每查询一条记录就会执行一次接口里面的mapRow()方法，将结果进行封装</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;select * from student&quot;</span>;<br><br>        List&lt;Student&gt; students = template.query(sql, <span class="hljs-keyword">new</span> RowMapper&lt;Student&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">mapRow</span><span class="hljs-params">(ResultSet resultSet, <span class="hljs-keyword">int</span> i)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>                <span class="hljs-keyword">int</span> id = resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>                String name = resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-keyword">int</span> age = resultSet.getInt(<span class="hljs-string">&quot;age&quot;</span>);<br>                String sex = resultSet.getString(<span class="hljs-string">&quot;sex&quot;</span>);<br>                String address = resultSet.getString(<span class="hljs-string">&quot;address&quot;</span>);<br>                <span class="hljs-keyword">int</span> math = resultSet.getInt(<span class="hljs-string">&quot;math&quot;</span>);<br>                <span class="hljs-keyword">int</span> english = resultSet.getInt(<span class="hljs-string">&quot;english&quot;</span>);<br>                Student student = <span class="hljs-keyword">new</span> Student(id, name, age, sex, address, math, english);<br>                <span class="hljs-keyword">return</span> student;<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">//遍历集合</span><br>        <span class="hljs-keyword">for</span> (Student student : students) &#123;<br>            System.out.println(student);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">       查询所有记录，将其封装为Student对象的List集合-方式2</span><br><span class="hljs-comment">       template.query(sql,new BeanPropertyRowMapper&lt;实体类&gt;(实体类.class))</span><br><span class="hljs-comment">       注意：如果用方式2，你的实体类中属性的基本数据类型一定要定义成包装类型，否则如果你的查询记录中有null的话 会报错，因为</span><br><span class="hljs-comment">       基本数据类型中不能存null</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6_2</span><span class="hljs-params">()</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;select * from student&quot;</span>;<br><br>        List&lt;Student&gt; students = template.query(sql,<span class="hljs-keyword">new</span> BeanPropertyRowMapper&lt;Student&gt;(Student.class));<br><br>        <span class="hljs-comment">//遍历集合</span><br>        <span class="hljs-keyword">for</span> (Student student : students) &#123;<br>            System.out.println(student);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    查询name=&quot;埃隆马斯克&quot; 的学生信息，并封装成Student对象</span><br><span class="hljs-comment">    queryForObject(sql,new BeanPropertyRowMapper&lt;&gt;(封装的实体类.class),参数)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test7</span><span class="hljs-params">()</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;select * from student where name=?&quot;</span>;<br>        Student student = template.queryForObject(sql, <span class="hljs-keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Student.class),<span class="hljs-string">&quot;埃隆马斯克&quot;</span>);<br>        System.out.println(student);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaEE 二阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDBC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二阶段练习项目：图书管理系统</title>
    <link href="/color-ful/2020/01/17/4.%E4%BA%8C%E9%98%B6%E6%AE%B5%E9%A1%B9%E7%9B%AE-%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <url>/color-ful/2020/01/17/4.%E4%BA%8C%E9%98%B6%E6%AE%B5%E9%A1%B9%E7%9B%AE-%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="二阶段项目-图书管理系统"><a href="#二阶段项目-图书管理系统" class="headerlink" title="二阶段项目-图书管理系统"></a>二阶段项目-图书管理系统</h1><h2 id="1-三层架构"><a href="#1-三层架构" class="headerlink" title="1. 三层架构"></a>1. 三层架构</h2><p>三层架构也是软件设计架构，与MVC类似，学习完三层架构，再结合MVC就可以写出比较标准的代码。</p><p>三层架构将软件分为了三层：</p><ol><li>表示层：用户看到的界面。用户可以通过界面上的组件 和 服务器进行交互</li><li>业务逻辑层：用来处理业务逻辑。不做具体实现，</li><li>数据访问层：操作数据存储文件。</li></ol><p><font color="cornflowerblue"><strong>图解：三层架构</strong></font></p><p><img src="/color-ful/img/javaee/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84.png"></p><h2 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h2><h3 id="2-1创建数据库"><a href="#2-1创建数据库" class="headerlink" title="2.1创建数据库"></a>2.1创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE bookManager CHARSET utf8;<br><br>USE bookManager;<br><br><span class="hljs-comment">-- 用户表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">USER</span>(<br>u_id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT, <span class="hljs-comment">-- 用户id</span><br>username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<span class="hljs-comment">-- 用户名</span><br>PASSWORD <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<span class="hljs-comment">-- 密码</span><br>gender <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<span class="hljs-comment">-- 性别</span><br>birthday <span class="hljs-type">DATE</span>,<span class="hljs-comment">-- 生日</span><br>address <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">300</span>),<span class="hljs-comment">-- 地址</span><br>email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<span class="hljs-comment">-- 邮箱</span><br>head_portrait <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">300</span>) <span class="hljs-comment">-- 头像</span><br>);<br><br><span class="hljs-comment">-- 书籍表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> book(<br>b_id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<span class="hljs-comment">-- 书籍id</span><br>b_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<span class="hljs-comment">-- 书籍名称</span><br>b_author <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<span class="hljs-comment">-- 书籍作者</span><br>b_intro <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">500</span>),<span class="hljs-comment">-- 书籍简介</span><br>b_inventory <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-comment">-- 书籍库存</span><br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> borrow_books(<br>u_id  <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, <span class="hljs-comment">-- 用户id 外键</span><br>b_id  <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, <span class="hljs-comment">-- 书籍id 外键</span><br>borrow_date <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, <span class="hljs-comment">-- 借出时间</span><br>return_date <span class="hljs-type">DATE</span>, <span class="hljs-comment">-- 归还时间</span><br>item_status <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> , <span class="hljs-comment">-- 状态：0 正在进行，1 已完成</span><br><br><span class="hljs-keyword">CONSTRAINT</span> user_bb_fk <span class="hljs-keyword">FOREIGN</span> KEY(u_id) <span class="hljs-keyword">REFERENCES</span> <span class="hljs-keyword">USER</span>(u_id),<br><span class="hljs-keyword">CONSTRAINT</span> book_bb_fk <span class="hljs-keyword">FOREIGN</span> KEY(b_id) <span class="hljs-keyword">REFERENCES</span> book(b_id)<br><br>);<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue"><strong>图示：3张表的关系图</strong></font></p><p><img src="/color-ful/img/javaee/image-20210126120209284.png" alt="image-20210126120209284"></p><h3 id="2-2-创建项目"><a href="#2-2-创建项目" class="headerlink" title="2.2 创建项目"></a>2.2 创建项目</h3><p><font color="cornflowerblue"><strong>1.按照下图创建项目结构</strong></font></p><p><img src="/color-ful/img/javaee/image-20210126120613932.png" alt="image-20210126120613932"></p><p><font color="cornflowerblue"><strong>2.导入支持库，配置文件，jar包</strong></font></p><p><img src="/color-ful/img/javaee/image-20210126121241682.png" alt="image-20210126121241682"></p><p><font color="cornflowerblue"><strong>3.将静态页面，js，css导入工程</strong></font></p><p><img src="/color-ful/img/javaee/image-20210126144227900.png" alt="image-20210126144227900"></p><h2 id="3-书籍列表查询"><a href="#3-书籍列表查询" class="headerlink" title="3. 书籍列表查询"></a>3. 书籍列表查询</h2><ol><li><strong>将静态页面<code>index.html</code>内容拷贝到 <code>index.jsp</code>页面中</strong></li><li><strong>将跳转路径修改为对应业务的servlet</strong></li></ol><p><img src="/color-ful/img/javaee/image-20210126155547345.png" alt="image-20210126155547345"></p><ol start="3"><li><p><strong>创建对应servlet，但是因为没有service 对应的类，所以创建之后先放在这里，稍后再实现功能</strong></p><p><img src="/color-ful/img/javaee/image-20210126160249189.png" alt="image-20210126160249189"></p></li><li><p><strong>分别创建dao层接口 和 service层接口 并实现对应接口</strong></p><p><font color="cornflowerblue">4.1 dao层</font></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  与书籍有关的数据库操作接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookDao</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  查询所有书籍的方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">List&lt;Book&gt; <span class="hljs-title">findAllBooks</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BookDao</span> </span>&#123;<br>    <span class="hljs-comment">//创建JDBCTemplate对象</span><br>  <span class="hljs-keyword">private</span> JdbcTemplate template = <span class="hljs-keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());<br>  <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title">findAllBooks</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">//编写sql</span><br>        String sql = <span class="hljs-string">&quot;select * from book&quot;</span>;<br>        <span class="hljs-comment">//执行</span><br>        List&lt;Book&gt; books = template.query(sql, <span class="hljs-keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Book.class));<br><br>        <span class="hljs-keyword">return</span> books;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​    <font color="cornflowerblue">4,2 service层</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 与书籍有关业务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookService</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  查询所有书籍列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">List&lt;Book&gt; <span class="hljs-title">findAllBooks</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BookService</span> </span>&#123;<br>    <span class="hljs-comment">//创建dao层对象</span><br>    BookDao bookDao = <span class="hljs-keyword">new</span> BookDaoImpl();<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title">findAllBooks</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">return</span> bookDao.findAllBooks();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li><strong>再回到servlet中。</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/bookListServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookListServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-comment">//创建service层</span><br>    BookService bookService = <span class="hljs-keyword">new</span> BookServiceImpl();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//创建service层</span><br>        BookService bookService = <span class="hljs-keyword">new</span> BookServiceImpl();<br>        <span class="hljs-comment">//调用方法完成功能</span><br>        List&lt;Book&gt; allBooks = bookService.findAllBooks();<br>        <span class="hljs-comment">//将list存入request域中</span><br>        req.setAttribute(<span class="hljs-string">&quot;allBooks&quot;</span>, allBooks);<br>        <span class="hljs-comment">//转发</span><br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/list.jsp&quot;</span>).forward(req,resp);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="6"><li><strong>将<code>list.html</code>中的内容复制到 <code>list.jsp</code>中</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br>&lt;html lang=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;!-- 指定字符集 --&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>    &lt;!-- 使用Edge最新的浏览器的渲染方式 --&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;<br>    &lt;!-- viewport视口：网页可以根据设置的宽度自动进行适配，在浏览器的内部虚拟一个容器，容器的宽度与设备的宽度相同。<br>    width: 默认宽度与设备的宽度相同<br>    initial-scale: 初始的缩放比，为<span class="hljs-number">1</span>:<span class="hljs-number">1</span> --&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;<br>    &lt;!-- 上述<span class="hljs-number">3</span>个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;<br>    &lt;title&gt;用户信息管理系统&lt;/title&gt;<br><br>    &lt;!-- <span class="hljs-number">1.</span> 导入CSS的全局样式 --&gt;<br>    &lt;link href=<span class="hljs-string">&quot;css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>    &lt;!-- <span class="hljs-number">2.</span> jQuery导入，建议使用<span class="hljs-number">1.9</span>以上的版本 --&gt;<br>    &lt;script src=&quot;js/jquery-2.1.0.min.js&quot;&gt;&lt;/script&gt;<br>    &lt;!-- <span class="hljs-number">3.</span> 导入bootstrap的js文件 --&gt;<br>    &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt;<br>    &lt;style type=<span class="hljs-string">&quot;text/css&quot;</span>&gt;<br>        td, th &#123;<br>            text-align: center;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;jumbotron&quot;</span>&gt;<br>    &lt;h1&gt;啥都没有图书馆里系统&lt;/h1&gt;<br>    &lt;p&gt;Nothing Have Manager System&lt;/p&gt;<br><br>&lt;/div&gt;<br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    &lt;h3 style=&quot;text-align: center&quot;&gt;图书信息列表&lt;/h3&gt;<br>    &lt;table border=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;table table-bordered table-hover&quot;</span>&gt;<br>        &lt;tr <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;success&quot;</span>&gt;<br>            &lt;th&gt;编号&lt;/th&gt;<br>            &lt;th&gt;书名&lt;/th&gt;<br>            &lt;th&gt;作者&lt;/th&gt;<br>            &lt;th&gt;简介&lt;/th&gt;<br>            &lt;th&gt;库存&lt;/th&gt;<br>            &lt;th&gt;操作&lt;/th&gt;<br>        &lt;/tr&gt;<br>        &lt;c:forEach items=<span class="hljs-string">&quot;$&#123;allBooks&#125;&quot;</span> varStatus=<span class="hljs-string">&quot;s&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;book&quot;</span> &gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;$&#123;book.b_id&#125;&lt;/td&gt;<br>                &lt;td&gt;$&#123;book.b_name&#125;&lt;/td&gt;<br>                &lt;td&gt;$&#123;book.b_author&#125;&lt;/td&gt;<br>                &lt;td&gt;$&#123;book.b_intro&#125;&lt;/td&gt;<br>                &lt;td&gt;$&#123;book.b_inventory&#125;&lt;/td&gt;<br>                &lt;td&gt;&lt;a class=&quot;btn btn-default btn-sm&quot; href=&quot;update.html&quot;&gt;修改&lt;/a&gt;&amp;nbsp;<br>                    &lt;a class=&quot;btn btn-default btn-sm&quot; href=&quot;&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;<br>            &lt;/tr&gt;<br>        &lt;/c:forEach&gt;<br><br>        &lt;tr&gt;<br>            &lt;td colspan=&quot;8&quot; align=&quot;center&quot;&gt;&lt;a class=&quot;btn btn-primary&quot; href=&quot;add.html&quot;&gt;添加书籍&lt;/a&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/table&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br><br></code></pre></td></tr></table></figure><h2 id="4-登录功能"><a href="#4-登录功能" class="headerlink" title="4.  登录功能"></a>4.  登录功能</h2><ol><li><p><strong>将CheckCodeServlet拷贝到项目中，并将存储到session中的变量名改成realCode</strong></p></li><li><p><strong>UserDao 和 UserDaoImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  与用户有关的数据库操作接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-function">User <span class="hljs-title">findUserByNameAndPassword</span><span class="hljs-params">(String userName, String password)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 与用户有关的数据库操作接口的实现类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> JdbcTemplate template = <span class="hljs-keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  根据用户名和密码查询用户信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userName 用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password 密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 用户对象，如果不存在则返回null</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">findUserByNameAndPassword</span><span class="hljs-params">(String userName, String password)</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;select * from user where username=? and password = ?&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            User user = template.queryForObject(sql, <span class="hljs-keyword">new</span> BeanPropertyRowMapper&lt;&gt;(User.class), userName, password);<br>            <span class="hljs-keyword">return</span> user;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><strong>UserService 和 UserServiceImpl</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  与用户有关的业务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  用户登录的业务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userName 用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password 密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 用户对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">User <span class="hljs-title">login</span><span class="hljs-params">(String userName, String password)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @author lp</span><br><span class="hljs-comment"> * @version 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">UserService</span></span> </span>&#123;<br>    UserDao userDao = <span class="hljs-keyword">new</span> <span class="hljs-type">UserDaoImpl</span>();<br>    @Override<br>    <span class="hljs-keyword">public</span> User login(<span class="hljs-keyword">String</span> userName, <span class="hljs-keyword">String</span> password) &#123;<br>        <span class="hljs-keyword">return</span> userDao.findUserByNameAndPassword(userName,password);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li><strong>LoginServlet</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/loginServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-comment">//创建service层</span><br>    UserService userService = <span class="hljs-keyword">new</span> UserServiceImpl();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//设置编码集</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-comment">//校验验证码</span><br>        String checkCode = req.getParameter(<span class="hljs-string">&quot;checkCode&quot;</span>);<br>        HttpSession session = req.getSession();<br>        String checkCode2 = (String) session.getAttribute(<span class="hljs-string">&quot;realCode&quot;</span>);<br>        <span class="hljs-comment">//确保验证码一次性</span><br>        session.removeAttribute(<span class="hljs-string">&quot;realCode&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!checkCode2.equalsIgnoreCase(checkCode)) &#123; <span class="hljs-comment">//验证码不正确</span><br>            <span class="hljs-comment">//给出提示信息</span><br>            req.setAttribute(<span class="hljs-string">&quot;login_msg&quot;</span>, <span class="hljs-string">&quot;验证码错误&quot;</span>);<br>            <span class="hljs-comment">//跳转页面</span><br>            req.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(req, resp);<br>            <span class="hljs-comment">//结束</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//获取数据</span><br>        String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        String password = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-comment">//查询用户</span><br>        User loginUser = userService.login(username, password);<br>        <span class="hljs-comment">//判断</span><br>        <span class="hljs-keyword">if</span> (loginUser != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">//登录成功</span><br>            session.setAttribute(<span class="hljs-string">&quot;user&quot;</span>, loginUser);<br>            <span class="hljs-comment">//跳转：没有共享数据，所以直接重定向</span><br>            resp.sendRedirect(req.getContextPath()+<span class="hljs-string">&quot;/index.jsp&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//登录失败</span><br>            <span class="hljs-comment">//给出提示信息</span><br>            req.setAttribute(<span class="hljs-string">&quot;login_msg&quot;</span>, <span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>            <span class="hljs-comment">//跳转页面</span><br>            req.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(req, resp);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>写好之后记得复制静态页面内到JSP页面中，并修改里面的内容</li></ol><p><font color="cornflowerblue">login.jsp:</font></p><ol><li>form 提交跳转路径</li><li>验证码获取路径</li><li>错误提示信息使用if选择结构包裹</li></ol></li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br>&lt;html lang=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>/&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span>/&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>/&gt;<br>    &lt;title&gt;用户登录&lt;/title&gt;<br><br>    &lt;!-- <span class="hljs-number">1.</span> 导入CSS的全局样式 --&gt;<br>    &lt;link href=<span class="hljs-string">&quot;css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>    &lt;!-- <span class="hljs-number">2.</span> jQuery导入，建议使用<span class="hljs-number">1.9</span>以上的版本 --&gt;<br>    &lt;script src=&quot;js/jquery-2.1.0.min.js&quot;&gt;&lt;/script&gt;<br>    &lt;!-- <span class="hljs-number">3.</span> 导入bootstrap的js文件 --&gt;<br>    &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    &lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;jumbotron&quot;</span>&gt;<br>    &lt;h1&gt;啥都没有图书馆里系统&lt;/h1&gt;<br>    &lt;p&gt;Nothing Have Manager System&lt;/p&gt;<br><br>&lt;/div&gt;<br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span> style=<span class="hljs-string">&quot;width: 400px;&quot;</span>&gt;<br>    &lt;h3 style=&quot;text-align: center;&quot;&gt;管理员登录&lt;/h3&gt;<br>    &lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/loginServlet&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>            &lt;label for=&quot;user&quot;&gt;用户名：&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control&quot;</span> id=<span class="hljs-string">&quot;user&quot;</span> placeholder=<span class="hljs-string">&quot;请输入用户名&quot;</span>/&gt;<br>        &lt;/div&gt;<br><br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;<br>            &lt;label for=&quot;password&quot;&gt;密码：&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control&quot;</span> id=<span class="hljs-string">&quot;password&quot;</span> placeholder=<span class="hljs-string">&quot;请输入密码&quot;</span>/&gt;<br>        &lt;/div&gt;<br><br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-inline&quot;</span>&gt;<br>            &lt;label for=&quot;code&quot;&gt;验证码：&lt;/label&gt;<br>            &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;checkCode&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-control&quot;</span> id=<span class="hljs-string">&quot;checkCode&quot;</span> placeholder=<span class="hljs-string">&quot;请输入验证码&quot;</span> style=<span class="hljs-string">&quot;width: 120px;&quot;</span>/&gt;<br>            &lt;a href=&quot;javascript:refreshCode()&quot;&gt;&lt;img src=&quot;$&#123;pageContext.request.contextPath&#125;/checkCode&quot; title=&quot;看不清点击刷新&quot; id=&quot;code&quot;/&gt;&lt;/a&gt;<br>        &lt;/div&gt;<br>        &lt;hr/&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-group&quot;</span> style=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;<br>            &lt;input <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn btn-primary&quot;</span> type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;登录&quot;</span>&gt;<br>        &lt;/div&gt;<br>    &lt;/form&gt;<br><br>    &lt;!-- 出错显示的信息框 --&gt;<br>    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;not empty login_msg&#125;&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;alert alert-warning alert-dismissible&quot;</span> role=<span class="hljs-string">&quot;alert&quot;</span>&gt;<br>            &lt;button type=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;close&quot;</span> data-dismiss=<span class="hljs-string">&quot;alert&quot;</span> &gt;<br>                &lt;span&gt;&amp;times;&lt;/span&gt;<br>            &lt;/button&gt;<br>            &lt;strong&gt;$&#123;requestScope.login_msg&#125;&lt;/strong&gt;<br>        &lt;/div&gt;<br>    &lt;/c:if&gt;<br><br>&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">index.jsp：</font></p><p>​    1. 添加用户信息的输出，并用<code>&lt;c:if&gt;</code>包裹</p><h2 id="5-添加书籍"><a href="#5-添加书籍" class="headerlink" title="5. 添加书籍"></a>5. 添加书籍</h2><ol><li><p><strong>修改list.jsp 中添加书籍的跳转路径，当点击添加书籍按钮时，跳转到add.jsp中</strong></p></li><li><p><strong>dao层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  与书籍有关的数据库操作接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookDao</span> </span>&#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  向数据库中添加book信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> book 添加的book对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功或者失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Book book)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BookDao</span> </span>&#123;<br>    <span class="hljs-comment">//创建JDBCTemplate对象</span><br>  <span class="hljs-keyword">private</span> JdbcTemplate template = <span class="hljs-keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  获取图书列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    略<br>  <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  向数据库中添加book信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> book 添加的book信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功或者失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Book book)</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;insert into book values(null,?,?,?,?)&quot;</span>;<br>        <span class="hljs-comment">//执行</span><br>        <span class="hljs-keyword">int</span> count = template.update(sql,<br>                book.getB_name(),<br>                book.getB_author(),<br>                book.getB_intro(),<br>                book.getB_inventory());<br>        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>service层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 与书籍有关的业务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookService</span> </span>&#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  向数据中添加书籍</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> book 添加的书籍对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功或失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Book book)</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BookService</span> </span>&#123;<br>    <span class="hljs-comment">//创建dao层对象</span><br>    BookDao bookDao = <span class="hljs-keyword">new</span> BookDaoImpl();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title">findAllBooks</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">return</span> bookDao.findAllBooks();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Book book)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bookDao.addBook(book);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><strong>addBookServlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/addBookServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddBookServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-comment">//创建service层</span><br>    UserService userService = <span class="hljs-keyword">new</span> UserServiceImpl();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//设置参数</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-comment">//获取数据</span><br>        Map&lt;String, String[]&gt; map = req.getParameterMap();<br>        <span class="hljs-keyword">for</span> (String key : map.keySet()) &#123;<br>            System.out.println(map.get(key));<br>        &#125;<br>        <span class="hljs-comment">//封装对象</span><br>        Book book = <span class="hljs-keyword">new</span> Book();<br>        <span class="hljs-keyword">try</span> &#123;<br>            BeanUtils.populate(book, map);<br>            System.out.println(book);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//调用service方法</span><br>        BookService bookService = <span class="hljs-keyword">new</span> BookServiceImpl();<br>        bookService.addBook(book);<br><br>        <span class="hljs-comment">//添加成功后跳转到书籍列表</span><br>        resp.sendRedirect(req.getContextPath()+<span class="hljs-string">&quot;/bookListServlet&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="6-删除功能"><a href="#6-删除功能" class="headerlink" title="6. 删除功能"></a>6. 删除功能</h2><ol><li><strong>找到list.jsp ，在foreach循环标签 找到删除按钮，修改跳转信息</strong></li></ol><p><img src="/color-ful/img/javaee/image-20210126223301276.png" alt="image-20210126223301276"></p><ol start="2"><li><p><strong>dao层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  与书籍有关的数据库操作接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookDao</span> </span>&#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据书籍id删除书籍</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 书籍b_id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteById</span><span class="hljs-params">(String id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BookDao</span> </span>&#123;<br>    <span class="hljs-comment">//创建JDBCTemplate对象</span><br>  <span class="hljs-keyword">private</span> JdbcTemplate template = <span class="hljs-keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteById</span><span class="hljs-params">(String id)</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;delete from book where b_id = ?&quot;</span>;<br>        template.update(sql, id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>service层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 与书籍有关的业务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookService</span> </span>&#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  根据id删除书籍</span><br><span class="hljs-comment">      * <span class="hljs-doctag">@param</span> id 书籍b_id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(String id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BookService</span> </span>&#123;<br>    <span class="hljs-comment">//创建dao层对象</span><br>    BookDao bookDao = <span class="hljs-keyword">new</span> BookDaoImpl();<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(String id)</span> </span>&#123;<br>        bookDao.deleteById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>deleteBookServlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/deleteBookServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeleteBookServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//获取参数</span><br>        String b_id = req.getParameter(<span class="hljs-string">&quot;b_id&quot;</span>);<br>        <span class="hljs-comment">//调用删除的方法</span><br>        BookService service = <span class="hljs-keyword">new</span> BookServiceImpl();<br>        service.delete(b_id);<br>        <span class="hljs-comment">//删完之后重新请求bookListServlet</span><br>        resp.sendRedirect(req.getContextPath()+<span class="hljs-string">&quot;/bookListServlet&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="red">优化：添加js ，在删除前给出确认提示</font></p><p>在list.jsp中，将删除跳转的路径改成跳转至js的方法</p><p><img src="/color-ful/img/javaee/image-20210126225605662.png" alt="image-20210126225605662"></p></li></ol><p>方法具体实现</p><p><img src="/color-ful/img/javaee/image-20210126225736485.png" alt="image-20210126225736485"></p><h2 id="7-修改图书"><a href="#7-修改图书" class="headerlink" title="7. 修改图书"></a>7. 修改图书</h2><p>​        修改功能和其他功能不一样，因为，当你点击修改功能时，需要页面中就有书籍的信息的回显。所以我们不能直接跳转到修改页面，而是先跳转servlet,在通过转发到</p><ol><li><p> <strong>将静态页面转换成jsp页面</strong></p></li><li><p><strong>在list.jsp中设置 ，将修改按钮跳转路径改为查询指定用户信息的servlet</strong></p><p>dao层  和 servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Book <span class="hljs-title">findBookById</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    String sql = <span class="hljs-string">&quot;select * from book where b_id=?&quot;</span>;<br>    Book book = template.queryForObject(sql, <span class="hljs-keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Book.class), id);<br>    <span class="hljs-keyword">return</span> book;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/findBookServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FindBookServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//获取信息</span><br>        String b_id = req.getParameter(<span class="hljs-string">&quot;b_id&quot;</span>);<br>        <span class="hljs-comment">//调用方法</span><br>        BookService bookService = <span class="hljs-keyword">new</span> BookServiceImpl();<br>        Book book = bookService.findBookById(b_id);<br><br>        req.setAttribute(<span class="hljs-string">&quot;book&quot;</span>, book);<br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/update.jsp&quot;</span>).forward(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li> <strong>修改 update.jsp 中 form表单的 action属性</strong></li></ol><p><img src="/color-ful/img/javaee/image-20210127003219881.png" alt="image-20210127003219881"></p><ol start="4"><li><strong>dao 层 和Servlet层</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Book book)</span> </span>&#123;<br>    String sql = <span class="hljs-string">&quot;update book set b_name=?,b_author=?,b_intro=?,b_inventory=? where b_id=?&quot;</span>;<br>    <span class="hljs-keyword">int</span> update = template.update(sql,<br>            book.getB_name(),<br>            book.getB_author(),<br>            book.getB_intro(),<br>            book.getB_inventory(),<br>            book.getB_id());<br>   <br>   <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/updateBookServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UpdateBookServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//设置编码集</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-comment">//获取参数</span><br>        Map&lt;String, String[]&gt; map = req.getParameterMap();<br>        <span class="hljs-comment">//封装对象</span><br>        Book book = <span class="hljs-keyword">new</span> Book();<br>        <span class="hljs-keyword">try</span> &#123;<br>            BeanUtils.populate(book, map);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//调用方法</span><br>        BookService bookService = <span class="hljs-keyword">new</span> BookServiceImpl();<br>        bookService.updateBook(book);<br>        <span class="hljs-comment">//重定向到图书列表</span><br>        resp.sendRedirect(req.getContextPath()+<span class="hljs-string">&quot;/bookListServlet&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="8-删除选中"><a href="#8-删除选中" class="headerlink" title="8. 删除选中"></a>8. 删除选中</h2><ol><li> <strong>因为form表单提交会自动提交被选择的条目，所以我们不必编写js只需要给table包裹一个大的form，当我们点击提交按钮时，让该表单提交即可</strong></li></ol><p><img src="/color-ful/img/javaee/image-20210127004842268.png" alt="image-20210127004842268"></p><ol start="2"><li><strong>我们需要在点击删除选中按钮后，提交该表单，我们给删除选中按钮绑定单击事件</strong></li></ol><p><img src="/color-ful/img/javaee/image-20210127005427561.png" alt="image-20210127005427561"></p><p>​    </p><p>​        编写对应的js</p><p>​    <img src="/color-ful/img/javaee/image-20210127005924613.png" alt="image-20210127005924613"></p><p>写完之后，可以先去页面尝试删除，虽然会报错，但是我们可以通过浏览器抓包工具看是否有对应的请求体数据</p><p><img src="/color-ful/img/javaee/image-20210127010057406.png" alt="image-20210127010057406"></p><ol start="3"><li><strong>编写service层 和 Servlet层，dao不必编写，因为我们可以调用之前写的方法</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BookService</span> </span>&#123;<br>    <span class="hljs-comment">//创建dao层对象</span><br>    BookDao bookDao = <span class="hljs-keyword">new</span> BookDaoImpl();<br><br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteAnyBooks</span><span class="hljs-params">(String[] b_ids)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (String b_id : b_ids) &#123;<br>            bookDao.deleteById(b_id);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/delSelectedServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeleteSelectedServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//获取批量删除书籍的id</span><br>        String[] b_ids = req.getParameterValues(<span class="hljs-string">&quot;b_id&quot;</span>);<br>        <span class="hljs-comment">//调用方法</span><br>        BookService service = <span class="hljs-keyword">new</span> BookServiceImpl();<br>        service.deleteAnyBooks(b_ids);<br>        <span class="hljs-comment">//重定向到书籍列表界面</span><br>        resp.sendRedirect(req.getContextPath()+<span class="hljs-string">&quot;/bookListServlet&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="9-分页查询"><a href="#9-分页查询" class="headerlink" title="9. 分页查询"></a>9. 分页查询</h2><p><strong>分析：</strong></p><p>​    根据已有的静态页面我们分析出，要完成分页显示，需要以下几个参数</p><ol><li>总记录数 （int totalCount） ：  服务器可以自行查出，不需要客户端传递数据</li><li>总页数 （int totalPage） ： 服务器无法自行完成，<font color="red">需要客户端传递数据：每页显示的条数（rows）</font><ul><li>totalPage = totalCount % 每页显示条数 == 0 ？totalCount / 每页显示条数 : ( totalCount /每页显示条数 )+1</li></ul></li><li>每页的数据（List list）</li><li>当前页码 （int currentPage）- <font color="red">需要客户端提供给服务器</font></li><li>分页查询语句 limit 开始索引，查几条：<ul><li>开始索引：<em><em>公式（currentPage-1）</em> 每页显示的条数</em>*</li><li>查几条： rows前面已经传递</li></ul></li></ol><p><strong>处理：</strong></p><p>​    根据分析出页面所要的元素，我们可以将这些属性封装到一个类中：PageBean 分页对象</p><p><strong><font color="cornflowerblue">peageBean</font></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wdzl.pojo;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 分页对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageBean</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> totalCount; <span class="hljs-comment">// 总记录数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> totalPage ; <span class="hljs-comment">// 总页码</span><br>    <span class="hljs-keyword">private</span> List&lt;T&gt; list ; <span class="hljs-comment">// 每页的数据</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> currentPage ; <span class="hljs-comment">//当前页码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> rows;<span class="hljs-comment">//每页显示的记录数</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getTotalCount</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> totalCount;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTotalCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span> totalCount)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.totalCount = totalCount;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getTotalPage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> totalPage;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTotalPage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> totalPage)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.totalPage = totalPage;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title">getList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setList</span><span class="hljs-params">(List&lt;T&gt; list)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCurrentPage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> currentPage;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCurrentPage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> currentPage)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.currentPage = currentPage;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getRows</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> rows;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRows</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rows)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.rows = rows;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;PageBean&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;totalCount=&quot;</span> + totalCount +<br>                <span class="hljs-string">&quot;, totalPage=&quot;</span> + totalPage +<br>                <span class="hljs-string">&quot;, list=&quot;</span> + list +<br>                <span class="hljs-string">&quot;, currentPage=&quot;</span> + currentPage +<br>                <span class="hljs-string">&quot;, rows=&quot;</span> + rows +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong><font color="red">分页流程图解：</font></strong></p><p><img src="/color-ful/img/javaee/image-20210127024959940.png" alt="image-20210127024959940"></p><p> 按着图解完成需求</p><p><font color="cornflowerblue"><strong>后端编写：</strong></font></p><ol><li>FindBookByPageServlet</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/findBookByPageServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FindBookByPageServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//获取参数</span><br>        String currentPage = req.getParameter(<span class="hljs-string">&quot;currentPage&quot;</span>);<br>        String rows = req.getParameter(<span class="hljs-string">&quot;rows&quot;</span>);<br>        <span class="hljs-comment">//排除第一次访问没有参数报错问题</span><br>        <span class="hljs-keyword">if</span> (currentPage == <span class="hljs-keyword">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(currentPage)) &#123;<br>            currentPage = <span class="hljs-string">&quot;1&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (rows == <span class="hljs-keyword">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(rows)) &#123;<br>            rows = <span class="hljs-string">&quot;4&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//调用方法</span><br>        BookService bookService = <span class="hljs-keyword">new</span> BookServiceImpl();<br>        PageBean&lt;Book&gt; pageBean = bookService.findBookByPage(currentPage, rows);<br>        System.out.println(pageBean);<br>        <span class="hljs-comment">//存储数据</span><br>        req.setAttribute(<span class="hljs-string">&quot;pageBean&quot;</span>, pageBean);<br>        <span class="hljs-comment">//转发</span><br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/list.jsp&quot;</span>).forward(req, resp);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>BookServiceImpl</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BookService</span> </span>&#123;<br>    <span class="hljs-comment">//创建dao层对象</span><br>    BookDao bookDao = <span class="hljs-keyword">new</span> BookDaoImpl();<br><br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> PageBean&lt;Book&gt; <span class="hljs-title">findBookByPage</span><span class="hljs-params">(String _currentPage, String _rows)</span> </span>&#123;<br>        <span class="hljs-comment">//将字符串转换为int</span><br>        <span class="hljs-keyword">int</span> currentPage = Integer.parseInt(_currentPage);<br>        <span class="hljs-keyword">int</span> rows = Integer.parseInt(_rows);<br>        <span class="hljs-comment">//创建PageBean</span><br>        PageBean&lt;Book&gt; pageBean = <span class="hljs-keyword">new</span> PageBean&lt;&gt;();<br>        <span class="hljs-comment">//设置属性</span><br>        pageBean.setCurrentPage(currentPage);<br>        pageBean.setCurrentPage(rows);<br>        <span class="hljs-comment">//调用查询总记录数的方法</span><br>        <span class="hljs-keyword">int</span> totalCount = bookDao.findTotalCount();<br>        pageBean.setTotalCount(totalCount);<br>        <span class="hljs-comment">//计算开始的索引</span><br>        <span class="hljs-keyword">int</span> start = (currentPage - <span class="hljs-number">1</span>) * rows;<br>        <span class="hljs-comment">//调用分页查询的方法</span><br>       List&lt;Book&gt; list = bookDao.findByList(start, rows);<br>        pageBean.setList(list);<br>        <span class="hljs-comment">//计算总页码</span><br>        <span class="hljs-keyword">int</span> totalPage = totalCount % rows== <span class="hljs-number">0</span>?totalCount/rows : totalCount/rows+<span class="hljs-number">1</span>;<br>        pageBean.setTotalPage(totalPage);<br>        <span class="hljs-keyword">return</span> pageBean;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>BookDaoImpl</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @author lp</span><br><span class="hljs-comment"> * @version 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> BookDaoImpl implements BookDao &#123;<br>    //创建JDBCTemplate对象<br>  private JdbcTemplate template = <span class="hljs-built_in">new</span> JdbcTemplate(JDBCUtils.getDataSource());<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  获取总记录数</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    @Override<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">int</span> findTotalCount() &#123;<br>        String <span class="hljs-keyword">sql</span> = &quot;select count(b_id) from book&quot;;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">template</span>.queryForObject(<span class="hljs-keyword">sql</span>, <span class="hljs-type">Integer</span>.<span class="hljs-keyword">class</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  分页查询</span><br><span class="hljs-comment">     * @param start 开始的记录数</span><br><span class="hljs-comment">     * @param rows  每页显示多少条</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    @Override<br>    <span class="hljs-built_in">public</span> List&lt;Book&gt; findByList(<span class="hljs-type">int</span> <span class="hljs-keyword">start</span>, <span class="hljs-type">int</span> <span class="hljs-keyword">rows</span>) &#123;<br>        String <span class="hljs-keyword">sql</span> = &quot;select * from book limit ?,?&quot;;<br>        List&lt;Book&gt; list = <span class="hljs-keyword">template</span>.query(<span class="hljs-keyword">sql</span>, <span class="hljs-built_in">new</span> BeanPropertyRowMapper&lt;Book&gt;(Book.<span class="hljs-keyword">class</span>), <span class="hljs-keyword">start</span>, <span class="hljs-keyword">rows</span>);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写完之后我们只需要通过浏览器直接方法对应servlet并携带对应的值即可</p><p><code>http://localhost:8080/book/findBookByPageServlet?currentPage=2&amp;rows=4</code></p><p><font color="cornflowerblue"><strong>前端编写</strong></font></p><ol><li><strong>第一处：修改foreach 遍历的对象</strong></li></ol><p><img src="/color-ful/img/javaee/image-20210127033535169.png" alt="image-20210127033535169"></p><ol start="2"><li> <strong>第二处：修改总记录数和总页码</strong></li></ol><p><img src="/color-ful/img/javaee/image-20210127033721731.png" alt="image-20210127033721731"></p><ol start="3"><li><p><strong>第三处 ：将假分页替换为真实的,并添加被选中效果</strong></p><p><img src="/color-ful/img/javaee/image-20210127040607639.png" alt="image-20210127040607639"></p></li><li><p><strong>将index.jsp的跳转路径修改为当前serlvet</strong></p></li></ol><p><img src="/color-ful/img/javaee/image-20210127035455087.png" alt="image-20210127035455087"></p><ol start="5"><li><p><strong>添加上一页和下一页，并对上一页进行限制，当第一页时不能再继续点击上一页</strong></p><p>上一页</p></li></ol><p><img src="/color-ful/img/javaee/image-20210127041941585.png" alt="image-20210127041941585"></p><p>​        下一页</p><p><img src="/color-ful/img/javaee/image-20210127042031692.png" alt="image-20210127042031692"></p><p>​        后台处理：BookServiceImpl</p><p><img src="/color-ful/img/javaee/image-20210127042328247.png" alt="image-20210127042328247"></p><h2 id="10-组合条件查询"><a href="#10-组合条件查询" class="headerlink" title="10. 组合条件查询"></a>10. 组合条件查询</h2><p><strong>首先我们先了解一下组合条件查询的语句</strong>，我们不但要拼接条件，还要进行分页</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> book <span class="hljs-keyword">where</span> b_name <span class="hljs-keyword">like</span> &quot;%j%&quot; <span class="hljs-keyword">and</span> b_author <span class="hljs-keyword">like</span> &quot;%高%&quot; limit <span class="hljs-number">0</span>,<span class="hljs-number">3</span> ;<br></code></pre></td></tr></table></figure><p>该需求的难点就在于<font color="red">如何拼接sql语句</font>！</p><p>​        我们通过页面观察，组合查询有三个输入框 书名，作者，库存 ，在实际项目运行中，我们无法预测用户会组合几个条件。所以我们需要想办法解决sql拼接问题。</p><p>​        这里告诉大家一个小技巧，因为一句sql只能有一个关键字where，但是可以有多个and，所以我们首先写出公共部分：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> book <span class="hljs-keyword">where</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>这样写的好处是可以将后面条件的拼接进行统一处理，简化编码</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> book <span class="hljs-keyword">where</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">and</span> b_name <span class="hljs-keyword">like</span> <span class="hljs-string">&quot;%j%&quot;</span> <span class="hljs-keyword">and</span> b_author <span class="hljs-keyword">like</span> <span class="hljs-string">&quot;%高%&quot;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">3</span> ;<br></code></pre></td></tr></table></figure><p><strong>第二点，我们要明确查询后给我们返回的是一个什么对象？</strong></p><p>当然是PageBean对象，因为组合条件查询的结果也是带分页效果的，所以是PageBean对象</p><ol><li><p><strong>将list.jsp中对应的组合条件查询的form表单跳转路径进行修改</strong></p><p><img src="/color-ful/img/javaee/image-20210127171226936.png" alt="image-20210127171226936"></p></li><li><p><strong>接下来去servlet中修改代码，并且再最前面添加编码集，否则会乱码</strong></p></li></ol><p><img src="/color-ful/img/javaee/image-20210127171602743.png" alt="image-20210127171602743"></p><ol start="3"><li> <strong>在 BookServiceImpl 中修改相应的方法</strong></li></ol><p>   添加参数后，alt+回车，可以对方法进行重构</p><p><img src="/color-ful/img/javaee/image-20210127172004836.png" alt="image-20210127172004836"></p><ol start="4"><li> <strong>接着去Dao层的实现类中修改对应的两个方法</strong></li></ol><p><font color="cornflowerblue">findTotalCount()方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    *  获取总记录数</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> condition</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findTotalCount</span><span class="hljs-params">(Map&lt;String, String[]&gt; condition)</span> </span>&#123;<br>       <span class="hljs-comment">//定义一个模板sql</span><br>       String sql = <span class="hljs-string">&quot;select count(*) from book where 1=1 &quot;</span>;<br>       <span class="hljs-comment">//拼接sql的容器</span><br>       StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder(sql);<br>       <span class="hljs-comment">//存储参数的集合</span><br>       List&lt;Object&gt; params = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>       <span class="hljs-comment">//遍历map集合</span><br>       Set&lt;String&gt; keys= condition.keySet();<br>       <span class="hljs-keyword">for</span> (String key : keys) &#123;<br>           <span class="hljs-comment">//排除分页的参数</span><br>           <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;currentPage&quot;</span>.equals(key) || <span class="hljs-string">&quot;rows&quot;</span>.equals(key)) &#123;<br>               <span class="hljs-keyword">continue</span>;<br>           &#125;<br>            <span class="hljs-comment">//因为我们的输入框没有重复name属性的，所以我们可以直接拿数组的第一个值</span><br>           String value = condition.get(key)[<span class="hljs-number">0</span>];<br>           <span class="hljs-comment">//判断value,如果有值则进行拼接</span><br>           <span class="hljs-keyword">if</span> (value != <span class="hljs-keyword">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(value)) &#123;<br>               sb.append(<span class="hljs-string">&quot; and &quot;</span> + key + <span class="hljs-string">&quot; like ? &quot;</span>);<br>               params.add(<span class="hljs-string">&quot;%&quot;</span>+value+<span class="hljs-string">&quot;%&quot;</span>);<br>           &#125;<br>       &#125;<br>       <span class="hljs-comment">//查看一下sql</span><br>       System.out.println(sb.toString());<br>       System.out.println(params);<br>       <span class="hljs-keyword">return</span> template.queryForObject(sb.toString(), Integer.class,params.toArray());<br>   &#125;<br></code></pre></td></tr></table></figure><p>该方法写好后，我们可以尝试着运行一下页面，看是否可以查询出总记录数 和 一些数据</p><p><font color="cornflowerblue">findByPage()</font></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sql"> <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  分页查询</span><br><span class="hljs-comment">     * @param start 开始的记录数</span><br><span class="hljs-comment">     * @param rows  每页显示多少条</span><br><span class="hljs-comment">     * @param condition</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-variable">@Override</span><br>    public List&lt;Book&gt; findByList(int start, int rows, Map&lt;String, String[]&gt; condition) &#123;<br>        String <span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> &quot;select * from book where 1=1 &quot;;<br>        <span class="hljs-operator">/</span><span class="hljs-operator">/</span>拼接<span class="hljs-keyword">sql</span>的容器<br>        StringBuilder sb <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-keyword">sql</span>);<br>        <span class="hljs-operator">/</span><span class="hljs-operator">/</span>存储参数的集合<br>        List<span class="hljs-operator">&lt;</span>Object<span class="hljs-operator">&gt;</span> params <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> ArrayList<span class="hljs-operator">&lt;&gt;</span>();<br>        <span class="hljs-operator">/</span><span class="hljs-operator">/</span>遍历map集合<br>        <span class="hljs-keyword">Set</span><span class="hljs-operator">&lt;</span>String<span class="hljs-operator">&gt;</span> keys<span class="hljs-operator">=</span> condition.keySet();<br>        for (String key : keys) &#123;<br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span>排除分页的参数<br>            if (&quot;currentPage&quot;.equals(key) || &quot;rows&quot;.equals(key)) &#123;<br>                continue;<br>            &#125;<br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span>因为我们的输入框没有重复name属性的，所以我们可以直接拿数组的第一个值<br>            String <span class="hljs-keyword">value</span> <span class="hljs-operator">=</span> condition.get(key)[<span class="hljs-number">0</span>];<br>            <span class="hljs-operator">/</span><span class="hljs-operator">/</span>判断<span class="hljs-keyword">value</span>,如果有值则进行拼接<br>            if (value != null || &quot;&quot;.equals(value)) &#123;<br>                sb.append(&quot; and &quot; <span class="hljs-operator">+</span> key <span class="hljs-operator">+</span> &quot; like ? &quot;);<br>                params.add(&quot;%&quot;<span class="hljs-operator">+</span><span class="hljs-keyword">value</span><span class="hljs-operator">+</span>&quot;%&quot;);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-operator">/</span><span class="hljs-operator">/</span>添加分页查询<br>        sb.append(&quot; limit ?,?&quot;);<br>        <span class="hljs-operator">/</span><span class="hljs-operator">/</span>添加分页的参数<br>        params.add(<span class="hljs-keyword">start</span>);<br>        params.add(<span class="hljs-keyword">rows</span>);<br><br>        List<span class="hljs-operator">&lt;</span>Book<span class="hljs-operator">&gt;</span> list <span class="hljs-operator">=</span> template.query(sb.toString(), <span class="hljs-keyword">new</span> BeanPropertyRowMapper<span class="hljs-operator">&lt;</span>Book<span class="hljs-operator">&gt;</span>(Book.class), params.toArray());<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这两个方法修改完毕后，我们的符合条件查询基本就完成了。但是还有很多细节需要优化。</p><p><font color="red">优化1：搜寻信息回显</font></p><ol><li><strong>我们只需要在获取参数的servlet中将参数再存到request对象中即可</strong></li></ol><p><img src="/color-ful/img/javaee/image-20210127213312691.png" alt="image-20210127213312691"></p><ol start="2"><li><strong>去list.jsp中再对应标签读取对应的值</strong></li></ol><p><img src="/color-ful/img/javaee/image-20210127213701536.png" alt="image-20210127213701536"></p><p><font color="red">优化2：分页问题</font></p><p>这个问题我们只需要再分页标签对应的跳转属性，将搜索的参数继续携带即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/findBookByPageServlet?currentPage=$&#123;i&#125;&amp;rows=4&amp;b_name=$&#123;requestScope.condition.b_name[0]&#125;&amp;b_author=$&#123;requestScope.condition.b_author[0]&#125;&amp;b_inventory=$&#123;requestScope.condition.b_inventory[0]&#125;&quot;</span>&gt;</span>$&#123;i&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/color-ful/img/javaee/image-20210127220632451.png" alt="image-20210127220632451"></p><h2 id="11-过滤器：登录验证"><a href="#11-过滤器：登录验证" class="headerlink" title="11. 过滤器：登录验证"></a>11. 过滤器：登录验证</h2><p><strong>分析：哪些资源需要过滤，哪些资源不需要过滤</strong></p><pre><code> 1. 与登录有关的页面不需要过滤，直接放行  - 无关，判断是否登录 2. 判断是否又登录信息：  - 有：直接放行  - 没有，跳转登录页面</code></pre><p><strong>实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>          <span class="hljs-comment">//1.将request对象 和 response对象强转为Http协议的实现类对象</span><br>        HttpServletRequest request = (HttpServletRequest) servletRequest;<br>        HttpServletResponse response = (HttpServletResponse) servletResponse;<br>        <span class="hljs-comment">//2.获取资源请求路径</span><br>        String uri = request.getRequestURI();<br>        <span class="hljs-comment">//排除与登录相关的，不光是页面还要排除js，css,字体，图片，本案例中校验码</span><br>        <span class="hljs-keyword">if</span> (uri.contains(<span class="hljs-string">&quot;/login.jsp&quot;</span>)<br>                ||uri.contains(<span class="hljs-string">&quot;/loginServlet&quot;</span>)<br>                ||uri.contains(<span class="hljs-string">&quot;/js/&quot;</span>)<br>                ||uri.contains(<span class="hljs-string">&quot;/css/&quot;</span>)<br>                ||uri.contains(<span class="hljs-string">&quot;/fonts/&quot;</span>)<br>                ||uri.contains(<span class="hljs-string">&quot;/checkCode&quot;</span>)<br>        ) &#123;<br>            <span class="hljs-comment">//包含，则与登录有关，放行</span><br>            filterChain.doFilter(request, response);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//不包含，则判断是否包含用户信息</span><br>            HttpSession session = request.getSession();<br>            Object user = session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>            <span class="hljs-comment">//判断用户是否为null</span><br>            <span class="hljs-keyword">if</span> (user != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-comment">//放行</span><br>                filterChain.doFilter(request, response);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//没有登录，跳转到登录页面</span><br>                request.setAttribute(<span class="hljs-string">&quot;login_msg&quot;</span>,<span class="hljs-string">&quot;您没有登录，请登录&quot;</span>);<br>                request.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(request,response);<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="13-文件上传"><a href="#13-文件上传" class="headerlink" title="13. 文件上传"></a>13. 文件上传</h2><p>练习：</p><p>upload.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;h1&gt;文件上传实例 &lt;/h1&gt;<br>&lt;form method=<span class="hljs-string">&quot;post&quot;</span> action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/uploadServlet&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>    选择一个文件:<br>    &lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;uploadFile&quot;</span>/&gt;<br>    &lt;br/&gt;&lt;br/&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;上传&quot;</span>/&gt;<br>    $&#123;requestScope.upload_msg&#125;<br>    &lt;img style=<span class="hljs-string">&quot;width: 200px;height: auto&quot;</span><br>         src=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/upload/$&#123;requestScope.filename&#125;&quot;</span> alt=<span class="hljs-string">&quot;缩略图&quot;</span>&gt;<br>&lt;/form&gt;<br>$&#123;requestScope.name&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>UploadServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/uploadServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UploadServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        <span class="hljs-comment">//判断表单是否包含上传组件</span><br>        <span class="hljs-keyword">boolean</span> multipartContent = ServletFileUpload.isMultipartContent(req);<br>        <span class="hljs-keyword">if</span> (multipartContent) &#123;<br>            <span class="hljs-comment">//获取ServletFileUpload对象</span><br>            FileItemFactory factory = <span class="hljs-keyword">new</span> DiskFileItemFactory();<br>            ServletFileUpload upload = <span class="hljs-keyword">new</span> ServletFileUpload(factory);<br><br>            <span class="hljs-comment">//中文处理</span><br>            upload.setHeaderEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            <span class="hljs-comment">//设置存储路径</span><br>            String uploadPath = getServletContext().getRealPath(<span class="hljs-string">&quot;/upload/&quot;</span>);<br>            <span class="hljs-comment">//如果目录不存在则直接创建</span><br>            File uploadDir = <span class="hljs-keyword">new</span> File(uploadPath);<br>            <span class="hljs-keyword">if</span> (!uploadDir.exists()) &#123;<br>                uploadDir.mkdir();<br>            &#125;<br><br>            <span class="hljs-comment">//解析请求内容，提取文件数据</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                List&lt;FileItem&gt; formItems = upload.parseRequest(req);<br>                <span class="hljs-comment">//</span><br>                <span class="hljs-keyword">if</span> (formItems != <span class="hljs-keyword">null</span> &amp;&amp; formItems.size() &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">//遍历表单数据</span><br>                    <span class="hljs-keyword">for</span> (FileItem fileItem : formItems) &#123;<br>                        <span class="hljs-comment">//判断该对象中封装的数据是文本表单字段还是文件表单字段,</span><br>                        <span class="hljs-comment">//true:文本，false:文件</span><br>                        <span class="hljs-keyword">if</span> (!fileItem.isFormField()) &#123;<br>                            <span class="hljs-comment">//组装上传路径</span><br>                            String fileName = fileItem.getName();<br>                            String filePath = uploadPath + fileName;<br>                            System.out.println(filePath);<br>                            <span class="hljs-comment">//上传文件</span><br>                            fileItem.write(<span class="hljs-keyword">new</span> File(filePath));<br>                            <span class="hljs-comment">//存储响应信息</span><br>                            req.setAttribute(<span class="hljs-string">&quot;upload_msg&quot;</span>, <span class="hljs-string">&quot;上传成功&quot;</span>);<br>                            req.setAttribute(<span class="hljs-string">&quot;filename&quot;</span>, fileName);<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-comment">//普通表单元素</span><br>                            req.setAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-keyword">new</span> String(fileItem.get()));<br>                        &#125;<br>                    &#125;<br>                &#125;<br><br><br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>                req.setAttribute(<span class="hljs-string">&quot;upload_msg&quot;</span>, <span class="hljs-string">&quot;上传失败，请稍后重试&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//跳转回主页面</span><br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/upload.jsp&quot;</span>).forward(req,resp);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong><font color="cornflowerblue">用户注册，并上传头像</font></strong></p>]]></content>
    
    
    <categories>
      
      <category>JavaEE 二阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JSP</tag>
      
      <tag>Servlet</tag>
      
      <tag>sql</tag>
      
      <tag>jdbc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSP+Servlet</title>
    <link href="/color-ful/2020/01/17/3.JSP%20+%20Servlet/"/>
    <url>/color-ful/2020/01/17/3.JSP%20+%20Servlet/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Web-相关概念"><a href="#1-Web-相关概念" class="headerlink" title="1. Web 相关概念"></a>1. Web 相关概念</h2><h3 id="1-1-软件架构"><a href="#1-1-软件架构" class="headerlink" title="1.1 软件架构"></a>1.1 软件架构</h3><ul><li><strong>C/S</strong>：客户端/服务器端</li><li><strong>B/S</strong>：浏览器/服务器端</li></ul><h3 id="1-2-资源分类"><a href="#1-2-资源分类" class="headerlink" title="1.2 资源分类"></a>1.2 资源分类</h3><ul><li>静态资源：所有用户访问后，得到的结果都是一样的，称为静态资源.静态资源可以直接被浏览器解析<ul><li>如： html,css,JavaScript</li></ul></li><li>动态资源:每个用户访问相同资源后，得到的结果可能不一样。称为动态资源。动态资源被访问后，需要先转换为静态资源，在返回给浏览器<ul><li>如：servlet/jsp,php</li></ul></li></ul><p><font color="cornflowerblue">图解：</font></p><p><img src="/color-ful/img/javaee/%E8%B5%84%E6%BA%90%E5%88%86%E7%B1%BB%E5%9B%BE%E8%A7%A3.png"></p><h3 id="1-3-网络通信三要素"><a href="#1-3-网络通信三要素" class="headerlink" title="1.3 网络通信三要素"></a>1.3 网络通信三要素</h3><ul><li><strong>IP</strong>：电子设备在网络中的唯一标识。</li><li><strong>端口</strong>：应用程序在计算机中的唯一标识。 0~65536</li><li><strong>传输协议</strong>：规定了数据传输的规则<ol><li>基础协议：<ol><li>tcp:安全协议，三次握手。 速度稍慢</li><li>udp：不安全协议。 速度快</li></ol></li></ol></li></ul><h2 id="2-服务器"><a href="#2-服务器" class="headerlink" title="2. 服务器"></a>2. 服务器</h2><ul><li>服务器：安装了服务器软件的计算机</li><li>服务器软件：接收用户的请求，处理请求，做出响应</li><li>web服务器软件：接收用户的请求，处理请求，做出响应。<ul><li>在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目</li><li>动态资源必须依赖于web服务器才能运行，所以也被称为web容器</li></ul></li><li>常见的Java相关的web服务器软件：<ul><li>webLogic：oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>webSphere：IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>JBOSS：JBOSS公司的，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>Tomcat：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet/jsp。<strong>开源的，免费的</strong>。Tomcat性能优异，并且支持集群，所以深受广大企业喜爱。</li></ul></li></ul><h2 id="3-Tomcat"><a href="#3-Tomcat" class="headerlink" title="3.Tomcat"></a>3.Tomcat</h2><h3 id="3-1-下载："><a href="#3-1-下载：" class="headerlink" title="3.1 下载："></a>3.1 下载：</h3><p>进入官网<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a> 下载8.5.61</p><p><img src="/color-ful/img/javaee/image-20210114225248564.png" alt="image-20210114225248564"></p><p><img src="/color-ful/img/javaee/image-20210114231730133.png" alt="image-20210114231730133"></p><h3 id="3-2-安装："><a href="#3-2-安装：" class="headerlink" title="3.2 安装："></a>3.2 安装：</h3><p>​        解压即可使用</p><ul><li><strong><font color="red">建议：安装目录不建议有中文 和 空格</font></strong></li></ul><h3 id="3-3-目录结构："><a href="#3-3-目录结构：" class="headerlink" title="3.3 目录结构："></a>3.3 目录结构：</h3><p><img src="/color-ful/img/javaee/image-20210114233535752.png" alt="image-20210114233535752"></p><h3 id="3-4-卸载："><a href="#3-4-卸载：" class="headerlink" title="3.4 卸载："></a>3.4 卸载：</h3><p>​        删除文件夹即可</p><h3 id="3-5-启动："><a href="#3-5-启动：" class="headerlink" title="3.5 启动："></a>3.5 启动：</h3><p>​            <strong><font color="red">bin/start.bat</font></strong> </p><ul><li>错误1：启动报错<ul><li>解决方案：logs —》catalina.当天日期.log 日志文件中查找错误信息 —-》百度</li></ul></li><li>错误2：启动窗口闪退<ul><li>解决方案：JAVA_HOME配置有问题，正确配置后，便修复此问题</li></ul></li><li>错误3：错误日志中出现：端口号占用错误<ul><li>解决方案1：cmd —&gt; 命令：netstat -ano —&gt; 找到对应端口的PID —-&gt;任务管理器中 ”详细信息“选项卡—&gt;找到对应PID —&gt; 右键 —-&gt;结束任务</li><li>解决方案2：修改Tomcat 默认端口号 conf —&gt; server.xml —&gt; 找到对应的 8080 进行修改。<ul><li><font color="red">特殊端口（80）:80端口号是http协议的默认端口号,设置为80，在访问服务器时，就不用输入端口号</font></li></ul></li></ul></li></ul><h3 id="3-6-访问："><a href="#3-6-访问：" class="headerlink" title="3.6 访问："></a>3.6 访问：</h3><p>​            浏览器输入:Http://localhost:8080 访问本机服务器</p><p>​                                Http://他人的ip：8080 访问他人的服务器</p><h3 id="3-7-关闭："><a href="#3-7-关闭：" class="headerlink" title="3.7 关闭："></a>3.7 关闭：</h3><ul><li>正常关闭<ul><li>bin/shutdown.bat</li><li>启动窗口：Ctrl + C  </li></ul></li><li>强制关闭 <ul><li>点击启动窗口右上角的关闭按钮 <code>X</code></li></ul></li></ul><h3 id="3-8-项目部署"><a href="#3-8-项目部署" class="headerlink" title="3.8 项目部署"></a>3.8 项目部署</h3><p><strong><font color="red">方式1：直接将项目复制到webapps目录中</font></strong></p><p><font color="cornflowerblue">1. 我们建一个目录，里面放一个html文件：演示案例目录结构<code>Myweb\index.html</code></font></p><p><font color="cornflowerblue">2.将文件夹复制到目录中</font></p><p><font color="cornflowerblue">3.启动服务</font></p><p><font color="cornflowerblue">4.通过浏览器访问项目：<code>localhost:8080/Myweb/index.html</code></font></p><ul><li><code>/Myweb</code>:项目访问路径，其实它是一个虚拟路径，没有配置前，默认是实际路径。</li></ul><p><font color="red">这种方式还有一种简化部署方式：将项目打包成war包，因为war包 和zip压缩包的压缩方式比较相似，所以我们直接把演示案例项目压缩成zip格式，然后将后缀改成<code>.war</code>。将压缩好的war包，复制到webapps目录中，这种方式不用重新启动服务器，它会自动给我们部署，删除只需要删除war包，对应的项目也会自动被删除</font></p><p><strong>缺点：需要拷贝项目到webapps,耗时耗力</strong></p><p><strong><font color="red">方式2：通过配置server.xml</font></strong></p><p><font color="cornflowerblue">1.在配置文件中找到Host标签</font></p><p><font color="cornflowerblue">2.在Host标签中加入配置：</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">docBase</span>=<span class="hljs-string">&quot;D:\Myweb&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/baidu&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><ul><li>Context 是一个自闭和标签</li><li>docBase: 项目存放的实际路径</li><li>path: 访问的虚拟路径</li></ul><p><strong>缺点：server.xml是针对服务器的配置文件，一般我们不会修改这个文件，容易导致服务器崩溃。</strong></p><p><strong><font color="red">方式3：在conf\Catalina\localhost 文件夹下创建 虚拟路径.xml</font></strong></p><p><font color="cornflowerblue">1. 在conf\Catalina\localhost目录下创建一个<code>.xml</code>配置文件</font></p><p><font color="cornflowerblue">2. 该配置文件名就是访问的虚拟路径</font></p><p><font color="cornflowerblue">3.文件中加入<code>Context</code>标签，并配置属性即可。</font></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;Context <span class="hljs-attribute">docBase</span>=<span class="hljs-string">&quot;D:\Myweb&quot;</span> <span class="hljs-attribute">path</span>=<span class="hljs-string">&quot;/baidu&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p><strong>该方式的好处：1.不用修改服务器配置文件，2.热部署：部署和删除不需要重启服务器。</strong></p><h2 id="4-IDEA-与-Tomcat集成"><a href="#4-IDEA-与-Tomcat集成" class="headerlink" title="4. IDEA 与 Tomcat集成"></a>4. IDEA 与 Tomcat集成</h2><p>IDEA 与 Tomcat集成的好处，启动，关闭，部署项目都非常方便，不用再去安装目录的bin中找程序之类的操作</p><p><font color="cornflowerblue">1.Run —- Edit Configurations…</font></p><p><img src="/color-ful/img/javaee/image-20210115092112191.png" alt="image-20210115092112191"></p><p><font color="cornflowerblue">2. 点击左上角的 <code>+</code></font></p><p><img src="/color-ful/img/javaee/image-20210115092532058.png" alt="image-20210115092532058"></p><p><font color="cornflowerblue">3.选择：Tomcat Server —– Local</font></p><p><img src="/color-ful/C:/Users\30526\AppData\Roaming\Typora\typora-user-images\image-20210115101654152.png" alt="image-20210115101654152"></p><p><font color="cornflowerblue">4. Configureation —-  Tomcat Home — 选择Tomcat安装目录即可</font></p><p><img src="/color-ful/img/javaee/image-20210115101915576.png" alt="image-20210115101915576"></p><p><font color="cornflowerblue">5. 配置成功后，IDEA的Run 会变成 Tomcat样式</font></p><p><img src="/color-ful/img/javaee/image-20210115101816818.png" alt="image-20210115101816818"></p><h2 id="5-创建JavaWeb项目"><a href="#5-创建JavaWeb项目" class="headerlink" title="5. 创建JavaWeb项目"></a>5. 创建JavaWeb项目</h2><p><font color="cornflowerblue">1. 新建一个普通java工程（Module 或Project 都可以）</font></p><p><font color="cornflowerblue">2. 项目名称上右键 — &gt; add </font></p><p><img src="/color-ful/img/javaee/image-20210115103548273.png" alt="image-20210115103548273"></p><p><font color="cornflowerblue">3. 选择 Web Application</font></p><p><img src="/color-ful/img/javaee/image-20210115103714775.png" alt="image-20210115103714775"></p><p>成功之后，该java项目会多出几个目录结构</p><p><img src="/color-ful/img/javaee/image-20210115103916141.png" alt="image-20210115103916141"></p><h2 id="6-部署JavaWeb项目"><a href="#6-部署JavaWeb项目" class="headerlink" title="6. 部署JavaWeb项目"></a>6. 部署JavaWeb项目</h2><p><font color="cornflowerblue">1. Run —- Edit Configurations…</font></p><p><img src="/color-ful/img/javaee/image-20210115104052623.png" alt="image-20210115104052623"></p><p><font color="cornflowerblue">2. 选 Artifact…</font></p><p><img src="/color-ful/img/javaee/image-20210115104401827.png" alt="image-20210115104401827"></p><p><font color="cornflowerblue">3. 在弹出的窗口中，选择你要部署的JavaWeb项目</font></p><p><img src="/color-ful/img/javaee/image-20210115104444368.png" alt="image-20210115104444368"></p><p><font color="cornflowerblue">4. 配置虚拟访问路径（也可以不配置）</font></p><p><img src="/color-ful/img/javaee/image-20210115104728339.png" alt="image-20210115104728339"></p><p><font color="cornflowerblue">5. 配置热部署，这样我们新建页面就不必重新启动服务器了。</font></p><p><img src="/color-ful/img/javaee/image-20210115105208509.png" alt="image-20210115105208509"></p><p><font color="cornflowerblue">6. 以上配置完成后，就可以点击启动Tomcat，访问你的第一个页面啦！</font></p><h2 id="7-Servlet"><a href="#7-Servlet" class="headerlink" title="7. Servlet"></a>7. Servlet</h2><h3 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a>7.1 概述</h3><p>​    运行在服务器端的java小程序</p><p><font color="cornflowerblue">图解：</font></p><p><img src="/color-ful/img/javaee/servlet%E5%9B%BE%E8%A7%A3.png"></p><ul><li>Servlet是一个接口，定义了Java类被Tomcat识别的规则。</li><li>Servlet的开发就是实现Servlet接口，重写里面的方法。</li></ul><h3 id="7-2-快速入门"><a href="#7-2-快速入门" class="headerlink" title="7.2 快速入门"></a>7.2 快速入门</h3><ul><li><p><strong>步骤</strong></p><ol><li>创建JavaEE项目</li><li>定义一个类，实现Servlet接口</li><li>实现接口中的抽象方法</li><li>配置Servlet</li></ol><p><font color="cornflowerblue">1. 在刚才创建的web工程的src目录中创建包 org.wdzl.web.servlet，并创建一个类ServletDemo</font></p><p><font color="cornflowerblue">2. 实现Servlet接口</font></p></li></ul><p>​    <font color="red">注意：实现接口时会发现，找不到依赖</font></p><ul><li>解决办法<ol><li>File —&gt; Project Structure</li></ol></li></ul><p><img src="/color-ful/img/javaee/image-20210115112536294.png" alt="image-20210115112536294"></p><ol start="2"><li>选择 Library</li></ol><p><img src="/color-ful/img/javaee/image-20210115112707490.png" alt="image-20210115112707490"></p><ol start="3"><li>选择 Tomcat 8.5.61—&gt; Add Selected</li></ol><p><img src="/color-ful/img/javaee/image-20210115112803662.png" alt="image-20210115112803662"></p><p><font color="cornflowerblue">3. 重写的方法我们先不管是干什么的，我们先找到service方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">//提供服务的方法</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;Hello Servlet&quot;</span>);<span class="hljs-comment">//写一条输出语句即可</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4. 配置Servlet</font></p><blockquote><p><font color="red">为什么要配置Servlet?</font></p><p>因为浏览器要访问动态资源是要通过URL，而URL 如何要和Servlet对应上，就是我们接下来要做的事情。</p></blockquote><p>在<code>web.xml</code>中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置Servlet --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>demo1<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.wdzl.web.servlet.ServletDemo<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>demo1<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 访问Servlet的虚拟路径 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/demo1<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置好后通过localhost/demo1进行访问即可</p><h3 id="7-3-servlet执行原理"><a href="#7-3-servlet执行原理" class="headerlink" title="7.3 servlet执行原理"></a>7.3 servlet执行原理</h3><p><font color="cornflowerblue">图解：</font></p><p><img src="/color-ful/img/javaee/Servlet%E5%8E%9F%E7%90%86%E5%9B%BE%E8%A7%A3.png"></p><p><strong>执行原理</strong></p><ol><li>服务器接收到浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</li><li>查找web.xml文件，是否有对应的<code>&lt;url-pattern&gt;</code></li><li>如果有，则会找到对应的<code>servlet-class</code>全类名</li><li>tomcat将对应的字节码文件加载到内存中，并创建该类的对象</li><li>调用方法</li></ol><h3 id="7-4-Servlet的方法-和-生命周期"><a href="#7-4-Servlet的方法-和-生命周期" class="headerlink" title="7.4 Servlet的方法 和 生命周期"></a>7.4 Servlet的方法 和 生命周期</h3><ol><li><p><strong>生命周期</strong></p><ul><li>被创建：执行init方法，只执行一次</li><li>提供服务: 执行service方法，执行多次</li><li>被销毁：执行destroy,只执行一次</li></ul></li><li><p><strong>方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  初始化的方法</span><br><span class="hljs-comment"> *  在Servlet被创建时执行，只会执行一次</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> servletConfig</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;init...&quot;</span>);<br>&#125;<br>   <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取ServletConfig对象</span><br><span class="hljs-comment"> * ServletConfig：Servlet的配置对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title">getServletConfig</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br>   <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 提供服务方法</span><br><span class="hljs-comment"> * 每次Servlet被访问时执行，执行多次。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> servletRequest</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> servletResponse</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;Hello Servlet&quot;</span>);<br>&#125;<br>   <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取Servlet的一些信息，版本，作者等</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getServletInfo</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br>   <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 销毁的方法</span><br><span class="hljs-comment"> * 在Servlet销毁或在服务器正常关闭时，被执行一次</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;destroy...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="7-5-Servlet方法详解"><a href="#7-5-Servlet方法详解" class="headerlink" title="7.5 Servlet方法详解"></a>7.5 Servlet方法详解</h3><ol><li><p>init():</p><ul><li>初始化的时机可以改变</li></ul><p><img src="/color-ful/img/javaee/image-20210116095734091.png" alt="image-20210116095734091"></p><ul><li>Servlet是单例模式，多个用户访问可能存在线程安全问题<ul><li>解决：使用Servlet时，尽量不要在Servlet中使用成员变量 ，即使定义了成员变量，也不要有修改值的操作。</li></ul></li></ul></li></ol><h3 id="7-6-注解配置"><a href="#7-6-注解配置" class="headerlink" title="7.6 注解配置"></a>7.6 注解配置</h3><p><font color="red">配置文件方式配置比较麻烦，3.0之后的版本支持注解方式，比较方便</font></p><ul><li><strong>步骤：</strong><ol><li>创建JavaEE项目，选择3.0以上版本，可以不创建web.xml</li><li>定义一个类，实现Servlet接口</li><li>重写方法</li><li>在类上使用注解进行配置</li></ol></li><li>准备工作:重新创建一个，这次不勾选 <code>Create web.xml</code></li></ul><p><img src="/color-ful/img/javaee/image-20210116102659318.png" alt="image-20210116102659318"></p><p><font color="cornflowerblue">1. 定义一个类，实现Servlet接口，重写方法</font></p><p><font color="cornflowerblue">2.在类上使用注解进行配置 </font></p><p><img src="/color-ful/img/javaee/image-20210116112625361.png" alt="image-20210116112625361"></p><p><font color="cornflowerblue">3. 注解 WebServlet</font></p><table><thead><tr><th>属性名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>String</td><td>指定Servlet 的 name 属性，等价于 <code>&lt;servlet-name&gt;</code>。如果没有显式指定，则该 Servlet 的取值即为类的全限定名。</td></tr><tr><td>value</td><td>String[]</td><td>该属性等价于 urlPatterns 属性。两个属性不能同时使用。使用时可以省略属性名。</td></tr><tr><td>urlPatterns</td><td>String[]</td><td>指定一组 Servlet 的 URL 匹配模式。等价于<code>&lt;url-pattern&gt;</code>标签。</td></tr><tr><td>loadOnStartup</td><td>int</td><td>指定 Servlet 的加载顺序，等价于 <code>&lt;load-on-startup&gt;</code>标签。</td></tr><tr><td>initParams</td><td>WebInitParam[]</td><td>指定一组 Servlet 初始化参数，等价于<code>&lt;init-param&gt;</code>标签。</td></tr><tr><td>asyncSupported</td><td>boolean</td><td>声明 Servlet 是否支持异步操作模式，等价于<code>&lt;async-supported&gt;</code> 标签。</td></tr><tr><td>description</td><td>String</td><td>该 Servlet 的描述信息，等价于 <code>&lt;description&gt;</code>标签。</td></tr><tr><td>displayName</td><td>String</td><td>该 Servlet 的显示名，通常配合工具使用，等价于 <code>&lt;display-name&gt;</code>标签。</td></tr></tbody></table><h3 id="7-7-小常识："><a href="#7-7-小常识：" class="headerlink" title="7.7 小常识："></a>7.7 小常识：</h3><ol><li> 工作空间项目 和 tomcat部署的web项目 并不是一个项目</li></ol><p>tomcat部署位置：<code>CATALINA_BASE\work</code></p><p>工作空间项目位置：项目右键</p><ol><li>WEB-INFO目录下的资源不能被浏览器直接访问</li></ol><h3 id="7-8-Servlet-继承体系结构"><a href="#7-8-Servlet-继承体系结构" class="headerlink" title="7.8 Servlet 继承体系结构"></a>7.8 Servlet 继承体系结构</h3><p>查询API 我们了解一下Servlet的继承体系结构：</p><p>Servlet 接口</p><p>​        |</p><p>GenericServlet 抽象类</p><p>​        |</p><p>HttpServlet 抽象类</p><ul><li><strong>GenericServlet  抽象类</strong></li></ul><p>它将Servlet接口中的其他方法都做了空实现，只留下了service()方法作为抽象方法</p><ul><li><p><strong>HttpServlet 抽象类</strong></p><p>该抽象类是对Http协议的一种封装，可以简化操作。</p><p><font color="cornflowerblue">图解：</font></p><p><img src="/color-ful/img/javaee/HttpServlet.png"></p></li></ul><h3 id="7-9-HttpServlet"><a href="#7-9-HttpServlet" class="headerlink" title="7.9 HttpServlet"></a>7.9 HttpServlet</h3><ul><li><p><strong>使用步骤</strong></p><ol><li>定义类，继承HttpServlet</li><li>重写doGet()/doPost()</li></ol></li><li><p><strong>查看源码，理解原理</strong></p></li></ul><p><font color="cornflowerblue">HttpServlet 中的 service()方法</font></p><p><img src="/color-ful/img/javaee/image-20210116160343347.png" alt="image-20210116160343347"></p><p><font color="cornflowerblue">service（）继续往下翻</font></p><p><strong>因为Http有7种请求方式，我们只需要关注常用的两个 Get 和 Post</strong></p><p><img src="/color-ful/img/javaee/image-20210116160428838.png" alt="image-20210116160428838"></p><ul><li><strong>get()方式效果演示</strong></li></ul><p><font color="cornflowerblue">1. 新建一个ServletDemo2</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/demo2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletDemo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;doGet...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;doPost...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 启动服务，直接用浏览器请求该Servlet</font></p><p><font color="red">注意：浏览器默认访问方式是GET() 方式</font></p><ul><li><strong>post() ：方式</strong></li></ul><p><font color="cornflowerblue">1. post方式需要借助Html的<code>&lt;form&gt;</code>标签</font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;demo2&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-10-urlPatterns"><a href="#7-10-urlPatterns" class="headerlink" title="7.10 urlPatterns()"></a>7.10 urlPatterns()</h3><ol><li><strong>一个Servlet可以匹配多个访问路径</strong></li></ol><p><font color="cornflowerblue">注解源码：</font></p><p><img src="/color-ful/img/javaee/image-20210116170103681.png" alt="image-20210116170103681"></p><p>urlPatterns 的数据类型是String类型的数组，就表示 该servlet可以设置多个访问路径</p><p><font color="cornflowerblue">演示案例：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(urlPatterns = &#123;&quot;/a&quot;,&quot;/a2&quot;,&quot;/a3&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletDemo3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;ServletDemo3 doGet()....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;ServletDemo3 doPost()....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>路径定义规则</strong><ul><li>路径匹配：<code>/xxx</code></li><li>目录结果匹配：<code>/xxx/xxx</code></li><li>扩展名匹配：<code>*.xxx</code></li></ul></li></ol><p><font color="cornflowerblue">案例：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@WebServlet(&quot;/aa/bb&quot;) 通过/aa/bb 访问</span><br><span class="hljs-comment">//@WebServlet(&quot;/aa/*&quot;) 通过/aa/任意字符 访问</span><br><span class="hljs-comment">//@WebServlet(&quot;/*&quot;) 通过/任意字符访问</span><br><span class="hljs-meta">@WebServlet(&quot;*.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletDemo4</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;demo4 doGet()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;demo4 doPost()&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="8-HTTP-请求消息"><a href="#8-HTTP-请求消息" class="headerlink" title="8. HTTP - 请求消息"></a>8. HTTP - 请求消息</h2><h3 id="8-1-概念"><a href="#8-1-概念" class="headerlink" title="8.1 概念"></a>8.1 概念</h3><p>超文本传输协议：Hyper Text Transfer Protocol 超文本传输协议</p><h3 id="8-2-特点"><a href="#8-2-特点" class="headerlink" title="8.2 特点"></a>8.2 特点</h3><ol><li>基于TCP/IP的高级协议：安全的</li><li>默认端口号:80</li><li>基于请求/相应模型：一次请求对应一次相应</li></ol><p><font color="cornflowerblue">图示：</font></p><p><img src="/color-ful/img/javaee/%E8%AF%B7%E6%B1%82%E7%9B%B8%E5%BA%94%E6%A8%A1%E5%9E%8B.png"></p><ol><li>无状态的：每次请求之间相互独立，不能交互数据</li></ol><h3 id="8-3-历史版本"><a href="#8-3-历史版本" class="headerlink" title="8.3 历史版本"></a>8.3 历史版本</h3><p><font color="cornflowerblue">演示：使用火狐浏览器</font></p><p>我们访问baidu首页一共发送了几次请求？实际访问百度主页会发送很多次请求，因为主页的每一个图片，文本内容都是一次请求</p><p><img src="/color-ful/img%5Cimage-20210116205730403.png" alt="image-20210116205730403"></p><ol><li><strong>1.0</strong>：每一次请求响应都会建立新的连接</li><li><strong>1.1</strong>：复用连接，请求连接不会立马释放，会保留一段时间，如果在时间内该链接还有数据进行传输，就会复用该连接。</li></ol><h2 id="9-请求消息-数据格式"><a href="#9-请求消息-数据格式" class="headerlink" title="9. 请求消息- 数据格式"></a>9. 请求消息- 数据格式</h2><p><strong>数据格式</strong>：<br>        1. 请求行<br>        2. 请求头<br>        3. 请求空行<br>        4. 请求体JSP + Servlet</p><p><font color="cornflowerblue">演示案例：使用post()演示案例结合火狐浏览器查看数据格式</font></p><p><img src="/color-ful/img/javaee/image-20210116211436008.png" alt="image-20210116211436008"></p><h3 id="9-1-请求行"><a href="#9-1-请求行" class="headerlink" title="9.1 请求行"></a>9.1 请求行</h3><ul><li><strong>格式</strong>：请求方式  请求URL  请求协议/版本号</li></ul><p><font color="cornflowerblue">结合演示案例得出案例种请求行的信息：</font></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string"></span> /demo/login.html <span class="hljs-string"></span> <span class="hljs-meta">HTTP/1.1</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>请求方式：</strong>Http共有7种请求方式，常用的有2种</p><ul><li><p>GET</p><ol><li><p><font color="red">请求参数在请求行中，在URL后</font></p><p><img src="/color-ful/img/javaee/image-20210116214119197.png" alt="image-20210116214119197"></p></li><li><p>请求的URL长度是有限制的</p></li><li><p>不安全</p></li></ol></li><li><p>POST</p><ol><li><font color="red">请求参数在请求体中</font></li><li>请求的URL长度没有限制</li><li>相对安全</li></ol></li></ul></li><li><p><strong>请求URL</strong></p><ul><li>GET<ol><li>URL可能携带参数</li></ol></li><li>POST<ol><li>URL不携带参数</li></ol></li></ul></li></ul><h3 id="9-2-请求头"><a href="#9-2-请求头" class="headerlink" title="9.2 请求头"></a>9.2 请求头</h3><p>请求头内容就是浏览器告诉服务器自身的一些信息。</p><ul><li><strong>格式</strong>：请求头名称 ： 请求头值 ，请求头值，……</li></ul><p><font color="cornflowerblue">结合演示案例得出案例种请求行的信息：</font></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Host</span>: localhost:<span class="hljs-number">8080</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win<span class="hljs-number">64</span>; x<span class="hljs-number">64</span>; rv:<span class="hljs-number">84</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">84</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/webp,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,zh-TW;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span>,zh-HK;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">3</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">15</span><br><span class="hljs-attribute">Origin</span>: http://localhost:<span class="hljs-number">8080</span><br><span class="hljs-attribute">Connection</span>: keep-alive<br><span class="hljs-attribute">Referer</span>: http://localhost:<span class="hljs-number">8080</span>/demo/login.html<br><span class="hljs-attribute">Cookie</span>: JSESSIONID=EA<span class="hljs-number">1651</span>C<span class="hljs-number">97732902</span>D<span class="hljs-number">299</span>C<span class="hljs-number">5</span>CD<span class="hljs-number">859</span>AE<span class="hljs-number">1647</span>; Idea-e<span class="hljs-number">44921</span>c<span class="hljs-number">1</span>=<span class="hljs-number">1</span>d<span class="hljs-number">14</span>f<span class="hljs-number">60</span>c-<span class="hljs-number">0164</span>-<span class="hljs-number">4</span>cc<span class="hljs-number">4</span>-<span class="hljs-number">9</span>ed<span class="hljs-number">0</span>-<span class="hljs-number">2</span>d<span class="hljs-number">9</span>d<span class="hljs-number">05535</span>a<span class="hljs-number">13</span><br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>常见的请求头</strong></p><ul><li><p>Host：发送请求的主机</p></li><li><p>User-Agent: 浏览器告诉服务器，当前浏览器的版本信息</p><ul><li>可以在服务器端获取浏览器版本信息，来解决浏览器兼容问题（原因：静态页面的解析都是浏览器自己完成的。这就造成了相同的内容，在不同浏览器中可能出现不同的样式。）</li></ul></li><li><p>Accept: 浏览器告诉服务器自己支持的数据格式</p></li><li><p>Referer:告诉服务器当前请求从哪里来</p><ul><li><p>作用：</p><ol><li><p>防盗链</p><p><img src="/color-ful/img/javaee/%E7%9B%97%E9%93%BE%E5%9B%BE%E8%A7%A3.png"></p></li><li><p>统计工作</p><p><img src="/color-ful/img/javaee/%E9%98%B2%E7%9B%97%E9%93%BE%E5%92%8C%E7%BB%9F%E8%AE%A1.png"></p></li></ol></li></ul></li><li><p>Connection:keep-alive （现在都使用的HTTP 1.1 所以该头信息被省略）</p></li></ul></li></ul><h3 id="9-3-请求空行"><a href="#9-3-请求空行" class="headerlink" title="9.3 请求空行"></a>9.3 请求空行</h3><ul><li>空行：用于分割请求头 和请求体</li></ul><h3 id="9-4-请求体（正文）"><a href="#9-4-请求体（正文）" class="headerlink" title="9.4 请求体（正文）"></a>9.4 请求体（正文）</h3><p>​    封装POST 请求信息的请求参数</p><p><font color="cornflowerblue">GET方式种没有请求体，我们可以看表单提交后的效果</font></p><p><img src="/color-ful/img/javaee/image-20210116212753552.png" alt="image-20210116212753552"></p><ul><li>参数 = 对应的值</li></ul><ol><li><strong>请求消息-格式：</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html">POST /demo/demo2 HTTP/1.1<br>Host: localhost:8080<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br>Accept-Encoding: gzip, deflate<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 15<br>Origin: http://localhost:8080<br>Connection: keep-alive<br>Referer: http://localhost:8080/demo/login.html<br>Cookie: JSESSIONID=EA1651C97732902D299C5CD859AE1647; Idea-e44921c1=1d14f60c-0164-4cc4-9ed0-2d9d05535a13<br>Upgrade-Insecure-Requests: 1<br><br>username=hahaha<br></code></pre></td></tr></table></figure><h2 id="10-Request-对象"><a href="#10-Request-对象" class="headerlink" title="10. Request 对象"></a>10. Request 对象</h2><h3 id="10-1-Request-和-Response-对象的原理"><a href="#10-1-Request-和-Response-对象的原理" class="headerlink" title="10.1 Request 和 Response 对象的原理"></a>10.1 Request 和 Response 对象的原理</h3><p><font color="red">Response对象后面细讲：</font></p><p><font color="cornflowerblue">图解：</font></p><p>![](/img/javaee/Request  和 Response对象 .png)</p><p><strong>通过原理图，我们得出</strong></p><ol><li> request 和 response对象是由服务器创建，我们使用即可</li><li>request对象是用来获取请求信息，response对象用设置相应信息</li></ol><h3 id="10-2-Request继承体系"><a href="#10-2-Request继承体系" class="headerlink" title="10.2 Request继承体系"></a>10.2 Request继承体系</h3><p>查询API</p><p><strong>ServletRequest</strong> – 接口</p><p>​            | 继承</p><p><strong>HttpServletRequest</strong> – 接口</p><p>​            | 实现（service中打印request对象）</p><p><strong>org.apache.catalina.connector.RequestFacade</strong> – 在tomcat中实现            </p><p><img src="/color-ful/img/javaee/image-20210116234832122.png" alt="image-20210116234832122"></p><h3 id="10-3-获取请求消息数据"><a href="#10-3-获取请求消息数据" class="headerlink" title="10.3 获取请求消息数据"></a>10.3 获取请求消息数据</h3><h4 id="10-3-1获取请求行数据"><a href="#10-3-1获取请求行数据" class="headerlink" title="10.3.1获取请求行数据"></a>10.3.1获取请求行数据</h4><p>我们根据请求行数据格式分析需要的方法</p><p>GET  /demo/demo2 HTTP/1.1</p><ul><li><p>获取请求方式：GET</p><p>​        <strong>String   getMethod()</strong>  </p></li><li><p><font color="red">获取虚拟目录（常用）</font>： /demo</p><p>​        <strong>String   getContextPath()</strong></p></li><li><p>获取Servlet路径: /demo2</p><p>​        <strong>String   getServletPath()</strong></p></li><li><p>获取get方式请求参数：name=zhangsan</p><p>​        <strong>String getQueryString()</strong></p></li><li><p><font color="red">获取请求URI（常用）</font>： /demo/demo2</p><p>​        <strong>String getRequestURI():</strong>        /demo/demo2</p><p>​        <strong>StringBuffer getRequestURL()  :</strong><code>http://localhost:8080/demo/demo2</code></p></li><li><p>获取协议及版本：HTTP/1.1</p><p>​        <strong>String getProtocol()</strong></p></li><li><p>获取客户机的IP地址：</p><p>​        <strong>String getRemoteAddr()</strong></p></li></ul><p><font color="cornflowerblue">演示案例：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/req&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>          <span class="hljs-comment">//获取请求方式</span><br>        String method = req.getMethod();<br>        System.out.println(method);<br>         <span class="hljs-comment">// 获取虚拟目录</span><br>        String contextPath = req.getContextPath();<br>        System.out.println(contextPath);<br>        <span class="hljs-comment">// 获取Servlet路径</span><br>        String servletPath = req.getServletPath();<br>        System.out.println(servletPath);<br>        <span class="hljs-comment">// 获取get方式的请求参数</span><br>        String queryString = req.getQueryString();<br>        System.out.println(queryString);<br>        <span class="hljs-comment">// 获取URI</span><br>        String requestURI = req.getRequestURI();<br>        StringBuffer requestURL = req.getRequestURL();<br>        System.out.println(requestURI);<br>        System.out.println(requestURL);<br><br>        <span class="hljs-comment">// 获取协议版本</span><br>        String protocol = req.getProtocol();<br>        System.out.println(protocol);<br>        <span class="hljs-comment">//返回用户ip</span><br>        String remoteAddr = req.getRemoteAddr();<br>        System.out.println(remoteAddr);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>通过网址<code>localhost:8080//localhost/demo/req?name=aaa&amp;age=18</code>查看控制台</p><p><img src="/color-ful/img/javaee/image-20210118043641316.png" alt="image-20210118043641316"></p><h4 id="10-3-2-获取请求头数据"><a href="#10-3-2-获取请求头数据" class="headerlink" title="10.3.2 获取请求头数据"></a>10.3.2 获取请求头数据</h4><ul><li><strong>String getHeader(String name)</strong>:通过请求头的名称获取请求头的值（常用）<ul><li>Enumeration<String>  getHeaderNames():获取所有的请求头名称<pre><code>    * Enumeration&lt;String&gt; 相当于迭代器，API中有说</code></pre></String></li></ul></li></ul><p><strong><font color="cornflowerblue">演示案例1：获取所有请求头数据</font></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/req2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestDemo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>         <span class="hljs-comment">//获取所有请求头名称</span><br>        Enumeration&lt;String&gt; headerNames = req.getHeaderNames();<br>        <span class="hljs-keyword">while</span> (headerNames.hasMoreElements()) &#123;<br>            <span class="hljs-comment">//获取请求头的键</span><br>            String name = headerNames.nextElement();<br>            <span class="hljs-comment">//获取请求头的值</span><br>            String value = req.getHeader(name);<br>            System.out.println(name + <span class="hljs-string">&quot;--&quot;</span> + value);<br><br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>通过网址：<code>localhost:8080//localhost/demo/req2</code></p><p><img src="/color-ful/img/javaee/image-20210118044651942.png" alt="image-20210118044651942"></p><p><strong><font color="cornflowerblue">演示案例2：获取用户浏览器信息</font></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/req3&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestDemo3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>         <span class="hljs-comment">//获取UserAgent</span><br>        String agent = req.getHeader(<span class="hljs-string">&quot;user-agent&quot;</span>);<span class="hljs-comment">//请求头的key不区分大小写</span><br>        <span class="hljs-keyword">if</span> (agent.contains(<span class="hljs-string">&quot;QQBrowser&quot;</span>)) &#123;<br>            <span class="hljs-comment">//因为我们无法处理浏览器兼容问题，所以我们用一个输出语句代替处理</span><br>            System.out.println(<span class="hljs-string">&quot;您用的是QQ浏览器&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (agent.contains(<span class="hljs-string">&quot;Firefox&quot;</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;您用的是火狐浏览器&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过不同浏览器访问servlet可以有不同的效果。</p><p><font color="cornflowerblue">演示案例3：获取referer</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/req4&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestDemo4</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>         <span class="hljs-comment">//获取Referer</span><br>        String referer = req.getHeader(<span class="hljs-string">&quot;referer&quot;</span>);<br>        System.out.println(referer);<br>        <span class="hljs-keyword">if</span> (referer.contains(<span class="hljs-string">&quot;/demo&quot;</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;播放音乐&quot;</span>);<br>            <span class="hljs-comment">//等学了response之后就可以把输出语句中的内容显示到网页中</span><br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;滚&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="red">注意：如果直接通过/demo/req4 访问这个Servlet,就相当于直接自己访问自己，referer 的值是null，所以我们需要在index.jsp中加一个超链接，控制跳转</font></p><p><img src="/color-ful/img/javaee/image-20210118051434930.png" alt="image-20210118051434930"></p><h4 id="10-3-4-获取请求体数据"><a href="#10-3-4-获取请求体数据" class="headerlink" title="10.3.4 获取请求体数据"></a>10.3.4 获取请求体数据</h4><ul><li><p><strong>请求体</strong>：只有POST方式有请求体。在请求体中封装了POST请求的请求参数</p></li><li><p><strong>步骤：</strong></p><ol><li><p>获取流对象</p><ul><li><strong>BufferedReader  getReader()</strong> :  获取字符输入流，只能操作字符数据</li><li><strong>ServletInputStream  getInputStream()</strong> : 获取字节输入流，它可以操作所有类型数据（文件上传时讲解）</li></ul></li><li><p>从流中获取数据</p></li></ol><p><strong><font color="cornflowerblue">演示案例：</font></strong></p><ol><li><p>创建<code>regist.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>注册页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/demo/req5&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入密码&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注册&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建servlet</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/req5&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestDemo5</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//获取请求消息体</span><br>        <span class="hljs-comment">//1. 获取字符流</span><br>        BufferedReader br = req.getReader();<br>        <span class="hljs-comment">//2.读取数据</span><br>        String line = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(line);<span class="hljs-comment">//username=aaa&amp;username=aaa</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="10-3-4-其他方法"><a href="#10-3-4-其他方法" class="headerlink" title="10.3.4 其他方法"></a>10.3.4 其他方法</h4><p>这些方法是由前面基础方法衍生出来的一些通用方法，更方便使用</p><h5 id="1-获取请求参数对象（GET-POST都能用）"><a href="#1-获取请求参数对象（GET-POST都能用）" class="headerlink" title="1.获取请求参数对象（GET/POST都能用）"></a>1.获取请求参数对象（GET/POST都能用）</h5><ul><li><strong>String  getParameter(String name)</strong>: 根据参数名称获取参数值</li><li><strong>String[]  getParameterValues(String name)</strong>: 根据参数名称获取参数值的数组（多用于复选框）例如：hobby=java &amp;hobby=c</li><li><strong>Enumeration<String> getParameterNames()</String></strong>:获取所有请求的参数名称</li><li><strong>Map&lt;String,String[]&gt; getParameterMap()</strong>:获取所有参数的map集合</li></ul><p><strong><font color="cornflowerblue">演示案例1：</font></strong></p><p><strong>regist2.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>注册页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/demo/req6&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入密码&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    爱好：<br>    打游戏<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;playGame&quot;</span>&gt;</span><br>    看书<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;read&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注册&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>ServletDemo6</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/req6&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestDemo6</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//根据参数名获取参数值</span><br><span class="hljs-comment">/*        String username = req.getParameter(&quot;username&quot;);</span><br><span class="hljs-comment">        System.out.println(&quot;get:&quot;+username);*/</span><br>        <span class="hljs-comment">//因为方法通用，所以我们可以采取统一的处理方式</span><br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//1根据参数名获取参数值</span><br>        String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;post:&quot;</span>+username);<br>        System.out.println(<span class="hljs-string">&quot;***************************&quot;</span>);<br>        <span class="hljs-comment">//2根据参数名获取参数值数组</span><br>        String[] hobbies = req.getParameterValues(<span class="hljs-string">&quot;hobby&quot;</span>);<br>        <span class="hljs-keyword">for</span> (String hobby : hobbies) &#123;<br>            System.out.println(hobby);<br>        &#125;<br><br>        <span class="hljs-comment">//3获取请求中所有的参数名称</span><br>        Enumeration&lt;String&gt; parameterNames = req.getParameterNames();<br>        <span class="hljs-keyword">while</span> (parameterNames.hasMoreElements()) &#123;<br>            String name = parameterNames.nextElement();<br>            String value = req.getParameter(name);<br>            System.out.println(name + <span class="hljs-string">&quot;---&quot;</span> + value);<span class="hljs-comment">//hobby复选框，所以结果中只拿了一个值</span><br>        &#125;<br><br>        <span class="hljs-comment">//4获取所有参数的map集合</span><br>        Map&lt;String, String[]&gt; parameterMap = req.getParameterMap();<br>        Set&lt;String&gt; keys = parameterMap.keySet();<br>        <span class="hljs-keyword">for</span> (String key : keys) &#123;<br>            <span class="hljs-comment">//获取值</span><br>            String[] values = parameterMap.get(key);<br>            <span class="hljs-keyword">for</span> (String value : values) &#123;<br>                System.out.println(key+<span class="hljs-string">&quot;---&quot;</span>+value);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="red"><strong>POST中文乱码解决：</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在获取参数前，设置req编码集</span><br>req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br></code></pre></td></tr></table></figure><h5 id="2-请求转发"><a href="#2-请求转发" class="headerlink" title="2. 请求转发"></a>2. 请求转发</h5><ul><li><strong>概述：</strong>一种在服务器内部的资源跳转方式。</li></ul><blockquote><p>简单理解服务器内部的资源跳转：一个服务器中有多个Servelt,多个Servlet分工协作完成用户的一个请求，这多个Servlet间数据的交换，就是资源跳转</p></blockquote><ul><li><p><strong>步骤</strong>：</p><ol><li>通过request对象 获取请求转发器对象：<strong>RequestDispatcher  getRequestDispatcher(String path)</strong></li><li>使用转发器对象进行转发：<strong>forward(ServletRequest request, ServletResponse response)</strong></li></ol><p><font color="cornflowerblue"><strong>演示案例：</strong></font></p><p><strong>ServletDemo7</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/req7&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestDemo7</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;ServletDemo7 被访问。。。&quot;</span>);<br>        <span class="hljs-comment">//请求转发:链式编程</span><br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/demo/req8&quot;</span>).forward(req, resp);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>ServletDemo8</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/req8&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestDemo8</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;ServletDemo8 被访问。。。&quot;</span>);<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过访问req7 跳转到req8</p></li><li><p><strong>特点</strong>：</p><ol><li>浏览器地址栏路径不发生变化</li><li>只能转发到当前服务器内部资源中。</li><li>转发是一次请求，即无论内部转发几次，调用几个Servlet使用的都是同一次请求。</li></ol></li></ul><h5 id="3-共享数据"><a href="#3-共享数据" class="headerlink" title="3. 共享数据"></a>3. 共享数据</h5><ul><li><p><strong>概述：</strong>多个Servlet间协作数据的共享，在学习共享数据前，我们还需要学习域对象</p></li><li><p><strong>域对象：</strong>一个有作用范围的对象，可以在范围内共享数据</p></li><li><p><strong>request域：</strong>代表一次请求的范围。它的作用范围刚好就是请求转发的范围，所以，一般用于请求转发中多个资源中共享数据。也就是我们常说的<strong>一次请求，多个资源</strong></p><ul><li>方法：<ul><li><strong>void setAttribute(String name,Object obj)</strong>  :  存储数据</li><li><strong>Object getAttitude(String name)</strong>  :  通过键获取值</li><li><strong>void removeAttribute(String name)</strong>   :   通过键移除键值对</li></ul></li></ul><p><font color="cornflowerblue"><strong>演示案例：使用ServletDemo7 和 ServletDemo8</strong></font></p><p><strong>ServletDemo7</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/req7&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestDemo7</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;ServletDemo7 被访问。。。&quot;</span>);<br>        req.setAttribute(<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&quot;Hello&quot;</span>);<br>        <span class="hljs-comment">//请求转发:链式编程</span><br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/req8&quot;</span>).forward(req, resp);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>ServletDemo8</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/req8&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestDemo8</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;ServletDemo8 被访问。。。&quot;</span>);<br>        String info = (String) req.getAttribute(<span class="hljs-string">&quot;info&quot;</span>);<br>        System.out.println(info);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过访问req7 跳转到req8并转发info属性</p></li></ul><h5 id="4-获取ServletContext对象"><a href="#4-获取ServletContext对象" class="headerlink" title="4. 获取ServletContext对象"></a>4. <font color="red">获取ServletContext对象</font></h5><ul><li>方法：ServletContext getServletContext()</li><li>后面细讲，它很重要</li></ul><h3 id="10-4-用户登录"><a href="#10-4-用户登录" class="headerlink" title="10.4 用户登录"></a>10.4 用户登录</h3><p><strong>需求：</strong></p><ol><li><p>编写login.html 登录页面</p><ol start="2"><li>使用Druid数据库连接池技术，操作mysql  bookManager库中的user表</li><li>使用JdbcTemplate技术封装JDBC</li><li>登录成功后，转发到SuccessServlet并在页面输出：欢迎 XXX 回来！</li><li>登录失败后，转发到ErrorServlet并在页面输出：用户名或密码错误</li></ol></li></ol><p><strong>步骤：</strong></p><ol><li>创建项目，导入Druid配置文件，JdbcTemplate、Druid 、 Mysql连接驱动的jar包。创建login.html界面</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--action属性：/虚拟路径/servlet资源路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/book/loginServlet&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        用户名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        密码:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE bookManager CHARSET utf8;<br><br>USE bookManager;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">USER</span>(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>PASSWORD <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>)<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">USER</span> <span class="hljs-keyword">VALUES</span>(<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;admin&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>创建包 org.wdzl.pojo 在包中创建对应实体类 User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(Integer id, String username, String password)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.username = username;<br>        <span class="hljs-keyword">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span><span class="hljs-params">(String password)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建包 org.wdzl.dao 在包中创建操作数据库的接口</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br><br>    <span class="hljs-function">User <span class="hljs-title">login</span><span class="hljs-params">(User loginUser)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li> 创建包 org.wdzl.dao.impl 在包中创建接口实现类 UserDaoImpl</li></ol><p>  <font color="red">先不做实现，第6步写完后，再回来做具体实现。实现完后，写一个测试类测试一下。确保代码正确，再继续往下写。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wdzl.dao.impl;<br><br><span class="hljs-keyword">import</span> org.springframework.dao.DataAccessException;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.wdzl.dao.UserDao;<br><span class="hljs-keyword">import</span> org.wdzl.pojo.User;<br><span class="hljs-keyword">import</span> org.wdzl.utils.JDBCUtils;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-comment">//声明一个JDBCTemplate对象供该类中的所有方法使用</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate template = <span class="hljs-keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  用户登录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> loginUser 包含用户和密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> user包含的全部数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">login</span><span class="hljs-params">(User loginUser)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 编写SQL</span><br>            String sql = <span class="hljs-string">&quot;select * from user where username=? and password=?&quot;</span>;<br>            <span class="hljs-comment">//调用query方法：用户存在则代码顺序执行，用户不存在则会报错</span><br>            User user = template.queryForObject(<br>                    sql,<br>                    <span class="hljs-keyword">new</span> BeanPropertyRowMapper&lt;&gt;(User.class),<br>                    loginUser.getUsername(),<br>                    loginUser.getPassword()<br>            );<br>            <span class="hljs-comment">//返回User</span><br>            <span class="hljs-keyword">return</span> user;<br>        &#125; <span class="hljs-keyword">catch</span> (DataAccessException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-comment">//报错就代表用户不存在，我们返回null即可</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="6"><li>准备JDBCUtils工具类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><span class="hljs-keyword">import</span> com.mysql.jdbc.Statement;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Druid连接池工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCUtils</span> </span>&#123;<br>    <span class="hljs-comment">//成员变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DataSource dataSource;<br><br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 加载配置文件</span><br>            Properties properties = <span class="hljs-keyword">new</span> Properties();<br>            properties.load(JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;druid.properties&quot;</span>));<br>            <span class="hljs-comment">//2. 获取连接池对象</span><br>            dataSource = DruidDataSourceFactory.createDataSource(properties);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  获取连接对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 连接对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-keyword">return</span> dataSource.getConnection();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  释放资源</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stmt 执行sql的对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> conn 连接数据库的对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(Statement stmt, Connection conn)</span> </span>&#123;<br>        close(stmt,conn,<span class="hljs-keyword">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  释放资源</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stmt 执行sql的对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> conn 连接数据库的对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rs 查询结果集对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(Statement stmt, Connection conn, ResultSet rs)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (stmt != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                stmt.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (conn != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (rs != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  获取连接池对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 连接池对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DataSource <span class="hljs-title">getDataSource</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="7"><li> 测试login()方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImplTest</span> </span>&#123;<br><br>    UserDaoImpl userDao = <span class="hljs-keyword">new</span> UserDaoImpl();<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//正确：则打印出用户信息，不正确则会报错</span><br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>);<br>        User login = userDao.login(user);<br>        System.out.println(login);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="8"><li>创建包 org.wdzl.servlet 在包中创建 LoginServlet</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.wdzl.dao.UserDao;<br><span class="hljs-keyword">import</span> org.wdzl.dao.impl.UserDaoImpl;<br><span class="hljs-keyword">import</span> org.wdzl.pojo.User;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(&quot;/loginServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req,resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//1. 设置编码集</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        <span class="hljs-comment">//2. 获取请求参数</span><br>        String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        String password = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-comment">//3.封装User对象</span><br>        User loginUser = <span class="hljs-keyword">new</span> User(<span class="hljs-keyword">null</span>, username, password);<br>        <span class="hljs-comment">//4. 调用UserDao的方法</span><br>        UserDao userDao = <span class="hljs-keyword">new</span> UserDaoImpl();<br>        User user = userDao.login(loginUser);<br>        <span class="hljs-keyword">if</span> (user != <span class="hljs-keyword">null</span>) &#123;<br>            req.setAttribute(<span class="hljs-string">&quot;user&quot;</span>,user);<br>            req.getRequestDispatcher(<span class="hljs-string">&quot;/successServlet&quot;</span>).forward(req, resp);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            req.getRequestDispatcher(<span class="hljs-string">&quot;/errorServlet&quot;</span>).forward(req, resp);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="9"><li><p>创建SuccessServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.wdzl.pojo.User;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(&quot;/successServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SuccessServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//获取user对象</span><br>        User user = (User) req.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-comment">//给页面写一句话，后面讲 先照着抄</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        resp.getWriter().write(<span class="hljs-string">&quot;欢迎&quot;</span>+user.getUsername()+<span class="hljs-string">&quot;回来！！！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建ErrorServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(&quot;/errorServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ErrorServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        resp.getWriter().write(<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>​        封装user对象的过程是比较繁琐的，因为我们这个案例只有两个字段，如果是注册业务呢？可能有几十个字段，我们也要一步一步去写吗？</p><p>​        接下来我们讲解一个可以简化对象封装的工具类：BeanUtils</p><h3 id="10-5-BeanUtils-简化数据封装"><a href="#10-5-BeanUtils-简化数据封装" class="headerlink" title="10.5 BeanUtils 简化数据封装"></a>10.5 BeanUtils 简化数据封装</h3><p><strong><font color="cornflowerblue">使用BeanUtils简化数据封装</font></strong></p><p>以上一个案例的LoginServlet为例</p><p><img src="/color-ful/img/javaee/image-20210120232425136.png" alt="image-20210120232425136"></p><p><strong>使用要求：</strong></p><ul><li>类必须被public 修饰</li><li>必须提供无参构造</li><li>成员变量必须被private修饰</li><li>提供公共的get/set方法</li></ul><h2 id="11-HTTP-相应消息"><a href="#11-HTTP-相应消息" class="headerlink" title="11. HTTP-相应消息"></a>11. HTTP-相应消息</h2><p>1.请求消息：客户端发送给服务器端的数据</p><p>数据格式：<br>2. 相应消息：服务器端相应客户端的数据</p><p>   数据格式：<br>             1. 相应行<br>            2. 相应头<br>           3. 相应空行<br>           4. 相应体体</p><h3 id="11-1-响应消息的字符串格式："><a href="#11-1-响应消息的字符串格式：" class="headerlink" title="11.1 响应消息的字符串格式："></a>11.1 响应消息的字符串格式：</h3><p>通过获取浏览器 F12 查看 格式</p><p><font color="cornflowerblue">图示：</font></p><p><img src="/color-ful/img/javaee/image-20210121021150868.png" alt="image-20210121021150868"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK <span class="hljs-comment">//响应行</span><br><span class="hljs-comment">// ****************************** 响应头 *****************************</span><br>Bdpagetype: <span class="hljs-number">1</span><br>Bdqid: <span class="hljs-number">0x86f2f3e6001eefab</span><br>Cache-Control: <span class="hljs-keyword">private</span><br>Connection: keep-alive<br>Content-Encoding: gzip<br>Content-Type: text/html;charset=utf-<span class="hljs-number">8</span><br>Date: Wed, <span class="hljs-number">20</span> Jan <span class="hljs-number">2021</span> <span class="hljs-number">18</span>:<span class="hljs-number">07</span>:<span class="hljs-number">52</span> GMT<br>Expires: Wed, <span class="hljs-number">20</span> Jan <span class="hljs-number">2021</span> <span class="hljs-number">18</span>:<span class="hljs-number">07</span>:<span class="hljs-number">52</span> GMT<br>Server: BWS/<span class="hljs-number">1.1</span><br>Set-Cookie: BDSVRTM=<span class="hljs-number">12</span>; path=/<br>Set-Cookie: BD_HOME=<span class="hljs-number">1</span>; path=/<br>Set-Cookie: H_PS_PSSID=<span class="hljs-number">33425_33430_33344_33286_33395_33398_33334_26350</span>; path=/; domain=.baidu.com<br>Strict-Transport-Security: max-age=<span class="hljs-number">172800</span><br>Traceid: <span class="hljs-number">161116607205735506029724102714616377259</span><br>X-Ua-Compatible: IE=Edge,chrome=<span class="hljs-number">1</span><br>Transfer-Encoding: chunked<br><span class="hljs-comment">// ****************************** 响应头结束 *****************************</span><br><br><span class="hljs-comment">//响应空行</span><br><span class="hljs-comment">//响应体：就是整个页面的内容（包括：html，css,js, 及数据）</span><br></code></pre></td></tr></table></figure><h3 id="11-2-响应行"><a href="#11-2-响应行" class="headerlink" title="11.2 响应行"></a>11.2 响应行</h3><ol><li><strong>组成：</strong></li></ol><p>协议/版本   响应状态码    响应码描述</p><ol start="2"><li><strong>状态码：</strong></li></ol><p>  状态码都是3位数字  服务器告诉客户端本次 请求 和 响应的状态</p><ul><li>分类<ol><li>1xx - 服务器接收客户端消息，但是没有接收完成。等待一段时间后，发送1xx状态码，询问客户端是否继续发送消息</li><li> 2xx：成功。代表码：<font color="red">200</font></li><li> 3xx: 重定向。资源跳转的方式。代表码：<font color="red">302-重定向  ，304-访问缓存</font></li></ol><ul><li>重定向：比如你要访问ServletA, A说它做不了，让你访问B，然后浏览器接收到A的相应之后，会自动的访问ServletB，就相当于你一次回车进行了两次请求。</li></ul><ol start="4"><li> 4xx: 客户端错误。比如访问路径有问题，没有对应资源 ，就会报<font color="red">404</font>。</li><li> 5xx: 服务器端错误。 如果服务器代码出现异常就会报<font color="red">500</font></li></ol></li></ul><h3 id="11-3-响应头"><a href="#11-3-响应头" class="headerlink" title="11.3 响应头"></a>11.3 响应头</h3><ol><li><p><strong>组成：</strong></p><p>头名称 ：值</p></li><li><p><strong>常见响应头：</strong></p><ul><li>Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式</li><li>Content-disposition：服务器告诉客户端以什么格式打开响应体数据。如果没有设置就使用默认值。<ol><li>值：<ul><li>in-line:默认值,在当前页面内打开</li><li>attachment ; filename=xxx：以附件形式打开响应体。即文件下载 filename执行下载文件名称</li></ul></li></ol></li></ul></li></ol><h2 id="12-Response-对象"><a href="#12-Response-对象" class="headerlink" title="12. Response 对象"></a>12. Response 对象</h2><h3 id="12-1-概述"><a href="#12-1-概述" class="headerlink" title="12.1 概述"></a>12.1 概述</h3><p>  Response 对象是用来设置响应消息的</p><ul><li><p>设置响应行</p><ul><li>设置状态码：setStatus( int sc) - sc 为状态码</li></ul></li><li><p>设置响应头</p><ul><li>setHeader(String name , String value)</li></ul></li><li><p>设置响应体:</p><ul><li>步骤：<ol><li>获取输出流<ul><li>字节输出流：ServletOutputStream getOutputStream()</li><li>字符输出流:  PrintWriter() getWriter()</li></ul></li><li>使用输出流将数据输出到客户端浏览器</li></ol></li></ul><p><font color="red">我们通过下面4个小案例来讲解上述内容</font></p></li></ul><ol><li>完成重定向</li><li>服务器输出字符数据到浏览器</li><li>服务器输出字节数据到浏览器</li><li>验证码</li></ol><h3 id="12-2-重定向"><a href="#12-2-重定向" class="headerlink" title="12.2 重定向"></a>12.2 重定向</h3><p><font color="cornflowerblue">图解：</font></p><p><img src="/color-ful/img/javaee/%E9%87%8D%E5%AE%9A%E5%90%91.png"></p><p><strong>步骤：</strong></p><pre><code>1.  设置状态码为302 2.  设置响应头Location</code></pre><p><strong>简化操作：</strong></p><p>​    由于 302 和 location为固定参数，所以将重定向简化为方法：sendRedirect(“/虚拟路径/资源路径”)</p><p><font color="cornflowerblue"><strong>演示案例：responseDemo 通过重定向 访问 responseDemo2</strong></font></p><p><strong>responseDemo</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  重定向演示案例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/responseDemo&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResponseDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;responseDemo 被访问&quot;</span>);<br>        <span class="hljs-comment">//设置状态码</span><br>        resp.setStatus(<span class="hljs-number">302</span>);<br>        <span class="hljs-comment">//设置响应头</span><br>        resp.setHeader(<span class="hljs-string">&quot;location&quot;</span>,<span class="hljs-string">&quot;/book/responseDemo2&quot;</span>);<br><br>        <span class="hljs-comment">//重定向简单的方法实现:因为 302 和 location是固定的。</span><br>        resp.sendRedirect(<span class="hljs-string">&quot;/book/responseDemo2&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>responseDemo2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/responseDemo2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResponseDemo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;responseDemo2 被访问&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="red"><strong>重定向的特点：</strong></font></p><ul><li>转发的特点：forward<ol><li>地址栏 路径不变</li><li>转发只能访问当前服务器下的资源</li><li>转发是一次请求 可以使用request对象共享数据</li></ol></li><li>重定向的特点：redirect<ol><li>地址栏发生变化</li><li>可以访问其他服务器的资源</li><li>重定向是两次请求，不可以使用request对象共享数据</li></ol></li><li>面试题： <strong>forward 和 redirect 的 区别</strong></li></ul><p><strong>路径写法：</strong></p><ul><li><p>路径分类</p><ul><li><p>相对路径：找到当前资源和目标资源之间的相对位置关系</p><ul><li><code>./</code> 开头</li><li><code>../</code> 表示上一级目录</li></ul></li><li><p>绝对路径：通过绝对路径可以确定唯一资源</p><ul><li>以  <code>/</code>开头。因为当前项目中 <code>localhost:8080/</code>虚拟路径都是统一的，所以可以省略为 <code>/</code></li><li>判断路径给谁用<ol><li>浏览器用，要加虚拟目录 。例子：重定向</li><li>服务器用，不用加虚拟目录。例子：转发</li></ol></li><li>使用request.getContextPath()动态获取项目虚拟路径，这样即便是修改项目虚拟目录，我们之前写的重定向方法也不会失效。</li></ul><p><img src="/color-ful/img/javaee/image-20210121231141215.png" alt="image-20210121231141215"></p></li></ul></li></ul><h3 id="12-3-服务器输出字符数据到浏览器"><a href="#12-3-服务器输出字符数据到浏览器" class="headerlink" title="12.3 服务器输出字符数据到浏览器"></a>12.3 服务器输出字符数据到浏览器</h3><p><font color="cornflowerblue"><strong>演示案例：</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 响应字符数据到浏览器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/responseDemo3&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResponseDemo3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//获取流</span><br>        PrintWriter writer = resp.getWriter();<br>        <span class="hljs-comment">//输出字符</span><br>       <span class="hljs-comment">// writer.write(&quot;Hello Response&quot;);</span><br>        <span class="hljs-comment">//输出html标签</span><br>        writer.write(<span class="hljs-string">&quot;&lt;h1&gt;Hello Response&lt;/h1&gt;&quot;</span>);<br>        writer.write(<span class="hljs-string">&quot;你好 response&quot;</span>);<span class="hljs-comment">//乱码</span><br>     <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue"><strong>演示案例2：处理中文乱码</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *   处理中文乱码</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/res4&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResponseDemo4</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         分析：中文乱码问题</span><br><span class="hljs-comment">         qq浏览器查看网页源码：默认编码集GBK</span><br><span class="hljs-comment">         输出流通过tomcat获取。编码集应该是ISO-8859-1</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//解决中文乱码</span><br>        <span class="hljs-comment">//1. 获取流之前设置编码集</span><br>        <span class="hljs-comment">//resp.setCharacterEncoding(&quot;GBK&quot;);</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        但是仅仅设置输出流的编码集，万一用户的编码集被修改不是默认的GBK呢？</span><br><span class="hljs-comment">        我们可以使用相应头content-type,告诉浏览器本次相应的编码格式，浏览器读取到后，就会使用相应的编码</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//设置响应头的同时也设置了本身的编码集，所以resp.setCharacterEncoding()可以省略不写</span><br>        <span class="hljs-comment">//resp.setHeader(&quot;content-type&quot;,&quot;text/html;charset=utf-8&quot;);</span><br><br>        <span class="hljs-comment">//简单的方法设置编码</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br><br>        <span class="hljs-comment">//获取流</span><br>        resp.getWriter().write(<span class="hljs-string">&quot;哈哈哈哈&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="12-4-服务器输出字节数据到浏览器"><a href="#12-4-服务器输出字节数据到浏览器" class="headerlink" title="12.4 服务器输出字节数据到浏览器"></a>12.4 服务器输出字节数据到浏览器</h3><p><font color="cornflowerblue"><strong>演示案例：</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *   服务器相应字节数据：</span><br><span class="hljs-comment"> *      一般这种方法我们不用在输出字符上，而是用在输出图片上，比如说验证码。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/res5&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResponseDemo5</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br><br>        ServletOutputStream outputStream = resp.getOutputStream();<br>        outputStream.write(<span class="hljs-string">&quot;你好&quot;</span>.getBytes(<span class="hljs-string">&quot;utf-8&quot;</span>));<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="12-5-验证码"><a href="#12-5-验证码" class="headerlink" title="12.5 验证码"></a>12.5 验证码</h3><p><strong>本质：</strong>它是一张图片</p><p><strong>目的：</strong>提高安全性，防止恶意注册等操作。</p><p><strong>方式：</strong>随机生成</p><p>本次案例做的是比较初级的验证码：在内存中随机生成验证码</p><p><font color="cornflowerblue"><strong>演示案例：</strong></font></p><ol><li> 后台生成图片</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-meta">@WebServlet(&quot;/code&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CheckCodeServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>       <span class="hljs-comment">//1.创建一个对象，代表内存中的一张图片（空白画布）</span><br>        <span class="hljs-keyword">int</span> width = <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">int</span> height = <span class="hljs-number">50</span>;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        new BufferedImage(参数1，参数2，参数3)</span><br><span class="hljs-comment">        参数1：宽</span><br><span class="hljs-comment">        参数2：高</span><br><span class="hljs-comment">        参数3：图片类型 -常用 BufferedImage.TYPE_INT_RGB</span><br><span class="hljs-comment">         */</span><br>        BufferedImage image = <span class="hljs-keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);<br>        <span class="hljs-comment">//2.美化图片，让它变成我们想要的样子</span><br>        <span class="hljs-comment">//2.1 填充背景色</span><br>        Graphics g = image.getGraphics();<span class="hljs-comment">//获取画笔工具</span><br>        g.setColor(Color.ORANGE);<span class="hljs-comment">//设置画笔颜色</span><br>        g.fillRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,width,height);<span class="hljs-comment">//填充一个矩形</span><br><br>        <span class="hljs-comment">//2.2 画边框</span><br>        g.setColor(Color.green);<span class="hljs-comment">//设置画笔颜色</span><br><span class="hljs-comment">//        g.drawRect(0, 0, 100, 50);//因为边框本身占一个像素，所以右边和下边的边框会超出</span><br>        g.drawRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,width-<span class="hljs-number">1</span>,height-<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//2.3 验证码所有可能出现的字符</span><br>        String str = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span>;<br>        <span class="hljs-comment">//2.4 获取随机数根据随机数取字符</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; i++) &#123;<br>            <span class="hljs-keyword">int</span> index = <span class="hljs-keyword">new</span> Random().nextInt(str.length());<br>            <span class="hljs-keyword">char</span> ch = str.charAt(index);<br>            <span class="hljs-comment">//2.5 写验证码</span><br>            g.drawString(ch+<span class="hljs-string">&quot;&quot;</span>,width/<span class="hljs-number">5</span>*i,height/<span class="hljs-number">2</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//2.6 画干扰线</span><br>        g.setColor(Color.BLUE);<br>        <span class="hljs-comment">//两点确定一条线，一条线由x,y左边的组成。一共画十条</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">int</span> x1 = <span class="hljs-keyword">new</span> Random().nextInt(width);<br>            <span class="hljs-keyword">int</span> x2 = <span class="hljs-keyword">new</span> Random().nextInt(width);<br>            <span class="hljs-keyword">int</span> y1 = <span class="hljs-keyword">new</span> Random().nextInt(height);<br>            <span class="hljs-keyword">int</span> y2 = <span class="hljs-keyword">new</span> Random().nextInt(height);<br>            g.drawLine(x1,x2,y1,y2);<br>        &#125;<br><br>        <span class="hljs-comment">//3. 将图片输出到页面展示</span><br>        ImageIO.write(image, <span class="hljs-string">&quot;jpg&quot;</span>, resp.getOutputStream());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>前端页面展示验证码，并通过单击改变验证码</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>注册页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-built_in">window</span>.onload=<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//获取图片标签对象</span></span><br><span class="javascript">         <span class="hljs-keyword">var</span> img = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;checkCode&quot;</span>);</span><br><span class="javascript">         <span class="hljs-comment">//绑定单击时间</span></span><br><span class="javascript">            img.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-comment">//获取时间戳，为了让浏览器不读取缓存图片</span></span><br><span class="javascript">                <span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();</span><br><span class="javascript">                <span class="hljs-comment">//重新请求</span></span><br><span class="javascript">                img.src=<span class="hljs-string">&quot;/book/code?&quot;</span>+date;</span><br>            &#125;;<br>        &#125;<br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkCode&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/book/code&quot;</span>/&gt;</span>看不清，换一张<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="13-ServletContext对象"><a href="#13-ServletContext对象" class="headerlink" title="13. ServletContext对象"></a>13. ServletContext对象</h2><h3 id="13-1-概述"><a href="#13-1-概述" class="headerlink" title="13.1 概述"></a>13.1 概述</h3><p>ServletContext 对象代表整个web应用，可以和程序的容器（服务器进行通信）。</p><h3 id="13-2-获取该对象"><a href="#13-2-获取该对象" class="headerlink" title="13.2 获取该对象"></a>13.2 获取该对象</h3><ol><li>通过Request对象获取<ul><li>request.getServletContext()</li></ul></li><li>通过HttpServlet获取(实际是他的父类实现了该方法)<ul><li>this.getServletContext()</li></ul></li></ol><p><font color="cornflowerblue"><strong>演示案例：</strong></font></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>@<span class="hljs-constructor">WebServlet(<span class="hljs-string">&quot;/scd&quot;</span>)</span><br>public <span class="hljs-keyword">class</span> ServletContextDemo extends HttpServlet &#123;<br><br>    @Override<br>    protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>        this.<span class="hljs-keyword">do</span><span class="hljs-constructor">Post(<span class="hljs-params">req</span>, <span class="hljs-params">resp</span>)</span>;<br>    &#125;<br><br>    @Override<br>    protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Post(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>        ServletContext servletContext = req.get<span class="hljs-constructor">ServletContext()</span>;<br>        ServletContext servletContext1 = this.get<span class="hljs-constructor">ServletContext()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(servletContext);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(servletContext1);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(servletContext<span class="hljs-operator"> == </span>servletContext1);<br>        <span class="hljs-comment">//两种方式获取的是一个ServletContext对象</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="13-3-功能"><a href="#13-3-功能" class="headerlink" title="13.3 功能"></a>13.3 功能</h3><h4 id="1-获取MIME类型："><a href="#1-获取MIME类型：" class="headerlink" title="1. 获取MIME类型："></a>1. 获取MIME类型：</h4><ul><li>MIME 类型：在互联网通信过程中定义的一种文件数据类型</li><li>格式：大数据类型/小数据类型  比如：text / html  , image/jpeg</li><li>获取：String getMimeType(String file):通过文件名（包含扩展名）获取MIME的值<ul><li>扩展名对应的MIME可以去tomcat — conf - web.xml中查看</li></ul></li></ul><p><font color="cornflowerblue"><strong>演示案例：</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/scd2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletContextDemo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        ServletContext servletContext = req.getServletContext();<br>        <span class="hljs-comment">//定义一个文件名</span><br>        String fileName = <span class="hljs-string">&quot;index.html&quot;</span>;<br>        <span class="hljs-comment">//获取MIME</span><br>        String mimeType = servletContext.getMimeType(fileName);<br>        System.out.println(mimeType);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-域对象：可以共享数据"><a href="#2-域对象：可以共享数据" class="headerlink" title="2. 域对象：可以共享数据"></a>2. 域对象：可以共享数据</h4><ul><li><p><strong>功能：所有域对象都有该功能</strong></p><ul><li><strong>void setAttribute(String name,Object obj)</strong>  :  存储数据</li><li><strong>Object getAttitude(String name)</strong>  :  通过键获取值</li><li><strong>void removeAttribute(String name)</strong>   :   通过键移除键值对</li></ul></li><li><p><strong>作用域：</strong></p><p>​    <font color="red">最大范围，所有用户的所有数据</font></p></li></ul><p><font color="cornflowerblue"><strong>演示案例：定义两个Servlet，不经过转发获取数据</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/scd3&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletContextDemo3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        ServletContext servletContext = req.getServletContext();<br>        servletContext.setAttribute(<span class="hljs-string">&quot;info&quot;</span>, <span class="hljs-string">&quot;牛逼&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/scd4&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletContextDemo4</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        ServletContext servletContext = req.getServletContext();<br>        Object info = servletContext.getAttribute(<span class="hljs-string">&quot;info&quot;</span>);<br>        System.out.println(info);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-获取文件的服务器真实存储路"><a href="#3-获取文件的服务器真实存储路" class="headerlink" title="3. 获取文件的服务器真实存储路"></a>3. 获取文件的服务器真实存储路</h4><p><font color="cornflowerblue"><strong>演示案例：</strong></font></p><ol><li>分别在src,web,WEB-INF 下创建a.txt, b.txt , c.txt</li></ol><p><img src="/color-ful/img/javaee/image-20210122021628423.png" alt="image-20210122021628423"></p><ol start="2"><li>测试案例</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/scd6&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletContextDemo6</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        ServletContext servletContext = req.getServletContext();<br>        <span class="hljs-comment">//获取web目录下的资源</span><br>        String realPath = servletContext.getRealPath(<span class="hljs-string">&quot;/b.txt&quot;</span>);<span class="hljs-comment">// ‘/’</span><br>        <br>        <br>        <br>        <br>        System.out.println(realPath);<br><br>        <span class="hljs-comment">//获取WEB-INF下的资源:到文件夹中找对应文件对比着写. </span><br>        realPath = servletContext.getRealPath(<span class="hljs-string">&quot;/WEB-INF/c.txt&quot;</span>);<br>        System.out.println(realPath);<br><br>        <span class="hljs-comment">//src下的文件都会被放到WEB-INF下的classes路径中</span><br>        realPath = servletContext.getRealPath(<span class="hljs-string">&quot;/WEB-INF/classes/a.txt&quot;</span>);<br>        System.out.println(realPath);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="13-4-文件下载"><a href="#13-4-文件下载" class="headerlink" title="13.4 文件下载"></a>13.4 文件下载</h3><p>​    <strong>需求：</strong></p><pre><code>    1. 在一个html文件中写一个超链接      2. 点击超链接，弹出下载提示框     - 如果超链接的 href属性直接指向图片路径，因为浏览器解析器可以解析图片，所以会直接显示图片而不是下载，但是如果src指向视频，因为浏览器无法解析视频，就会默认的弹出下载框。                    3. 下载图片</code></pre><p>  <strong>分析：</strong></p><p>​    需要使用响应头设置资源的打开方式，否则图片无法通过超链接下载</p><ul><li>Content-disposition ：attachment ; filename=xxx</li></ul><p><strong>步骤：</strong></p><ol><li>定义页面，编辑超链接href属性，指向Servlet, 传递资源的名称：filename</li><li>定义servlet<ul><li>获取文件名</li><li>指定response的响应头：<ul><li>Content-disposition ：attachment ; filename=xxx</li><li>MIME</li></ul></li><li>使用字节输入流加载文件进内存<ul><li>使用ServletContext对象获取实际路径</li></ul></li><li>将数据写出到response输出流</li></ul></li></ol><p><font color="cornflowerblue"><strong>演示案例：</strong></font></p><ol><li><p>先在web路径下新建image文件夹，将图片放入该文件夹，再创建一个下载页面：download.html</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;a href=&quot;/book/image/Lucky.jpg&quot;&gt;小柯基&lt;/a&gt;<br>    &lt;a href=&quot;/book/downloadServlet?filename=Lucky.jpg&quot;&gt;小柯基&lt;/a&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>downloadServlet</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletOutputStream;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(&quot;/downloadServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DownloadServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 获取文件名称</span><br>        String filename = req.getParameter(<span class="hljs-string">&quot;filename&quot;</span>);<br>        <span class="hljs-comment">//找到文件真实路径</span><br>        ServletContext servletContext = <span class="hljs-keyword">this</span>.getServletContext();<br>        String path = servletContext.getRealPath(<span class="hljs-string">&quot;/image/&quot;</span>+filename);<br>        <span class="hljs-comment">//设置响应头</span><br>        <span class="hljs-comment">//MIME类型</span><br>        String mimeType = servletContext.getMimeType(filename);<br>        resp.setHeader(<span class="hljs-string">&quot;content-type&quot;</span>, mimeType);<br>        <span class="hljs-comment">//打开方式</span><br>        resp.setHeader(<span class="hljs-string">&quot;content-disposition&quot;</span>,<span class="hljs-string">&quot;attachment;filename=&quot;</span>+filename);<br>        <span class="hljs-comment">//获取输入输出流</span><br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(path);<br>        ServletOutputStream outputStream = resp.getOutputStream();<br>        <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((len = fis.read(bytes)) != <span class="hljs-number">0</span>) &#123;<br>            outputStream.write(bytes, <span class="hljs-number">0</span>, len);<br>        &#125;<br><br>        <span class="hljs-comment">//释放资源</span><br>        fis.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="14-会话技术"><a href="#14-会话技术" class="headerlink" title="14. 会话技术"></a>14. 会话技术</h2><p><strong>概述:</strong></p><p>​    一次会话中包含多次请求和相应。并且在会话范围内可以共享数据</p><blockquote><p>会话就和谈话的过程一样，你来我往很多次问答。</p></blockquote><p><strong>功能：</strong></p><p>​    共享技术</p><p><strong>分类：</strong></p><pre><code>1. 客户端会话技术Cookie 2. 服务器端会话技术：Session</code></pre><h3 id="14-1-Cookie"><a href="#14-1-Cookie" class="headerlink" title="14.1 Cookie"></a>14.1 Cookie</h3><ul><li>概述：客户端会话技术，将数据保存到客户端</li><li>步骤：<ol><li> 创建Cookie对象，绑定参数</li></ol><ul><li>new Cookie(String name ,String value)</li></ul><ol start="2"><li><p>发送Cookie对象</p><ul><li>reponse . addCookie(String name)</li></ul></li><li><p>获取Cookie对象，拿到对象</p><ul><li>Cookie[]  request.getCookies()</li></ul></li></ol></li></ul><h3 id="14-2-入门案例："><a href="#14-2-入门案例：" class="headerlink" title="14.2 入门案例："></a>14.2 入门案例：</h3><p><font color="cornflowerblue"><strong>测试案例：</strong></font></p><ol><li>CookieServlet</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-meta">@WebServlet</span>(<span class="hljs-string">&quot;/cookieServlet&quot;</span>)<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CookieServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doPost(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>            <span class="hljs-comment">//获取cookie对象</span><br>        <span class="hljs-type">Cookie</span> cookie = <span class="hljs-keyword">new</span> <span class="hljs-type">Cookie</span>(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>);<br>        <span class="hljs-comment">//发送cookie</span><br>        resp.addCookie(cookie);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>CookieServlet2</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.Cookie;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(&quot;/cookieServlet2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CookieServlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>            <span class="hljs-comment">//获取cookie</span><br>        Cookie[] cookies = req.getCookies();<br>        <span class="hljs-comment">//获取数据，遍历cookie</span><br>        <span class="hljs-keyword">if</span> (cookies != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>                String name = cookie.getName();<br>                String value = cookie.getValue();<br>                System.out.println(name+<span class="hljs-string">&quot;:&quot;</span>+value);<br>            &#125;<br>        &#125;<br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>通过浏览器分别访问这两个servlet,并且读取cookie中的数据</p><h3 id="14-3-原理图"><a href="#14-3-原理图" class="headerlink" title="14.3 原理图"></a>14.3 原理图</h3><p><img src="/color-ful/img/javaee/image-20210122021628d423.png" alt="image-20210123125657505"></p><h3 id="14-4-注意事项"><a href="#14-4-注意事项" class="headerlink" title="14.4 注意事项"></a>14.4 注意事项</h3><ol><li>一次发送多个cookie</li></ol><ul><li>创建多个cookie对象，多次调用addCookie（）方法</li></ul><ol start="2"><li><p>Cookie在浏览器中保存多长时间</p><ul><li>默认清空下，当浏览器关闭，Cookie数据被销毁</li><li>持久化存储：<ul><li>setMaxAge（intt seconds）：<ul><li>seconds:<ol><li>正数：将Cookie数据写到硬盘文件中，持久化存储 ：second具体的数值表示文件存活的时长，以秒为单位。</li><li>负数：默认值</li><li>0：删除cookie信息，因为服务器无法直接操作用户电脑。</li></ol></li></ul></li></ul></li></ul></li><li><p>Tomcat 8 版本之前，不能直接存储中文数据。 8版本之后，可以直接存储中文</p></li><li><p>Cookie的获取范围</p><p>一个服务器多个web项目</p><ul><li>默认情况下一个tomcat服务器中，多个web项目中的cookie是不能共享的</li><li>我们可以方法设置：setPath(“/“)，这样cookie就可以共享了</li></ul><p>不同tomcat服务器</p><ul><li>通过setDomain（）方法，设置相同的一级域名，那么这些一级域名相同的服务器间cookie可以共享<ul><li>tieba.baidu.com  baidu.com就是一级域名.</li></ul></li></ul></li></ol><h3 id="14-5-Cookie的特点"><a href="#14-5-Cookie的特点" class="headerlink" title="14.5 Cookie的特点"></a>14.5 Cookie的特点</h3><ol><li>cookie存储数据在客户端浏览器不安全</li><li>大小有限制：单个Cookie的大小为 4KB， 同一个域名下的总cookie数 不超过 20 个</li></ol><h3 id="14-6-Cookie的作用"><a href="#14-6-Cookie的作用" class="headerlink" title="14.6 Cookie的作用"></a>14.6 Cookie的作用</h3><ol><li>存储少量，内容不敏感的作用</li><li>在不登陆的情况下，完成服务器对客户端的身份识别（主要用途）<ul><li>比如：用户在不登陆百度的情况下对百度页面进行的个性化设置信息，会被存储在cookie中，下次访问百度。浏览器带着cookie的信息，百度服务器就可以识别其身份，展示用户个性设置的页面</li></ul></li></ol><h3 id="14-7-练习"><a href="#14-7-练习" class="headerlink" title="14.7 练习"></a>14.7 练习</h3><p> <strong>需求：</strong>访问网站时给出上一次登录信息：如果是第一次则显示首次登录。</p><p><strong>分析：</strong></p><pre><code>1. 可以采用Cookie完成 2. 在服务器中的Servlet判断是否有一个lastTime的cookie  - 有：则不是第一次访问     - 响应数据     - 更新Cookie - 没有：则是第一次访问   - 响应：欢迎您，您是首次访问   - 添加cookie:lastTime = 当前时间戳</code></pre><p><font color="cornflowerblue"><strong>代码实现：</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@WebServlet(&quot;/cookie3&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CookieServlet3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>         <span class="hljs-comment">//设置响应编码集</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br><br>          <span class="hljs-comment">//1. 获取所有Cookie</span><br>        Cookie[] cookies = req.getCookies();<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<span class="hljs-comment">//标记是否有lastTime</span><br>        <span class="hljs-comment">//2.遍历数组</span><br>        <span class="hljs-keyword">if</span> (cookies != <span class="hljs-keyword">null</span> &amp;&amp; cookies.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>                <span class="hljs-comment">//3. 获取cookie名称</span><br>                String name = cookie.getName();<br>                <span class="hljs-comment">//4.判断</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;lastTime&quot;</span>.equals(name)) &#123;<br>                    <span class="hljs-comment">//存在，不是第一次访问</span><br>                    <span class="hljs-comment">//响应数据</span><br>                    String value = cookie.getValue();<br>                    resp.getWriter().write(<span class="hljs-string">&quot;&lt;h1&gt;您上一次访问的时间是：&quot;</span>+value+<span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>);<br>                    <span class="hljs-comment">//设置新的cookie时间</span><br>                    Date date = <span class="hljs-keyword">new</span> Date();<br>                    SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br>                    String newDate = sdf.format(date);<br>                    cookie.setValue(newDate);<br>                    <span class="hljs-comment">//设置cookie存活时间</span><br>                    cookie.setMaxAge(<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">30</span>);<span class="hljs-comment">//存活一个月</span><br>                    <span class="hljs-comment">//发送cookie</span><br>                    resp.addCookie(cookie);<br>                    flag = <span class="hljs-keyword">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//第一次访问</span><br>        <span class="hljs-keyword">if</span> (cookies == <span class="hljs-keyword">null</span> || cookies.length == <span class="hljs-number">0</span> || flag == <span class="hljs-keyword">false</span>) &#123;<br>            <span class="hljs-comment">//设置新的cookie时间</span><br>            Date date = <span class="hljs-keyword">new</span> Date();<br>            SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br>            String newDate = sdf.format(date);<br>            Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;lastTime&quot;</span>,newDate);<br>            <span class="hljs-comment">//设置cookie存活时间</span><br>            cookie.setMaxAge(<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">30</span>);<span class="hljs-comment">//存活一个月</span><br>            resp.addCookie(cookie);<br>            flag = <span class="hljs-keyword">true</span>;<br><br>            resp.getWriter().write(<span class="hljs-string">&quot;&lt;h1&gt;您是第一次访问&lt;/h1&gt;&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​        写好之后会报错，因为 时间格式中有一个空格，虽然Tomcat8 之后对于中文字符可以支持，但是对于特殊字符它还是不支持，所以我们需要将Cookie数据转化为URL编码存储，使用URL解码来解析。</p><p>​    <font color="red">所以：我们需要在存储数据前进行URL编码，在获取数据后进行URL解码</font></p><p><img src="/color-ful/img/javaee/image-20210124004826118.png" alt="image-20210124004826118"></p><h2 id="15-JSP"><a href="#15-JSP" class="headerlink" title="15. JSP"></a>15. JSP</h2><h3 id="15-1-概述："><a href="#15-1-概述：" class="headerlink" title="15.1 概述："></a>15.1 概述：</h3><p>​    JSP - Java Server Page : Java 服务器端页面，该页面中可以写html标签，也可以写Java代码。可以简化动态内容书写量</p><p><font color="cornflowerblue">演示案例：</font></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;$Title$&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>     &lt;%<br>       System.out.println(<span class="hljs-string">&quot;Hello JSP&quot;</span>);<br>     %&gt;<br>  &lt;h1&gt;Hello JSP&lt;/h1&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>当你浏览该页面时，页面既能输出html标签，服务器中又能输出</p><h3 id="15-2-原理："><a href="#15-2-原理：" class="headerlink" title="15.2 原理："></a>15.2 原理：</h3><p>​        JSP页面本质是一个Servlet</p><blockquote><p>因为，能在web服务器运行的java程序肯定是Servlet。我们通过前面的案例也能体会到如果我们通过Servlet的response对象响应静态资源工作量非常大的。所以将动态资源和静态资源统一定义在JSP中，服务器启动后，会将JSP转换成对应的Servlet的class字节码文件。里面的方法就是处理动态资源 和 对静态内容的输出</p></blockquote><h3 id="15-3-脚本："><a href="#15-3-脚本：" class="headerlink" title="15.3 脚本："></a>15.3 脚本：</h3><p>​    就是定义了JSP中Java代码的书写方式</p><ol><li><code>&lt;% 代码%&gt;</code>: 定义的java代码，相当于定义在Servlet中的service()方法中</li><li><code>&lt;%! 代码%&gt;</code>：定义的Java代码，相当于定义在Servlet中的成员位置，即成员变量和成员方法</li><li><code>&lt;%= 代码%&gt;</code>：输出语句，使用JSP的内置对象 Out（后面讲）</li></ol><p><strong><font color="cornflowerblue">演示案例：</font></strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;$Title$&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>     &lt;%<br>       System.out.println(<span class="hljs-string">&quot;Hello JSP&quot;</span>);<br>     %&gt;<br>      <br>     &lt;%! <span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;%&gt;<br>     &lt;% i = <span class="hljs-number">3</span>; %&gt;<br>     &lt;%= i%&gt;<br>  &lt;h1&gt;Hello JSP&lt;/h1&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="/color-ful/img/javaee/image-20210124012418635.png" alt="image-20210124012418635"></p><h3 id="15-4-内置对象："><a href="#15-4-内置对象：" class="headerlink" title="15.4 内置对象："></a>15.4 内置对象：</h3><ol><li><p><strong>概述：</strong>直接在JSP页面中，不需要获取和创建，可以直接使用的对象</p></li><li><p><strong>分类</strong>：九大内置对象</p><ul><li><strong>request</strong></li><li><strong>response</strong></li><li><strong>session</strong></li><li><strong>out</strong></li><li><strong>page</strong></li><li><strong>application</strong></li><li><strong>pageContext</strong></li><li><strong>config</strong></li><li><strong>exception</strong></li></ul><table><thead><tr><th align="center">内置对象名</th><th align="center">真实数据类型</th><th>作用</th></tr></thead><tbody><tr><td align="center"><strong>request</strong></td><td align="center"><strong>HttpServletRequest</strong></td><td><strong>一次请求中共享数据</strong></td></tr><tr><td align="center"><strong>response</strong></td><td align="center"><strong>HttpServletResponse</strong></td><td><strong>响应对象</strong></td></tr><tr><td align="center"><strong>session</strong></td><td align="center"><strong>HttpSession</strong></td><td><strong>一次会话中共享数据</strong></td></tr><tr><td align="center"><strong>out</strong></td><td align="center"><strong>JspWriter</strong></td><td><strong>输出对象，输出数据到当前页面</strong></td></tr><tr><td align="center"><strong>page</strong></td><td align="center"><strong>Objcet(this-当前jsp页面)</strong></td><td><strong>当前页面的对象</strong></td></tr><tr><td align="center"><strong>application</strong></td><td align="center"><strong>ServletContext</strong></td><td><strong>所有用户间共享数据</strong></td></tr><tr><td align="center"><strong>pageContext</strong></td><td align="center"><strong>PageContext</strong></td><td><strong>当前页面共享数据，还可以获取其他8个内置对像</strong></td></tr><tr><td align="center"><strong>config</strong></td><td align="center"><strong>ServletConfig</strong></td><td><strong>Servlet配置对象</strong></td></tr><tr><td align="center"><strong>exception</strong></td><td align="center"><strong>Throwable</strong></td><td><strong>只有异常页面有该对象</strong></td></tr></tbody></table></li><li></li><li><p> <strong>response.getWriter()  和  out对象输出</strong>：由于web服务器的工作机制，对于页面的输出，服务器都会先访问response缓冲区，再访问out缓冲区，所以无论 response.getWriter()的编写位置在哪里，它都会先与out对象的输出。</p></li></ol><h3 id="15-5-Session"><a href="#15-5-Session" class="headerlink" title="15.5 Session"></a>15.5 Session</h3><ol><li><p><strong>概念</strong>:服务器端会话技术 - HttpSession</p></li><li><p><strong>功能</strong>：</p><ul><li>获取HttpSession对象<ul><li>request.getSession()</li></ul></li><li>使用HttpSession对象：<ul><li>Object getAttribute(String name)</li><li>void setAttribute(String name Object value)</li><li>void removeAttribute(String name)</li></ul></li></ul></li><li><p><strong>原理：</strong></p><p>​    <font color="red">session的实现时依赖于cookie的。</font></p><p>​        第一次发送请求，服务器会创建Session对象，并设置一个唯一的ID属性，并在相应时将该Session对象的的ID 存入响应头：set-cookie : JSESSIONID= id属性。</p><p>​        当客户端发送第二次请求时，cookie中就会有对应的Session id , web服务器读取到头信息后，就会将两次会话中使用的Session对象指向同一个session对象。</p></li><li><p><strong>注意</strong>：</p><ol><li><p>客户端关闭后，再次开启客户端获取的Sesion是同一个吗？</p><ul><li>默认情况下不是，因为客户端关闭，cookie会被清空</li><li>如果需要相同，可以通过设置cookie</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/session1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SessionDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>         <span class="hljs-comment">//获取session对象</span><br>        HttpSession session = req.getSession();<br>        <span class="hljs-comment">//System.out.println(session);//没有设置cookie存活时间前，session不是同一个</span><br>        <span class="hljs-comment">//设置cookie存活时长</span><br>        Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;JSESSIONID&quot;</span>, session.getId());<br>        cookie.setMaxAge(<span class="hljs-number">60</span> * <span class="hljs-number">60</span>);<br>        resp.addCookie(cookie);<br>        System.out.println(session);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li> 服务器重新启动后，两个会话的Sesion是同一个吗？</li></ol><ul><li><p>因为Session 对象会被清空，所以很难相同。但是我们不能因为重启服务器而丢失Session数据</p><ul><li>解决：Session的钝化 和 活化<ol><li>钝化：就是将Seession对象序列化到磁盘上</li><li>活化：在服务器启动后，将session文件反序列化成Session对象即可。</li><li><strong>注意：</strong>Tomcat可以自动完成Session的活化和钝化，但是Idea无法演示出效果，因为idea重启服务器会先将work目录删除，再重新创建。而钝化的session文件就是在work目录中</li></ol></li></ul><ol start="3"><li>Session的什么时候销毁</li></ol></li><li><p>服务器关闭</p></li><li><p>session对象调用invalidate():将自己杀死</p></li><li><p>session默认失效时间：30分钟</p><ul><li>可以通过tomcat — &gt; conf —-&gt;web.xml配置失效时间</li><li><img src="/color-ful/C:/Users\30526\AppData\Roaming\Typora\typora-user-images\image-20210124024029769.png" alt="image-20210124024029769"></li></ul></li></ul></li></ol></li><li><p><strong>特点：</strong></p><ul><li>session 用于存储一次会话中多次请求的数据，存储在服务器端</li><li>session可以存储任意类型，任意大小的数据</li></ul></li><li><p>Session 与 cookie的区别</p><ul><li>session存储在服务器端，cookie存储在客户端</li><li>session没有数据大小的限制，Cookie有</li><li>session数据安全，cookie相对不安全</li></ul></li></ol><h3 id="15-6-登录案例优化"><a href="#15-6-登录案例优化" class="headerlink" title="15.6 登录案例优化"></a>15.6 登录案例优化</h3><ol><li> 将验证码实际内容存储到session对象中进行共享</li><li>将错误提示信息显示在对应标签后部</li></ol><p><img src="/color-ful/img/javaee/image-20210124031848431.png" alt="image-20210124031848431"></p><ol start="3"><li> 将验证码设置为一次性验证码</li></ol><h3 id="15-7-JSP指令"><a href="#15-7-JSP指令" class="headerlink" title="15.7 JSP指令"></a>15.7 JSP指令</h3><ol><li><strong>作用：</strong>用于配置JSP页面，导入资源文件</li><li><strong>格式：</strong>&lt;%@ 指令名称 属性名1=属性值1  属性名1=属性值1 %&gt;</li><li><strong>分类：</strong><ul><li>page：配置JSP页面</li><li>include：页面包含。（基本不用）</li><li>taglib：导入资源，后面使用的JSTL标签就需要使用该指令导入</li></ul></li></ol><h3 id="15-6-page指令"><a href="#15-6-page指令" class="headerlink" title="15.6 page指令"></a>15.6 page指令</h3><ol><li>常见属性：<ul><li><strong>contentType</strong>:等同于response.setContentType()：设置响应体的Mime类型及编码集。并且可以设置当前JSP的编码集（高级开发工具才有的功能）</li><li><strong>pageEncoding</strong>: 当前页面的编码集</li><li><strong>language</strong>:jsp语言，当年想统一所有表现层语言，结果没实现，所以现在的language只有 java这个属性值。</li><li><strong>buffer</strong>:缓冲区大小，因为jsp中使用输出流，需要缓冲区</li><li><strong>import</strong> ：导包，高级开发工具会自动导包</li><li><strong>errorPage:</strong> 当前页面如果报错，会自动跳转至该属性配置的页面。<ul><li>演示：在演示案例页面中写入<code>&lt;% int i = 3 /0%&gt;</code>,指定errorPage属性跳转路径，即可看到效果</li></ul></li><li><strong>isErrorPage</strong>:标注当前页面是否是错误页面，如果为 true， 则可以使用 Exception这个内置对象</li></ul></li></ol><h3 id="15-7-taglib"><a href="#15-7-taglib" class="headerlink" title="15.7 taglib"></a>15.7 taglib</h3><p> 我们常用于引入标签库，后面学习JSTL会用到</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><ul><li>prefix : 前缀，自定义</li></ul><h3 id="15-8-mvc开发模式"><a href="#15-8-mvc开发模式" class="headerlink" title="15.8 mvc开发模式"></a>15.8 mvc开发模式</h3><p>​        早期还没有jsp时，都是使用servlet开发，只能使用response输出标签数据，工作量非常大。后来jsp出现后，简化了 servlet的开发，开发人员开始过度的使用jsp，导致前后端无法分离，并且代码结构混乱，阅读性非常差。为了解决这写问题 后来的java开发就借鉴了MVC开发模式，具体的规定了什么代码写什么位置，使得程序设计更加合理。</p><ol><li><strong>MVC</strong></li></ol><ul><li><p>M - Model 模型  <font color="limegreen">JavaBean</font></p><ul><li>完成具体的业务操作：比如：查询数据库，封装对象等。</li></ul></li><li><p> V - View 视图层  <font color="limegreen">JSP</font></p></li><li><p>展示数据</p></li><li><p>C - Controller 控制器  <font color="limegreen">Servlet</font></p><ul><li>获取用户的输入（请求）</li><li>调用模型</li><li>将数据交给视图层展示</li></ul></li></ul><p><img src="/color-ful/img/javaee/mvc%E5%9B%BE%E7%A4%BA.png" alt="image-20210124043647608"></p><ol start="2"><li> <strong>优点</strong></li></ol><ul><li>耦合性低：将代码分为三部分，各司其职，便于维护，</li><li>重用性高：</li></ul><ol start="3"><li><strong>缺点</strong><ul><li>使得架构变复杂，对程序员要求比较高。</li></ul></li></ol><p>因为三部分各司其职，所以JSP页面仅仅做展示，所以我们需要学习替换他的两外两个技术 EL表达式 和 JSTL标签。</p><h2 id="16-EL表达式"><a href="#16-EL表达式" class="headerlink" title="16 EL表达式"></a>16 EL表达式</h2><h3 id="16-1-概述"><a href="#16-1-概述" class="headerlink" title="16.1 概述"></a>16.1 概述</h3><p>EL - EXpression Language 表达式语言，jsp本使支持EL表达式</p><h3 id="16-2-作用"><a href="#16-2-作用" class="headerlink" title="16.2 作用"></a>16.2 作用</h3><p>替换 和 简化 jsp页面中java代码的编写</p><h3 id="16-3-语法"><a href="#16-3-语法" class="headerlink" title="16.3 语法"></a>16.3 语法</h3><p>${  表达式 }</p><p><font color="cornflowerblue"><strong>演示案例：</strong></font></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123; <span class="hljs-number">3</span>&gt;<span class="hljs-number">4</span>&#125;<br>结果：页面会直接输出运算结果<br><br>\$&#123;表达式&#125;<br>结果：他会原样输出<br></code></pre></td></tr></table></figure><h3 id="16-4-使用"><a href="#16-4-使用" class="headerlink" title="16.4 使用"></a>16.4 使用</h3><ol><li> <strong>运算</strong></li></ol><ul><li>算数运算：+，- ，*，/ ，%</li><li>比较运算：&gt;  ,&lt;  ,  &gt;=  ,  &lt; =  , &gt;= , == ,!=</li><li>逻辑运算：&amp;&amp; (and) ,  ||(or) , ! (非)</li><li>空运算符：empty 用于判断 字符串，集合 数组对象是否为null 并且长度是否为0</li></ul>   <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;h3&gt;算数运算符&lt;/h3&gt;<br>$&#123;<span class="hljs-number">1</span>+<span class="hljs-number">2</span> &#125;&lt;br&gt;<br>$&#123;<span class="hljs-number">1</span>-<span class="hljs-number">2</span> &#125;&lt;br&gt;<br>$&#123;<span class="hljs-number">1</span>*<span class="hljs-number">2</span> &#125;&lt;br&gt;<br>$&#123;<span class="hljs-number">1</span>/<span class="hljs-number">2</span> &#125;&lt;br&gt;<br>$&#123;<span class="hljs-number">1</span>%<span class="hljs-number">2</span> &#125;&lt;br&gt;<br><br>&lt;h3&gt;逻辑运算符&lt;/h3&gt;<br>$&#123; <span class="hljs-number">3</span>&gt;<span class="hljs-number">4</span> &amp;&amp; <span class="hljs-number">5</span>&lt;<span class="hljs-number">6</span>&#125;<br>$&#123; <span class="hljs-number">3</span>&gt;<span class="hljs-number">4</span> and <span class="hljs-number">5</span>&lt;<span class="hljs-number">6</span>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p><strong>获取值</strong></p><ul><li>EL表达式只能从域对象中获取值</li><li>语法：${域名称. 键名} 从指定域中获取指定键的值<ul><li>域名称：<ol><li>pageScope   —&gt;pageContext</li><li>requestScope —&gt; requestScope</li><li>sessionScope —&gt;session</li><li>applicationScope —&gt;application</li></ol></li><li>举例：取出request域中的 name属性值：${request.name}</li></ul></li></ul></li></ol><p><strong><font color="cornflowerblue">演示案例1：</font></strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    request.setAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;刘德华&quot;</span>);<br>%&gt;<br>$&#123;requestScope.name&#125;<br>$&#123;requestScope.age&#125; 读不出数据也不会显示<span class="hljs-keyword">null</span>，而是显示空格<br></code></pre></td></tr></table></figure><p><strong><font color="cornflowerblue">演示案例2：</font></strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    request.setAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;刘德华&quot;</span>);<br>    session.setAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;周杰伦&quot;</span>)<br>%&gt;<br>$&#123;name&#125;<br></code></pre></td></tr></table></figure><p><font color="red">语法2：${ 键名} :默认会从最小的域以此向上寻找</font></p><h3 id="16-5-获取对象-和-集合"><a href="#16-5-获取对象-和-集合" class="headerlink" title="16.5 获取对象 和 集合"></a>16.5 获取对象 和 集合</h3><ol><li>user类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.domain;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> Date birthday;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age, Date birthday)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.birthday = birthday;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 逻辑视图</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getBirStr</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-keyword">if</span>(birthday != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">//1.格式化日期对象</span><br>            SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>            <span class="hljs-comment">//2.返回字符串即可</span><br>            <span class="hljs-keyword">return</span> sdf.format(birthday);<br><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getBirthday</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> birthday;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBirthday</span><span class="hljs-params">(Date birthday)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.birthday = birthday;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>演示案例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;el获取数据&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>    &lt;%<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        user.setAge(<span class="hljs-number">23</span>);<br>        user.setBirthday(<span class="hljs-keyword">new</span> Date());<br><br><br>        request.setAttribute(<span class="hljs-string">&quot;u&quot;</span>,user);<br><br><br>        List list = <span class="hljs-keyword">new</span> ArrayList();<br>        list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(user);<br><br>        request.setAttribute(<span class="hljs-string">&quot;list&quot;</span>,list);<br><br><br>        Map map = <span class="hljs-keyword">new</span> HashMap();<br>        map.put(<span class="hljs-string">&quot;sname&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;gender&quot;</span>,<span class="hljs-string">&quot;男&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;user&quot;</span>,user);<br><br>        request.setAttribute(<span class="hljs-string">&quot;map&quot;</span>,map);<br><br>    %&gt;<br><br>&lt;h3&gt;el获取对象中的值&lt;/h3&gt;<br>$&#123;requestScope.u&#125;&lt;br&gt; 这里打印的是对象的字符串表示形式<br><br>&lt;%--<br>    * 通过的是对象的属性来获取<br>        * setter或getter方法，去掉set或get，在将剩余部分，首字母变为小写。<br>        * setName --&gt; Name --&gt; name<br>--%&gt;<br><br>    $&#123;requestScope.u.name&#125;&lt;br&gt;<br>    $&#123;u.age&#125;&lt;br&gt;<br>    $&#123;u.birthday&#125;&lt;br&gt;<br>    $&#123;u.birthday.month&#125;&lt;br&gt;<span class="hljs-comment">//调用的Date类中的getMonth方法</span><br><br>    <span class="hljs-comment">//如果我们想获取到格式化后的日期，我们可以去user类中提供一个方法getBirStr()(下面定义)</span><br>    $&#123;u.birStr&#125;&lt;br&gt;<br><br>    &lt;h3&gt;el获取List值&lt;/h3&gt;<br>    $&#123;list&#125;&lt;br&gt;<br>    $&#123;list[<span class="hljs-number">0</span>]&#125;&lt;br&gt;<br>    $&#123;list[<span class="hljs-number">1</span>]&#125;&lt;br&gt;<br>    $&#123;list[<span class="hljs-number">10</span>]&#125;&lt;br&gt;<span class="hljs-comment">//越界 不会报错，显示空</span><br><br>    $&#123;list[<span class="hljs-number">2</span>].name&#125;<br><br>    &lt;h3&gt;el获取Map值&lt;/h3&gt;<br>    $&#123;map.gender&#125;&lt;br&gt;<br>    $&#123;map[<span class="hljs-string">&quot;gender&quot;</span>]&#125;&lt;br&gt;<br>    $&#123;map.user.name&#125;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="16-6-隐式对象"><a href="#16-6-隐式对象" class="headerlink" title="16.6 隐式对象"></a>16.6 隐式对象</h3><p><strong>概述：</strong>el表达式中直接可以使用的对象，</p><p>只需要知道通过pageContext对象可以获取其他8个jsp内置对象</p><p>常用的是获取request对象,再获取项目的虚拟目录</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123;pageContext.request&#125;&lt;br&gt;<br>&lt;h4&gt;在jsp页面动态获取虚拟目录&lt;/h4&gt;<br>$&#123;pageContext.request.contextPath&#125;<br></code></pre></td></tr></table></figure><h2 id="17-JSTL-标签"><a href="#17-JSTL-标签" class="headerlink" title="17. JSTL 标签"></a>17. JSTL 标签</h2><h3 id="17-1-概述："><a href="#17-1-概述：" class="headerlink" title="17.1  概述："></a>17.1  概述：</h3><p>JavaServer Pages Tag Library  JSP标准标签库 ，用于简化和替换jsp页面上的java代码</p><h3 id="17-2-使用"><a href="#17-2-使用" class="headerlink" title="17.2 使用"></a>17.2 使用</h3><ol><li>导入jstl相关jar包</li><li>引入标签库：taglib指令：  &lt;%@ taglib %&gt;</li><li>使用标签</li></ol><h3 id="17-3-if"><a href="#17-3-if" class="headerlink" title="17.3 if"></a>17.3 if</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.List&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.ArrayList&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br><br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;if标签&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>    &lt;%--<br><br>    c:<span class="hljs-keyword">if</span>标签<br>        <span class="hljs-number">1.</span> 属性：<br>            * test 必须属性，接受<span class="hljs-keyword">boolean</span>表达式<br>                * 如果表达式为<span class="hljs-keyword">true</span>，则显示<span class="hljs-keyword">if</span>标签体内容，如果为<span class="hljs-keyword">false</span>，则不显示标签体内容<br>                * 一般情况下，test属性值会结合el表达式一起使用<br><br>        <span class="hljs-number">2.</span> 注意：c:<span class="hljs-keyword">if</span>标签没有<span class="hljs-keyword">else</span>情况，想要<span class="hljs-keyword">else</span>情况，则可以在定义一个c:<span class="hljs-keyword">if</span>标签<br><br><br>    --%&gt;<br><br>    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;true&quot;</span>&gt;<br>        &lt;h1&gt;我是真...&lt;/h1&gt;<br>    &lt;/c:if&gt;<br>    &lt;br&gt;<br><br>    &lt;%<br>        <span class="hljs-comment">//判断request域中的一个list集合是否为空，如果不为null则显示遍历集合</span><br><br>        List list = <span class="hljs-keyword">new</span> ArrayList();<br>        list.add(<span class="hljs-string">&quot;aaaa&quot;</span>);<br>        request.setAttribute(<span class="hljs-string">&quot;list&quot;</span>,list);<br><br><span class="hljs-comment">//判断number的奇偶性</span><br>        request.setAttribute(<span class="hljs-string">&quot;number&quot;</span>,<span class="hljs-number">4</span>);<br><br>    %&gt;<br><br>    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;not empty list&#125;&quot;</span>&gt;<br>        遍历集合...<br><br>    &lt;/c:if&gt;<br>    &lt;br&gt;<br><br>    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;number % 2 != 0&#125;&quot;</span>&gt;<br><br>            $&#123;number&#125;为奇数<br><br>    &lt;/c:if&gt;<br><br>    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;number % 2 == 0&#125;&quot;</span>&gt;<br><br>        $&#123;number&#125;为偶数<br><br>    &lt;/c:if&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="17-4-choose"><a href="#17-4-choose" class="headerlink" title="17.4 choose"></a>17.4 choose</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;choose标签&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>    &lt;%--<br>        完成数字编号对应星期几案例<br>            <span class="hljs-number">1.</span>域中存储一数字<br>            <span class="hljs-number">2.</span>使用choose标签取出数字         相当于<span class="hljs-keyword">switch</span>声明<br>            <span class="hljs-number">3.</span>使用when标签做数字判断         相当于<span class="hljs-keyword">case</span><br>            <span class="hljs-number">4.</span>otherwise标签做其他情况的声明  相当于<span class="hljs-keyword">default</span><br>    --%&gt;<br><br>    &lt;%<br>        request.setAttribute(<span class="hljs-string">&quot;number&quot;</span>,<span class="hljs-number">51</span>);<br>    %&gt;<br><br>    &lt;c:choose&gt;<br>        &lt;c:when test=&quot;$&#123;number == 1&#125;&quot;&gt;星期一&lt;/c:when&gt;<br>        &lt;c:when test=&quot;$&#123;number == 2&#125;&quot;&gt;星期二&lt;/c:when&gt;<br>        &lt;c:when test=&quot;$&#123;number == 3&#125;&quot;&gt;星期三&lt;/c:when&gt;<br>        &lt;c:when test=&quot;$&#123;number == 4&#125;&quot;&gt;星期四&lt;/c:when&gt;<br>        &lt;c:when test=&quot;$&#123;number == 5&#125;&quot;&gt;星期五&lt;/c:when&gt;<br>        &lt;c:when test=&quot;$&#123;number == 6&#125;&quot;&gt;星期六&lt;/c:when&gt;<br>        &lt;c:when test=&quot;$&#123;number == 7&#125;&quot;&gt;星期天&lt;/c:when&gt;<br><br>        &lt;c:otherwise&gt;数字输入有误&lt;/c:otherwise&gt;<br>    &lt;/c:choose&gt;<br><br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="17-5-foreach"><a href="#17-5-foreach" class="headerlink" title="17.5 foreach"></a>17.5 foreach</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.ArrayList&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.List&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br><br>&lt;%<span class="hljs-meta">@taglib</span> prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br><br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;foreach标签&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;%--<br><br>    foreach:相当于java代码的<span class="hljs-keyword">for</span>语句<br>        <span class="hljs-number">1.</span> 完成重复的操作<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i ++)&#123;<br><br>            &#125;<br>            * 属性：<br>                begin：开始值（包含）<br>                end：结束值（包含）<br>                <span class="hljs-keyword">var</span>：临时变量 - 相当于i<br>                step：步长，每次改变量<br>                varStatus:循环状态对象，在普通<span class="hljs-keyword">for</span>循环中 与 <span class="hljs-keyword">var</span> 相同<br>                    index:容器中元素的索引，从<span class="hljs-number">0</span>开始<br>                    count:循环次数，从<span class="hljs-number">1</span>开始<br>        <span class="hljs-number">2.</span> 遍历容器<br>            List&lt;User&gt; list;<br>            <span class="hljs-keyword">for</span>(User user : list)&#123;<br><br>            &#125;<br><br>            * 属性：<br>                items:容器对象-list 集合<br>                <span class="hljs-keyword">var</span>:容器中元素的临时变量 - 遍历操作中存储集合元素的临时变量<br>                varStatus:循环状态对象- 循环第几次<br>                    index:容器中元素的索引，从<span class="hljs-number">0</span>开始<br>                    count:循环次数，从<span class="hljs-number">1</span>开始<br><br><br>--%&gt;<br><span class="hljs-comment">//打印1-10的基数</span><br>&lt;c:forEach begin=<span class="hljs-string">&quot;1&quot;</span> end=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;i&quot;</span> step=<span class="hljs-string">&quot;2&quot;</span> varStatus=<span class="hljs-string">&quot;s&quot;</span>&gt;<br>    $&#123;i&#125; &lt;h3&gt;$&#123;s.index&#125;&lt;h3&gt; &lt;h4&gt; $&#123;s.count&#125; &lt;/h4&gt;&lt;br&gt;<br><br>&lt;/c:forEach&gt;<br><br>    &lt;hr&gt;<br><br><br>    &lt;%<br>        List list = <span class="hljs-keyword">new</span> ArrayList();<br>        list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br><br>        request.setAttribute(<span class="hljs-string">&quot;list&quot;</span>,list);<br><br><br>    %&gt;<br><span class="hljs-comment">//遍历集合</span><br>    &lt;c:forEach items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;str&quot;</span> varStatus=<span class="hljs-string">&quot;s&quot;</span>&gt;<br><br>            $&#123;s.index&#125; $&#123;s.count&#125; $&#123;str&#125;&lt;br&gt;<br><br>    &lt;/c:forEach&gt;<br><br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><strong>练习:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;test&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;%<br><br>    List list = <span class="hljs-keyword">new</span> ArrayList();<br>    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-keyword">new</span> Date()));<br>    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">24</span>,<span class="hljs-keyword">new</span> Date()));<br>    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">25</span>,<span class="hljs-keyword">new</span> Date()));<br><br>    request.setAttribute(<span class="hljs-string">&quot;list&quot;</span>,list);<br><br><br>%&gt;<br><br>&lt;table border=<span class="hljs-string">&quot;1&quot;</span> width=<span class="hljs-string">&quot;500&quot;</span> align=<span class="hljs-string">&quot;center&quot;</span>&gt;<br>    &lt;tr&gt;<br>        &lt;th&gt;编号&lt;/th&gt;<br>        &lt;th&gt;姓名&lt;/th&gt;<br>        &lt;th&gt;年龄&lt;/th&gt;<br>        &lt;th&gt;生日&lt;/th&gt;<br>    &lt;/tr&gt;<br>    &lt;%--数据行--%&gt;<br>    &lt;c:forEach items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;user&quot;</span> varStatus=<span class="hljs-string">&quot;s&quot;</span>&gt;<br><br>        &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;s.count % 2 != 0&#125;&quot;</span>&gt;<br><br>            &lt;tr bgcolor=<span class="hljs-string">&quot;red&quot;</span>&gt;<br>                &lt;td&gt;$&#123;s.count&#125;&lt;/td&gt;<br>                &lt;td&gt;$&#123;user.name&#125;&lt;/td&gt;<br>                &lt;td&gt;$&#123;user.age&#125;&lt;/td&gt;<br>                &lt;td&gt;$&#123;user.birStr&#125;&lt;/td&gt;<br>            &lt;/tr&gt;<br>        &lt;/c:if&gt;<br><br>        &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;s.count % 2 == 0&#125;&quot;</span>&gt;<br><br>            &lt;tr  bgcolor=<span class="hljs-string">&quot;green&quot;</span>&gt;<br>                &lt;td&gt;$&#123;s.count&#125;&lt;/td&gt;<br>                &lt;td&gt;$&#123;user.name&#125;&lt;/td&gt;<br>                &lt;td&gt;$&#123;user.age&#125;&lt;/td&gt;<br>                &lt;td&gt;$&#123;user.birStr&#125;&lt;/td&gt;<br>            &lt;/tr&gt;<br>        &lt;/c:if&gt;<br><br>    &lt;/c:forEach&gt;<br><br>&lt;/table&gt;<br><br><br><br><br><br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="18-过滤器"><a href="#18-过滤器" class="headerlink" title="18. 过滤器"></a>18. 过滤器</h2><h3 id="18-1-概述"><a href="#18-1-概述" class="headerlink" title="18.1  概述"></a>18.1  概述</h3><pre><code>   1. 概述：当访问服务器资源时，过滤器可以将请求拦截下来，进行一些特殊的功能  2. 作用：一般用于完成通用的操作，比如登录操作，统一编码处理，过滤敏感字符</code></pre><h3 id="18-2-快速入门"><a href="#18-2-快速入门" class="headerlink" title="18.2 快速入门"></a>18.2 快速入门</h3><p>​    步骤：</p><ol><li>定义一个类，实现接口Fileter</li><li>复写方法</li><li>配置拦截路径。</li></ol><p><strong><font color="cornflowerblue">演示案例</font></strong></p><p>创建一个类，实现Filter接口，启动服务器，如果没有放行代码，则jsp中内容将不会给展示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><span class="hljs-comment">//访问所有资源都会被执行</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FilterDemo1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;过滤器被执行。。。。&quot;</span>);<br>        <span class="hljs-comment">//放行</span><br>        filterChain.doFilter(servletRequest,servletResponse);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="18-3-执行流程"><a href="#18-3-执行流程" class="headerlink" title="18.3 执行流程"></a>18.3 执行流程</h3><p>通过代码来演示Filter的执行流程：</p><p>新建一个过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><span class="hljs-comment">//访问所有资源都会被执行</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FilterDemo2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;过滤器被执行。。。。&quot;</span>);<br>        <span class="hljs-comment">//放行</span><br>        filterChain.doFilter(servletRequest,servletResponse);<br><br>        System.out.println(<span class="hljs-string">&quot;过滤器又被执行了。。。&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再index.jsp中添加一条输出语句</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;$Title$&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>  &lt;%<br>    System.out.println(<span class="hljs-string">&quot;JSP被执行&quot;</span>);<br>  %&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/color-ful/img/javaee/image-20210127224246497.png" alt="image-20210127224246497"></p><p>​        为什么会这样呢？ 因为过滤器是对访问数据和响应数据进行处理的，所以访问前，过滤会执行一次，处理request中的对象，jsp页面执行完毕后，过滤器又会对response中的数据进行处理。</p><p>​      有一点需要注意的是，<font color="red">过滤器再次被执行就从 放行语句后开始执行</font></p><h3 id="18-4-过滤器配置：（只讲注解方式）"><a href="#18-4-过滤器配置：（只讲注解方式）" class="headerlink" title="18.4 过滤器配置：（只讲注解方式）"></a>18.4 过滤器配置：（只讲注解方式）</h3><ul><li>拦截路径配置：<pre><code>  1. 具体资源路径： /index.jsp   只有访问index.jsp资源时，过滤器才会被执行</code></pre><ol start="2"><li>拦截目录： /user/*    访问/user下的所有资源时，过滤器都会被执行</li><li>后缀名拦截： *.jsp        访问所有后缀名为jsp资源时，过滤器都会被执行</li><li>拦截所有资源：/*        访问所有资源时，过滤器都会被执行</li></ol></li><li>拦截方式配置：资源被访问的方式：直接访问，转发等<ol><li>注解配置：<ul><li>设置dispatcherTypes属性<ul><li>REQUEST：默认值。浏览器直接请求资源</li><li>FORWARD：转发访问资源</li><li>INCLUDE：包含访问资源</li><li>ERROR：错误跳转资源 ：jsp 中配置</li><li>ASYNC：异步访问资源</li></ul></li></ul></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(value = &quot;/index.jsp&quot;,dispatcherTypes = DispatcherType.REQUEST)</span><span class="hljs-comment">//配置一种方式</span><br><span class="hljs-meta">@WebFilter(value = &quot;/index.jsp&quot;,dispatcherTypes = &#123;DispatcherType.REQUEST,DispatcherType.FORWARD&#125;)</span><span class="hljs-comment">//配置多种访问方式被拦截</span><br></code></pre></td></tr></table></figure><h3 id="18-5-过滤器链"><a href="#18-5-过滤器链" class="headerlink" title="18.5 过滤器链"></a>18.5 过滤器链</h3><p>这里我们只需要了解执行顺序即可</p><ul><li>执行顺序：如果有两个过滤器：过滤器1和过滤器2<ol><li>过滤器1</li><li>过滤器2</li></ol></li></ul><ol start="3"><li>资源执行</li><li>过滤器2</li><li>过滤器1 </li></ol><ul><li>过滤器先后顺序：按照类名字符串比较顺序。xml配置按照配置先后。</li></ul><h2 id="解决控制台中文乱码"><a href="#解决控制台中文乱码" class="headerlink" title="# 解决控制台中文乱码"></a># 解决控制台中文乱码</h2><p><font color="cornflowerblue">1.Tomcat 设置面板</font></p><p><img src="/color-ful/img/javaee/image-20210116225154221.png" alt="image-20210116225154221"></p><p><font color="cornflowerblue">2.Settings </font></p><p><img src="/color-ful/img/javaee/image-20210116225326468.png" alt="image-20210116225326468"></p><p><font color="cornflowerblue">3. Help — Edit Custom VM Options</font></p><p><img src="/color-ful/img/javaee/image-20210116225407489.png" alt="image-20210116225407489"></p><p>最后一行:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-Dfile.encoding=UTF-<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaEE 二阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JSP</tag>
      
      <tag>Servlet</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
