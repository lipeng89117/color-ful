<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MyBatis 框架</title>
    <link href="/color-ful/2020/03/31/Mybatis%E6%A1%86%E6%9E%B6/"/>
    <url>/color-ful/2020/03/31/Mybatis%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<p><img src="/color-ful/img/blog/image-20210106095916987.png" alt="image-20210106095916987"></p><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><blockquote><p><font color="red">MyBatis</font> 本是apache的一个开源项目<font color="red">iBatis</font>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 2013年11月迁移到Github。</p></blockquote><p>​        MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><p><img src="/color-ful/img/mybatis/JDBC%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png"></p><p>​                                                                                    <strong>（传统JDBC图解）</strong></p><p>具体操作（复习）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-comment">//注册驱动</span><br>         Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>         <span class="hljs-comment">//获取连接对象</span><br>        connection = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>         <span class="hljs-comment">//编写sql</span><br>         String sql = <span class="hljs-string">&quot;select * from user where name=?&quot;</span><br><span class="hljs-comment">//预编译</span><br>PreparedStatement statement = connection.prepareStatement(sql);<br><span class="hljs-comment">//设置参数</span><br>statement.setString(<span class="hljs-number">1</span>, username);<br><span class="hljs-comment">//执行sql，封装结果</span><br>         ResultSet resultSet = statement.executeQuery();<br></code></pre></td></tr></table></figure><p>​        虽然传统JDBC也可以解决我们操作数据库的需求，但是它的<font color="red">功能简单</font>并且<font color="red">耦合度高</font>，如果我们在项目上线后修改某条sql语句，就需要去修改Java源码，并对项目进行重新的打包部署等一系列工作，操作起来相当的繁琐。</p><p>​        这里我们还需要介绍一个大名鼎鼎的全自动映射ORM框架：**<font color="cornflowerblue">Hibernate</font>**</p><blockquote><p>ORM: Object Relation Mapping 对象关系映射，简单说就是把数据库表和实体类的属性对应起来，让我们可以操作实体类就可以实现操作数据库表。</p></blockquote><p><img src="/color-ful/img/mybatis/Hibernate%E5%9B%BE%E8%A7%A3.png"></p><p>​                                                                                <strong>（Hibernate框架）</strong></p><p>​        该框架的设计旨在消除SQL：即便是你没学过SQL，也可以使用该框架，它将JDBC的操作进行了封装，你只需要去调用它相应的功能即可。但是这些功能不支持自定义SQL，即后期无法对SQL进行优化，你只能用框架自己生成的SQL进行数据库操作。虽然它的HQL支持自定义SQL，但是你需要去花时间学习，这无疑也增加了开发的时间和成本。</p><p>​        MyBatis框架优化了Hibernate框架的的缺点：MyBatis虽然对JDBC的操作也进行了封装，但是它把编写SQL的部分还是交给了程序员来完成，这样就不会失去SQL的灵活性，</p><p><img src="/color-ful/img/mybatis/MyBatis%E5%9B%BE%E8%A7%A3.png"></p><p>​                                                                                <strong>（Mybatis 半自动框架）</strong></p><h2 id="2-为什么使用MyBatis"><a href="#2-为什么使用MyBatis" class="headerlink" title="2.为什么使用MyBatis"></a>2.为什么使用MyBatis</h2><ul><li><strong>JDBC</strong><ol><li>SQL写在Java代码中，耦合度提高</li><li>实际开发中SQL会经常被更新，维护不易</li></ol></li><li><strong>Hibernate 和 JPA</strong><ol><li>长难复杂的SQL，对Hibernate而言处理也不容易</li><li>内部自动产生的SQL，不易做特殊优化</li><li>基于全映射的全自动框架，进行字段部分映射时比较困难，导致数据库性能下降</li></ol></li></ul><blockquote><p>JPA是Java Persistence API的简称，中文名Java持久层API，是JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中</p></blockquote><ul><li><strong>MyBatis</strong><ol><li>SQL和Java编码分离，功能划分清晰，一个专注业务，一个专注数据。</li><li>核心SQL可以自己编写，优化比较方便</li></ol></li></ul><h2 id="3-下载MyBatis"><a href="#3-下载MyBatis" class="headerlink" title="3. 下载MyBatis"></a>3. 下载MyBatis</h2><p><strong><font color="cornflowerblue">1.百度搜索：MyBatis</font></strong></p><p><img src="/color-ful/img/mybatis/image-20210106120223165.png" alt="image-20210106120223165"></p><p><strong><font color="cornflowerblue">2. 进入Mybatis - GitHub</font></strong></p><p><img src="/color-ful/img/mybatis/image-20210106120416581.png" alt="image-20210106120416581"></p><p><strong><font color="cornflowerblue">3. 进入GitHub下载界面</font></strong></p><p><img src="/color-ful/img/mybatis/image-20210106144740052.png" alt="image-20210106144740052"></p><h2 id="4-MyBatis入门"><a href="#4-MyBatis入门" class="headerlink" title="4. MyBatis入门"></a>4. MyBatis入门</h2><p><strong><font color="cornflowerblue">1. 测试数据库</font></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE mybatis <span class="hljs-type">CHAR</span> <span class="hljs-keyword">SET</span> utf8; <span class="hljs-comment">-- 创建数据库</span><br><br>USE mybatis;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>`(<br>   id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>   username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户名称&#x27;</span> ,<br>   birthday DATETIME  COMMENT <span class="hljs-string">&#x27;生日&#x27;</span>,<br>   sex <span class="hljs-type">CHAR</span>(<span class="hljs-number">1</span>) COMMENT <span class="hljs-string">&#x27;性别&#x27;</span>,<br>   address <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">200</span>) COMMENT <span class="hljs-string">&#x27;地址&#x27;</span><br>)ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `<span class="hljs-keyword">user</span>`(username,birthday,sex,address) <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-string">&#x27;周杰伦&#x27;</span>,<span class="hljs-string">&#x27;1990-01-17 17:23:56&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;上海浦东新区&#x27;</span>),<br>(<span class="hljs-string">&#x27;王力宏&#x27;</span>,<span class="hljs-string">&#x27;1993-07-21 06:07:32&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;北京新城区&#x27;</span>),<br>(<span class="hljs-string">&#x27;蔡依林&#x27;</span>,<span class="hljs-string">&#x27;1995-12-17 09:25:47&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;西安雁塔区&#x27;</span>),<br>(<span class="hljs-string">&#x27;钟南山&#x27;</span>,<span class="hljs-string">&#x27;1998-02-20 12:33:03&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;西安市碑林区&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong><font color="cornflowerblue">2. 准备对应实体类</font></strong></p><p>首先我们创建一个Maven工程</p><p><img src="/color-ful/img/mybatis/image-20210107171137491.png" alt="image-20210107171137491"></p><p><img src="/color-ful/img/mybatis/image-20210107180918851.png" alt="image-20210107180918851"></p><p>创建好后创建相应的包和实体类</p><p><img src="/color-ful/img/mybatis/image-20210107105103452.png" alt="image-20210107105103452"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wdzl.bean;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> Date birthday;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String username, Date birthday, String sex, String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.username = username;<br>        <span class="hljs-keyword">this</span>.birthday = birthday;<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getBirthday</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> birthday;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBirthday</span><span class="hljs-params">(Date birthday)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.birthday = birthday;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSex</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSex</span><span class="hljs-params">(String sex)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, birthday=&quot;</span> + birthday +<br>                <span class="hljs-string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong><font color="cornflowerblue">3. 通过官方文档添加maven依赖</font></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.wdzl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--测试单元--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mybatis--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mysql连接驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--日志解析log4j--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><font color="cornflowerblue">4.创建用户持久层接口</font></strong></p><p><img src="/color-ful/img/mybatis/image-20210107105549919.png" alt="image-20210107105549919"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wdzl.dao;<br><br><span class="hljs-keyword">import</span> org.wdzl.bean.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  用户的持久层接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  查询所有用户</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><font color="cornflowerblue">5. 配置MyBatis配置文件-SqlMapConfig.xml</font></strong></p><p><strong><font color="red">注意：XML约束可以去官网查找。</font></strong></p><p><img src="/color-ful/img/mybatis/image-20210107111701984.png" alt="image-20210107111701984"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--配置mysql环境--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--配置事务的类型--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--配置数据源（连接池）--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--Pooled 使用连接池--&gt;</span><br>                <span class="hljs-comment">&lt;!--配置连接数据库的4个基本信息--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><font color="cornflowerblue">6. 指定映射配置文件</font></strong></p><p>在<code>SqlMapConfig.xml</code>中添加添加映射配置文件位置，如下图</p><p><img src="/color-ful/img/mybatis/image-20210107111947290.png" alt="image-20210107111947290"></p><p>再去<code>resources</code>下创建相应的文件夹和xml文件</p><p><img src="/color-ful/img/mybatis/image-20210305230455079.png" alt="image-20210305230455079"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.wdzl.dao.UserDao&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--对应dao的全限定类名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--id属性对应方法的名称，不能随便写 --&gt;</span><br>        select * from user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>该xml的注意事项</p><ol><li>namespace 是对应接口的全限定类名</li><li>select 标签的 id 属性对应相应的方法名，不能随便写</li></ol><p><font color="cornflowerblue">7.把<code>log4j.properties</code>拷贝到 <code>resource</code>目录下</font></p><p><strong><font color="red">总结：</font></strong></p><p>​        <strong>MyBatis 环境搭建步骤：</strong></p><ol><li><p>创建Maven工程并导入依赖（坐标）</p></li><li><p>创建实体类和dao层接口</p></li><li><p>创建MyBatis主配置文件：SqlMapConfig.xml</p></li><li><p>创建映射配置文件：UserDao.xml</p></li></ol><p><strong><font color="red">注意事项：</font></strong></p><p>​       <strong>MyBatis环境搭建注意事项：</strong></p><ol><li> UserDao  和 UserMapper 是一样的。这只是命名习惯上的区别。</li><li>创建Directory 和 package 时有一点不同的地方<ul><li>Directory：org.wdzl.dao  这是一级目录</li><li>Package：org.wdzl.dao 这是三级目录</li></ul></li><li> MyBatis的映射配置文件必须和dao接口的包结构相同</li><li> 映射配置文件的<code>mapper</code>标签namespace属性的取值必须是dao接口的全限定类名(后面解释)</li><li> 映射配置文件<code>select</code> 标签的 id 属性对应的dao接口中的方法名，不能随便写</li><li> <font color="red">只要遵从了3，4，5条规定之后，我们就不需要写dao层接口的实现类。</font></li></ol><p><strong><font color="cornflowerblue">7. 入门案例</font></strong></p><p>我们先将 <code>log4j.properties</code>拷贝到 <code>resources</code>根目录下</p><p><img src="/color-ful/img/mybatis/image-20210107153923094.png" alt="image-20210107153923094"></p><p>接下来，在test目录下创建测试java文件</p><p><img src="/color-ful/img/mybatis/image-20210107154033449.png" alt="image-20210107154033449"></p><p><font color="cornflowerblue">MyBayisTest.java</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.wdzl.dao;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> org.wdzl.bean.User;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * MyBatis的入门案例</span><br><span class="hljs-comment"> *  实现步骤：</span><br><span class="hljs-comment"> *      1.读取配置文件</span><br><span class="hljs-comment"> *      2.创建SqlSessionFactory工厂</span><br><span class="hljs-comment"> *      3.使用工厂生产SqlSession对象</span><br><span class="hljs-comment"> *      4.使用SqlSession创建Dao接口的代理对象</span><br><span class="hljs-comment"> *      5.使用代理对象执行方法</span><br><span class="hljs-comment"> *      6.释放资源</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.读取配置文件</span><br>        InputStream is = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-comment">//2.创建SqlSessionFactory工厂</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        使用SqlSessionFactoryBuilder创建工厂的好处是MyBatis将如何读取配置文件，如何使用配置文件，如何封装等细节都进行了封装，使我们使用极简的方式来实现功能。</span><br><span class="hljs-comment">         */</span><br>        SqlSessionFactoryBuilder builder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>        SqlSessionFactory factory = builder.build(is);<br>        <span class="hljs-comment">//3.使用工厂生产SqlSession对象</span><br>        SqlSession session = factory.openSession();<br>        <span class="hljs-comment">//4.使用SqlSession创建Dao接口的代理对象</span><br>        UserDao userDao = session.getMapper(UserDao.class);<br>        <span class="hljs-comment">//5.使用代理对象执行方法</span><br>        List&lt;User&gt; users = userDao.findAll();<br>        <span class="hljs-keyword">for</span> (User user : users) &#123;<br>            System.out.println(user);<br>        &#125;<br><br>        <span class="hljs-comment">//6.释放资源</span><br>        session.close();<br>        is.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>执行后我们发现，会报错，查看错误信息，我们会找到这样一条描述：</strong></p><p><img src="/color-ful/img/mybatis/image-20210107154346023.png" alt="image-20210107154346023"></p><p>意思我们虽然写了Sql语句，但是<font color="red">查询返回的结果我们并没有告诉MyBatis用什么封装</font>！所以我们需要去修改映射配置文件，添加一个属性即可</p><p><img src="/color-ful/img/mybatis/image-20210107154528322.png" alt="image-20210107154528322"></p><p>再次执行，就可以看到数据库中存储的信息了。</p><p><img src="/color-ful/img/mybatis/image-20210107154609965.png" alt="image-20210107154609965"></p><p><strong><font color="red">入门案例步骤：</font></strong></p><ol><li>读取配置文件</li><li>创建SqlSessionFactory对象–&gt; 通过SqlSessionFactoryBuilder对象</li><li>使用工厂对象生产SqlSession对象</li><li>使用SqlSession对象创建Dao层接口的代理对象</li><li>使用代理对象执行方法释放资源</li></ol><h2 id="5-MyBatis-注解入门"><a href="#5-MyBatis-注解入门" class="headerlink" title="5.MyBatis 注解入门"></a>5.MyBatis 注解入门</h2><p><font color="cornflowerblue">1. 我们先新建一个Maven工程，将上一个工程的内容都复制到该工程中。</font></p><p><img src="/color-ful/img/mybatis/image-20210107165836005.png" alt="image-20210107165836005"></p><p><font color="cornflowerblue">2. 因为该案例使用的是注解方式，所以 映射配置文件就不需要了我们可以将它删除掉，并在相应的接口方法上写上注解即可。</font></p><p><img src="/color-ful/img/mybatis/image-20210107165949780.png" alt="image-20210107165949780"></p><p><font color="cornflowerblue">3. 修改sqlMapConfig.xml</font></p><p><img src="/color-ful/D:/工作文件夹\录课\Java三阶段框架\0.Maven\课件\img\image-20210224154445357.png" alt="image-20210224154445357"></p><p><font color="cornflowerblue">4. 运行测试案例，效果是一样的。</font></p><h2 id="6-入门案例中的设计模式"><a href="#6-入门案例中的设计模式" class="headerlink" title="6. 入门案例中的设计模式"></a>6. 入门案例中的设计模式</h2><p><img src="/color-ful/img/mybatis/image-20210108152219510.png" alt="image-20210108152219510"></p><blockquote><p>构建者模式：比如说我们要建一座工厂，我们有钱，但是我们没有建造方面的天赋，怎么办？我们可以找一个包工队，至于工厂如何建造，使用什么材料，需要多少人力之类的问题，我们都不需要关系。再比如KFC点套餐，它也是一个典型的构建者模式：这个套餐如何做出来的，我们不需要关心，只需要付钱即可。</p></blockquote><p>​        那么，为了简化，为什么不把上面的方法再进行封装呢?</p><p>​        过度的封装虽然使用简便，但是会失去响应的灵活性，比如 builder.build()就有很多重载的方法，如果封装了，这些重载的方式不是就使用不成了吗？</p><h2 id="7-自定义MyBatis"><a href="#7-自定义MyBatis" class="headerlink" title="7. 自定义MyBatis"></a>7. 自定义MyBatis</h2><h3 id="7-1-分析"><a href="#7-1-分析" class="headerlink" title="7.1 分析"></a>7.1 分析</h3><p><font color="red">MyBatis在使用代理的方式实现增删改查时都做了什么事？</font></p><ol><li>创建代理对象</li><li>在代理对象中创建方法</li></ol><p>我们以入门案例分析MyBatis工作流程，之后我们再具体实现一下。</p><img src="/color-ful/img/mybatis/Mybatis工作原理分析.png"><p>根据上图分析，我们如果想让代码完整执行下来我们需要提供两组信息：</p><ol><li><font color="red">连接信息</font></li><li><font color="red">映射信息</font><ul><li><font color="cornflowerblue">执行的sql语句</font></li><li><font color="cornflowerblue">封装结果的实体类全限定类名</font></li></ul></li></ol><p>​        随着项目功能的扩充，映射信息也会越来越多，所以我们需要使用对象来存储映射信息，那么怎么区分不同的映射信息呢，根据配置文件，我们知道，namespace + id 可以区分映射信息，所以我们可以考虑使用Map集合来存储这部分信息。</p><p>​        分析到这里，整个流程基本就完成了，还有一个难点就是如何使用动态代理创建代理对象和对接口中方法的实现。接下来我们再通过图解的方式给大家分析一下。</p><p><img src="/color-ful/img/mybatis/image-20210227165740643.png" alt="image-20210227165740643"></p><h3 id="7-2-自定义MyBatis"><a href="#7-2-自定义MyBatis" class="headerlink" title="7.2 自定义MyBatis"></a>7.2 自定义MyBatis</h3><p>首先我们在第一个项目中 查看以下几个名称对应的是接口还是类。</p><p><code>Resources</code>:类</p><p><code>SqlSession</code>:接口</p><p><code>SqlSessionFactory</code>:接口</p><p><code>SqlSessionFactoryBuilder</code>:类</p><p><font color="cornflowerblue">1.新建Module</font></p><ul><li>groupId : <code>com.wdzl</code></li><li>artifactId : <code>day01_03mybatis_design</code></li></ul><p><font color="cornflowerblue">2. 我们将第一个入门案例整体拷贝到改Module中，并在pom.xml中删除Mybatis的依赖信息。</font></p><p> 此时test测试案例中Mybatis相应的的类或接口都会报红，接下来我们一 一 编写这些类或接口</p><p><img src="/color-ful/img/mybatis/image-20210227171936359.png" alt="image-20210227171936359"></p><p><font color="cornflowerblue">3. Resources 类</font></p><p>先创建相应目录<code>mybatis.io</code></p><p><img src="/color-ful/img/mybatis/image-20210227173001598.png" alt="image-20210227173001598"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.wdzl.mybatis.io;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用类加载器读取配置文件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Resources</span> </span>&#123;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  根据文件路径，获取字节输入流</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filePath 配置文件路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InputStream <span class="hljs-title">getResourceAsStream</span><span class="hljs-params">(String filePath)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Resources.class.getClassLoader().getResourceAsStream(filePath);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4.创建SqlSessionFactoryBuilder类</font></p><p>先在<code>mybatis</code>包中创建<code>sqlsession</code>包</p><p><img src="/color-ful/img/mybatis/image-20210227175318421.png" alt="image-20210227175318421"></p><p>再创建<code>SqlSessionFactoryBuilder</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.mybatis.sqlSession;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用于创建SqlSessionFactory对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SqlSessionFactoryBuilder</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  获取SqlSessionFactory对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inputStream</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title">build</span><span class="hljs-params">(InputStream inputStream)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为 <code>build()</code>方法的返回值类型  <code>SqlSessionFactory</code>并不存在，此时它是报红的，缺什么我们就创建什么，接下来我们创建<code>SqlSessionFactory</code>接口</p><p><font color="cornflowerblue">5. 创建SqlSessionFactory接口</font></p><p>在<code>sqlsession</code>包中创建该接口，通过<code>SqlSessionFactory</code>可以获取<code>SqlSession</code>对象，所以要在接口中定义对应的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SqlSessionFactory</span> </span>&#123;<br>    <span class="hljs-function">SqlSession <span class="hljs-title">openSession</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">6.创建SqlSession接口</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义MyBatis中和数据库交互的核心接口</span><br><span class="hljs-comment"> * 它可以创建dao接口的代理对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SqlSession</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  根据接口创建代理对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> daoInterfaceClass</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getMapper</span><span class="hljs-params">(Class&lt;T&gt; daoInterfaceClass)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放资源</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时，我们测试案例中所有报红的地方就全部修复了。</p><p><font color="cornflowerblue">7. 导入XML解析工具类：XMLConfigBuilder 和 相关依赖</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>dom4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dom4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jaxen<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxen<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>导入之后我们来处理报红的问题</p><p>​    1. <font color="red">Configuration</font>: 我们通过工具类注释我们知道它是用来存放连接配置信息的类，所以我们创建一个<code>Configuration</code>类,并根据下面报红信息确定它的属性又：<code>driver</code> , <code>url</code> , <code>username</code> , <code>password</code></p><p><font color="cornflowerblue">8.创建Configration类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 存放连接配置信息的对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Configuration</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDriver</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> driver;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDriver</span><span class="hljs-params">(String driver)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.driver = driver;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUrl</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> url;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUrl</span><span class="hljs-params">(String url)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.url = url;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span><span class="hljs-params">(String password)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.password = password;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">9. 创建Mapper对象</font></p><p>通过上面图解，我们知道Mapper对象的组成 <font color="red">sql语句</font> 和 <font color="red">实体类的全限定类名</font>。所以我们在<code>domain</code>包下创建该类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.domain;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用于封装执行的SQL语句和结果类型的全限定类名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mapper</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String queryString;<span class="hljs-comment">//Sql语句</span><br>    <span class="hljs-keyword">private</span> String resultType;<span class="hljs-comment">//实体类全限定类名</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getQueryString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> queryString;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setQueryString</span><span class="hljs-params">(String queryString)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.queryString = queryString;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getResultType</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> resultType;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setResultType</span><span class="hljs-params">(String resultType)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.resultType = resultType;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​        在工具类中导入Mapper后，寻找下图中红框的位置，因为我们现在不涉及注解方式，所以我们直接将注解相关的内容全部注释，不用去考虑它，只专心的关注XML方式</p><p><img src="/color-ful/img/mybatis/image-20210227233219935.png" alt="image-20210227233219935"></p><p><font color="cornflowerblue">10. 在<code>Configuration</code>中添加成员变量：<code>Mappers</code></font></p><p><img src="/color-ful/img/mybatis/image-20210305105338684.png" alt="image-20210305105338684"></p><p><img src="/color-ful/img/mybatis/image-20210305105606256.png" alt="image-20210305105606256"></p><p><font color="cornflowerblue">11. 回到<code>SqlSessionFactoryBuilder</code>编写<code>build</code>方法。</font></p><p><img src="/color-ful/img/mybatis/image-20210305110502059.png" alt="image-20210305110502059"></p><p><font color="cornflowerblue">12. 新建<code>SqlSessionFactoryImpl</code> 实现类，实现<code>SqlSessionFactory</code>接口。</font></p><p><img src="/color-ful/img/mybatis/image-20210305112609562.png" alt="image-20210305112609562"></p><p>​        因为<code>SqlSession</code>可以为我们创建代理对象，实现方法，具体这个方法要做什么，是不是封装在<code>Configration</code>中，所以我们还需要继续将cfg对象传递给<code>SqlSession</code>对象.</p><p><font color="cornflowerblue">13. 创建<code>SqlSession</code>的实现类对象：<code>SqlSessionImpl</code></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.mybatis.sqlSession;<br><span class="hljs-keyword">import</span> com.wdzl.domain.Configuration;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SqlSessionImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">SqlSession</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Configuration cfg;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SqlSessionImpl</span><span class="hljs-params">(Configuration cfg)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.cfg = cfg;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建代理对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> daoInterfaceClass UserDao接口的Class对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getMapper</span><span class="hljs-params">(Class&lt;T&gt; daoInterfaceClass)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放资源</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">14. 使用动态代理实现getMapper()方法。</font></p><p><img src="/color-ful/img/mybatis/image-20210305143818385.png" alt="image-20210305143818385"></p><p>​        学过反射，我们知道，对于代理类的方法如何实现，重点就是在这个<code>InvocationHandler</code>接口中的<code>invoke（）</code>方法如何实现。接下来我们就来实现这个接口</p><p><font color="cornflowerblue">15. 创建InvocationHandler接口的实现类：MapperProxy</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.mybatis.sqlSession.proxy;<br><br><span class="hljs-keyword">import</span> com.wdzl.domain.Mapper;<br><span class="hljs-keyword">import</span> com.wdzl.utils.Executor;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapperProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Map&lt;String, Mapper&gt; mappers;<span class="hljs-comment">//该变量中包含了sql语句，结果封装的对象等信息。</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MapperProxy</span><span class="hljs-params">(Map&lt;String, Mapper&gt; mappers)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.mappers = mappers;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用于增强方法：findAll（）方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> proxy</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> method</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Throwable</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        <span class="hljs-comment">//1.获取方法名</span><br>        String methodName = method.getName();<br>        <span class="hljs-comment">//2.获取方法所在类的名称:全限定类名</span><br>        String className = method.getDeclaringClass().getTypeName();<br>        <span class="hljs-comment">//3.图中的key</span><br>        String key = className+ <span class="hljs-string">&quot;.&quot;</span> +methodName;<br><br>        <span class="hljs-comment">//4. 获取 mappers中的Mapper对象</span><br>        Mapper mapper = mappers.get(key);<br>        <span class="hljs-comment">//5. 判断mapper对象是否存在</span><br>        <span class="hljs-keyword">if</span> (mapper == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;传入的参数有误&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//6. 调用工具类执行查询</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Executor().selectList();<span class="hljs-comment">//需要导入提前编写好的工具类</span><br>        &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/color-ful/img/mybatis/image-20210305144511697.png" alt="image-20210305144511697"></p><p>导入工具类后，我们发现selectList（）中有两个参数，一个是Mapper对象，另一个是连接对象，因为连接对象需要cfg，所以我们去SqlSessionImpl中添加一个连接对象的成员变量</p><p><img src="/color-ful/img/mybatis/image-20210305162841295.png" alt="image-20210305162841295"></p><p>再给<code>getMappers()</code>方法中添加一个参数</p><p><img src="/color-ful/img/mybatis/image-20210305220356685.png" alt="image-20210305220356685"></p><p>再去<code>MapperProxy</code>中添加相应的成员变量 和修改配置方法</p><p><img src="/color-ful/img/mybatis/image-20210305220446607.png" alt="image-20210305220446607"></p><p><font color="cornflowerblue">16. 编写<code>DataSourceUtil</code></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  用于创建数据源的工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataSourceUtil</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用于获取一个连接</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cfg</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">(Configuration cfg)</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(cfg.getDriver());<br>            <span class="hljs-keyword">return</span> DriverManager.getConnection(cfg.getUrl(), cfg.getUsername(), cfg.getPassword());<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-MyBatis-CRUD操作"><a href="#8-MyBatis-CRUD操作" class="headerlink" title="8. MyBatis- CRUD操作"></a>8. MyBatis- CRUD操作</h2><p>在开始讲授之前，先让大家自己再搭建一遍一次Mybatis环境，并成功执行查询所有用户功能。</p><h3 id="8-1-添加"><a href="#8-1-添加" class="headerlink" title="8.1 添加"></a>8.1 添加</h3><p><strong>需求：</strong>向User表中添加一名用户，数据自拟</p><p><font color="cornflowerblue">1. 在UserDao中添加方法</font></p><p><img src="/color-ful/img/mybatis/image-20210305231540688.png" alt="image-20210305231540688"></p><p><font color="cornflowerblue">2.在UserDao.xml中配置该方法</font></p><p><img src="/color-ful/img/mybatis/image-20210305234645574.png" alt="image-20210305234645574"></p><p><font color="red">注意：取值这里有两种方式#{} 和 ${} </font></p><ul><li>#{} : 采取预编译方式</li><li>${}：采取字符串拼接</li></ul><p>可以通过控制台日志查看</p><p><font color="cornflowerblue">3.编写测试类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  测试添加功能</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAdd</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-comment">//创建用户</span><br>    User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;刘德华&quot;</span>,<span class="hljs-keyword">new</span> Date(),<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;中国香港&quot;</span>);<br>    <span class="hljs-comment">//1.读取配置文件</span><br>    InputStream is = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>    <span class="hljs-comment">//2.创建SqlSessionFactory工厂</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    使用SqlSessionFactoryBuilder创建工厂的好处是MyBatis将如何读取配置文件，如何使用配置文件，如何封装等细节都进行了封装，使我们使用极简的方式来实现功能。</span><br><span class="hljs-comment">     */</span><br>    SqlSessionFactoryBuilder builder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>    SqlSessionFactory factory = builder.build(is);<br>    <span class="hljs-comment">//3.使用工厂生产SqlSession对象</span><br>    SqlSession session = factory.openSession();<br>    <span class="hljs-comment">//4.使用SqlSession创建Dao接口的代理对象</span><br>    UserDao userDao = session.getMapper(UserDao.class);<br>    <span class="hljs-comment">//5.执行操作</span><br>    userDao.addUser(user);<br>    <span class="hljs-comment">//提交事务</span><br>      session.commit();<br>    <span class="hljs-comment">//6.执行查询</span><br>    <span class="hljs-comment">//5.使用代理对象执行方法</span><br>    List&lt;User&gt; users = userDao.findAll();<br>    <span class="hljs-keyword">for</span> (User user2 : users) &#123;<br>        System.out.println(user2);<br>    &#125;<br><br>    <span class="hljs-comment">//6.释放资源</span><br>    session.close();<br>    is.close();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>​        我们发现两个测试方法有许多共同的地方，我们可以将这些共同的代码提取出来，我们将前4步提取出来放在<code>init()</code>方法中，释放资源提取到 <code>destory()</code>方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.dao;<br><br><br><span class="hljs-keyword">import</span> com.wdzl.domain.User;<br>    <span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> org.junit.After;<br><span class="hljs-keyword">import</span> org.junit.Before;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * MyBatis的入门案例</span><br><span class="hljs-comment"> *  实现步骤：</span><br><span class="hljs-comment"> *      1.读取配置文件</span><br><span class="hljs-comment"> *      2.创建SqlSessionFactory工厂</span><br><span class="hljs-comment"> *      3.使用工厂生产SqlSession对象</span><br><span class="hljs-comment"> *      4.使用SqlSession创建Dao接口的代理对象</span><br><span class="hljs-comment"> *      5.使用代理对象执行方法</span><br><span class="hljs-comment"> *      6.释放资源</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisTest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> InputStream is;<br>    <span class="hljs-keyword">private</span> SqlSessionFactoryBuilder builder;<br>    <span class="hljs-keyword">private</span> SqlSessionFactory factory;<br>    <span class="hljs-keyword">private</span> SqlSession session;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  初始化方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException  </span>&#123;<br>        <span class="hljs-comment">//1.读取配置文件</span><br>        is = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-comment">//2.创建SqlSessionFactory工厂</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        使用SqlSessionFactoryBuilder创建工厂的好处是MyBatis将如何读取配置文件，如何使用配置文件，如何封装等细节都进行了封装，使我们使用极简的方式来实现功能。</span><br><span class="hljs-comment">         */</span><br>        builder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>        factory = builder.build(is);<br>        <span class="hljs-comment">//3.使用工厂生产SqlSession对象</span><br>        session = factory.openSession();<br>        <span class="hljs-comment">//4.使用SqlSession创建Dao接口的代理对象</span><br>        userDao = session.getMapper(UserDao.class);<br>    &#125;<br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//6.释放资源</span><br>        session.close();<br>        is.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">//5.使用代理对象执行方法</span><br>        List&lt;User&gt; users = userDao.findAll();<br>        <span class="hljs-keyword">for</span> (User user : users) &#123;<br>            System.out.println(user);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  测试添加功能</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAdd</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//创建用户</span><br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;刘德华&quot;</span>,<span class="hljs-keyword">new</span> Date(),<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;中国香港&quot;</span>);<br><br>        <span class="hljs-comment">//1.执行操作</span><br>        userDao.addUser(user);<br><br>        <span class="hljs-comment">//2. 提交事务</span><br>        session.commit();<br>        <span class="hljs-comment">//3.执行查询</span><br>        List&lt;User&gt; users = userDao.findAll();<br>        <span class="hljs-keyword">for</span> (User user2 : users) &#123;<br>            System.out.println(user2);<br>        &#125;<br><br><br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-2-修改"><a href="#8-2-修改" class="headerlink" title="8.2  修改"></a>8.2  修改</h3><p><strong>需求：</strong>将用户名为刘德华的地址改为中国大陆</p><p><font color="cornflowerblue">1. 在<code>UserDao</code>接口中添加相应的方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 更新用户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 在UserDao.xml中进行配置</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--修改用户--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.wdzl.domain.User&quot;</span>&gt;</span><br>    update user set address=#&#123;address&#125; where userName=#&#123;username&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    *  测试添加功能</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>       <span class="hljs-comment">//创建用户</span><br>       User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;刘德华&quot;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-string">&quot;中国大陆&quot;</span>);<br><br>       <span class="hljs-comment">//1.执行操作</span><br>       userDao.updateUser(user);<br><br>       <span class="hljs-comment">//2. 提交事务</span><br>       session.commit();<br>       <span class="hljs-comment">//3.执行查询</span><br>       List&lt;User&gt; users = userDao.findAll();<br>       <span class="hljs-keyword">for</span> (User user2 : users) &#123;<br>           System.out.println(user2);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="8-3-删除"><a href="#8-3-删除" class="headerlink" title="8.3 删除"></a>8.3 删除</h3><p><strong>需求：</strong>根据id删除用户</p><p><font color="cornflowerblue">1. 在<code>UserDao</code>接口中添加相应的方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据用户id删除用户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(Integer id)</span></span>;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 在UserDao.xml中进行配置</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--删除用户--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span><br>    delete from user where id=#&#123;uid&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><span class="hljs-comment">&lt;!--&#123;uid&#125; 只是相当于一个占位符，随便写什么都可以--&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    *  测试删除功能</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDelete</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>       <span class="hljs-comment">//创建用户</span><br>       User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;刘德华&quot;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-string">&quot;中国大陆&quot;</span>);<br><br>       <span class="hljs-comment">//执行操作</span><br>       userDao.deleteUser(<span class="hljs-number">9</span>);<br><br>       <span class="hljs-comment">//提交事务</span><br>       session.commit();<br>       <span class="hljs-comment">//执行查询</span><br>       List&lt;User&gt; users = userDao.findAll();<br>       <span class="hljs-keyword">for</span> (User user2 : users) &#123;<br>           System.out.println(user2);<br>       &#125;<br></code></pre></td></tr></table></figure><h3 id="8-2-查询一条数据"><a href="#8-2-查询一条数据" class="headerlink" title="8.2 查询一条数据"></a>8.2 查询一条数据</h3><p><strong>需求：</strong>根据用户id查询 用户信息</p><p><font color="cornflowerblue">1. 在<code>UserDao</code>接口中添加相应的方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户查询id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">User <span class="hljs-title">findById</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 在UserDao.xml中进行配置</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--根据id查询用户--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wdzl.domain.User&quot;</span>&gt;</span><br>    select * from user where id=#&#123;uid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  测试根据id查询用户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-comment">//执行操作</span><br>    User user = userDao.findById(<span class="hljs-number">1</span>);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-3-根据名称模糊查询用户"><a href="#8-3-根据名称模糊查询用户" class="headerlink" title="8.3 根据名称模糊查询用户"></a>8.3 根据名称模糊查询用户</h3><p><strong>需求：</strong>根据用户name模糊查询 用户信息</p><p><font color="cornflowerblue">1. 在<code>UserDao</code>接口中添加相应的方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据用户名模糊查询用户信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findByName</span><span class="hljs-params">(String name)</span></span>;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 在UserDao.xml中进行配置</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--根据用户名模糊查询用户信息--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByName&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wdzl.domain.User&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span>&gt;</span><br>    select * from user where userName like #&#123;name&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试模糊查询</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindByName</span><span class="hljs-params">()</span> </span>&#123;<br>    List&lt;User&gt; list = userDao.findByName(<span class="hljs-string">&quot;%杰%&quot;</span>);<br>    <span class="hljs-keyword">for</span> (User user : list) &#123;<br>        System.out.println(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-4-使用聚合函数"><a href="#8-4-使用聚合函数" class="headerlink" title="8.4 使用聚合函数"></a>8.4 使用聚合函数</h3><p><strong>需求：</strong>使用聚合函数查询总记录数</p><p><font color="cornflowerblue">1. 在<code>UserDao</code>接口中添加相应的方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询用户总记录</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findTotal</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 在UserDao.xml中进行配置</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--查询用户总记录数--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findTotal&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span><br>    select count(id) from user;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试聚合函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelect</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> total = userDao.findTotal();<br>    System.out.println(total);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-5-插入数据，获取当前保存数据的自增长ID"><a href="#8-5-插入数据，获取当前保存数据的自增长ID" class="headerlink" title="8.5 插入数据，获取当前保存数据的自增长ID"></a>8.5 插入数据，获取当前保存数据的自增长ID</h3><p><strong>该需求需要一条sql语句：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> LAST_INSERT_ID();<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">1. 在配置文件中，找到添加用户的配置标签，在该标签内使用<code>&lt;selectKey&gt;</code>获取当前插入数据的自增长ID</font></p><p><img src="/color-ful/img/mybatis/image-20210307072450010.png" alt="image-20210307072450010"></p><p><code>keyProperty</code>: 对应的实体类属性名</p><p><code>keyColumn</code>:对应数据库列名</p><p><code>Order</code>: 执行的顺序，after-在插入操作后执行</p><p><font color="cornflowerblue">2.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    *  测试添加功能-获取当前添加用户的自增id</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAdd2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>       <span class="hljs-comment">//创建用户</span><br>       User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;刘德华&quot;</span>,<span class="hljs-keyword">new</span> Date(),<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;中国香港&quot;</span>);<br>       <span class="hljs-comment">//保存之前</span><br>       System.out.println(user);<br>       <span class="hljs-comment">//1.执行操作</span><br>       userDao.addUser(user);<br>       <span class="hljs-comment">//2. 提交事务</span><br>       session.commit();<br>       <span class="hljs-comment">//保存之后</span><br>       System.out.println(user);<br><br>   &#125;<br></code></pre></td></tr></table></figure><p>保存之后的user对象的id就会变成当前数据库中实际的id</p><h2 id="9-参数详解"><a href="#9-参数详解" class="headerlink" title="9.参数详解"></a>9.参数详解</h2><h3 id="9-1-parameterType-输入类型"><a href="#9-1-parameterType-输入类型" class="headerlink" title="9.1 parameterType 输入类型"></a>9.1 parameterType 输入类型</h3><ol><li><p><strong>传递基本数据类型和 String</strong></p></li><li><p><strong>传递pojo对象</strong></p><p>当传递参数为对象时，在sql语句中获取对象属性值需要使用<font color="red">OGNL表达式</font>。</p><ul><li>OGNL：Object Graphic Navigation Language 对象图导航语言</li><li>它是通过对象的取值方式来获取值，在写法上把get给省略了<ul><li>在类中，我们获取值：user.getUsername();</li><li>在OGNL中：user.userName</li></ul></li><li>Mybatis中为什么能直接写userName，而不加 <code>user.</code>呢?<ul><li>因为在<code>parameterType</code>中已经提供了属性所属的类，所以可以省略类名</li></ul></li></ul></li></ol><h3 id="9-2-使用包装类型作为参数类型"><a href="#9-2-使用包装类型作为参数类型" class="headerlink" title="9.2 使用包装类型作为参数类型"></a>9.2 使用包装类型作为参数类型</h3><p>​        有时候我们的查询条件可能是符合条件，比如说查询条件需要用户信息，还需要其他信息，这些信息可以组成一个对象，这时候我们就可以考虑使用保障类来组合条件。</p><p><font color="cornflowerblue">1. 创建包装类QueryVo</font></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 传递参数的包装类</span><br><span class="hljs-comment"> * @author lp</span><br><span class="hljs-comment"> * @version 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> QueryVo &#123;<br>    private <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span>;<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-keyword">User</span> getUser() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">user</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> setUser(<span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span>) &#123;<br>        this.<span class="hljs-keyword">user</span> = <span class="hljs-keyword">user</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 在接口中定义相应方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据QueryVo中的信息查询用户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findUserByVo</span><span class="hljs-params">(QueryVo vo)</span></span>;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 在配置文件UserDao.xml中进行配置</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--根据包装类信息模糊查询用户数据--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findUserByVo&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.wdzl.domain.QueryVo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wdzl.domain.User&quot;</span>&gt;</span><br>    select * from user where username like #&#123;user.username&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4. 测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试查询功能-根据包装类信息查询用户信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testVo</span><span class="hljs-params">()</span> </span>&#123;<br>    QueryVo vo = <span class="hljs-keyword">new</span> QueryVo();<br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setUsername(<span class="hljs-string">&quot;%周%&quot;</span>);<br>    vo.setUser(user);<br>    List&lt;User&gt; users = userDao.findUserByVo(vo);<br>    <span class="hljs-keyword">for</span> (User u : users) &#123;<br>        System.out.println(u);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-3-实体类属性与表字段不对应的问题解决"><a href="#9-3-实体类属性与表字段不对应的问题解决" class="headerlink" title="9.3 实体类属性与表字段不对应的问题解决"></a>9.3 实体类属性与表字段不对应的问题解决</h3><p>​        首先我们先将<code>User</code>类中的 <code>id</code>属性名改为<code>userId</code>,重写类中的方法，重新执行查询功能，我们会发现，查出来的数据，id项都为空，这是因为属性和数据库字段名无法匹配的原因，对于这些问题，我们有3种解决方案。</p><p><strong>方案1：统一实体类和表字段的名称（不做演示）</strong></p><p><strong>方案2：给数据库字段加别名 ，让别名与实体类属性名 统一（查询效率比较高）</strong></p><p>我们以<code>根据包装类信息模糊查询用户信息</code> 为例，对sql语句进行修改，并给不对应的列起一个别名。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--根据包装类信息模糊查询用户数据--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findUserByVo&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.wdzl.domain.QueryVo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.wdzl.domain.User&quot;</span>&gt;</span><br>    select id as userId,username,birthday,sex,address from user where username like  #&#123;user.username&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再次执行测试，问题顺利解决。</p><p><strong>方案3：在UserDao.xml中配置对应关系</strong></p><p><font color="cornflowerblue">1. 在配置文件UserDao.xml中添加映射配置信息</font></p><p><img src="/color-ful/img/mybatis/image-20210310135449857.png" alt="image-20210310135449857"></p><p><font color="cornflowerblue">2.映射配置添加好以后，我们将对应的的<code>resultType</code> 修改为 <code>resultMap</code>,对应属性值为</font></p><p><img src="/color-ful/img/mybatis/image-20210310140054666.png" alt="image-20210310140054666"></p><p><font color="cornflowerblue">3. 执行相应测试，此时查询出来的信息中，id属性已经有了值，这就表示我们的配置信息已经配置成功。</font></p><h2 id="10-MyBatis实现Dao层的开发"><a href="#10-MyBatis实现Dao层的开发" class="headerlink" title="10. MyBatis实现Dao层的开发"></a>10. MyBatis实现Dao层的开发</h2><p>​        现实开发中，有时候也是需要我们自己去实现Dao层接口，那么如何使用MyBatis框架自定义实现类是我们接下来要研究的内容。</p><p><strong>准备工作：</strong></p><p><font color="cornflowerblue">新建工程，将前面演示CRUD操作的工程内容复制到该工程中，并做对应的修改。</font></p><ul><li>复制<code>main</code> 和 <code>test</code>目录</li><li>修改<code>pom.xml</code>,把相关依赖添加到配置文件中</li><li>删除<code>UserDao</code>中的<code>&lt;resultMap&gt;</code>,并将下面标签中使用到<code>&lt;resultMap&gt;</code>的地方换成<code>&lt;resultType&gt;</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">resultType=&quot;com.wdzl.domain.User&quot;<br></code></pre></td></tr></table></figure><ul><li>删除包装类<code>QueryVo</code> 还有对应的 配置 和 测试</li></ul><h4 id="10-1-查询所有的方法"><a href="#10-1-查询所有的方法" class="headerlink" title="10.1 查询所有的方法"></a>10.1 查询所有的方法</h4><p><font color="cornflowerblue">1. 添加UserDao对应的实现类:先实现查询所有列表的方法。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.dao.impl;<br><br><span class="hljs-keyword">import</span> com.wdzl.dao.UserDao;<br><span class="hljs-keyword">import</span> com.wdzl.domain.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * UserDao实现类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> SqlSessionFactory factory;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserDaoImpl</span><span class="hljs-params">(SqlSessionFactory factory)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.factory = factory;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1. 获取SqlSession对象</span><br>        SqlSession session = factory.openSession();<br>        <span class="hljs-comment">//2. 调用SqlSession的方法</span><br>        List&lt;User&gt; users = session.selectList(<span class="hljs-string">&quot;com.wdzl.dao.UserDao.findAll&quot;</span>);<span class="hljs-comment">//参数就是我们自定义Mybatis分析图中的那个“key”</span><br>        <span class="hljs-comment">//3. 释放资源</span><br>        session.close();<br>        <br>        <span class="hljs-keyword">return</span> users;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">findById</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">findByName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findTotal</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.测试：只修改需要用的方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.dao;<br><br><span class="hljs-keyword">import</span> com.wdzl.dao.impl.UserDaoImpl;<br><span class="hljs-keyword">import</span> com.wdzl.domain.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> org.junit.After;<br><span class="hljs-keyword">import</span> org.junit.Before;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * MyBatis实现Dao层-测试</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisTest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> InputStream is;<br>    <span class="hljs-keyword">private</span> SqlSessionFactoryBuilder builder;<br>    <span class="hljs-keyword">private</span> SqlSessionFactory factory;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  初始化方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException  </span>&#123;<br>        <span class="hljs-comment">//1.读取配置文件</span><br>        is = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-comment">//2.创建SqlSessionFactory工厂</span><br>        builder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>        factory = builder.build(is);<br>        <span class="hljs-comment">//3.获取UserDao实现类对象</span><br>        userDao = <span class="hljs-keyword">new</span> UserDaoImpl(factory);<br>    &#125;<br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//6.释放资源</span><br>        is.close();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试查询所有的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1.执行方法</span><br>        List&lt;User&gt; users = userDao.findAll();<br>        <span class="hljs-comment">//3.遍历</span><br>        <span class="hljs-keyword">for</span> (User user : users) &#123;<br>            System.out.println(user);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="10-2-添加用户"><a href="#10-2-添加用户" class="headerlink" title="10.2 添加用户"></a>10.2 添加用户</h4><p><font color="cornflowerblue">1. 在UserDaoImpl 中 实现 addUser()方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span> </span>&#123;<br>      <span class="hljs-comment">//1. 获取SqlSession对象</span><br>      SqlSession session = factory.openSession();<br>      <span class="hljs-comment">//2.执行方法</span><br>      session.insert(<span class="hljs-string">&quot;com.wdzl.dao.UserDao.addUser&quot;</span>, user);<br>      <span class="hljs-comment">//3.提交事务</span><br>      session.commit();<br>      <span class="hljs-comment">//4.释放资源</span><br>      session.close();<br>  &#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 编写测试案例</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 测试添加用户的方法</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAddUser</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">//1.创建用户对象</span><br>       User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;华罗庚&quot;</span>, <span class="hljs-string">&quot;1977-6-5&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;中国北京&quot;</span>);<br>       <span class="hljs-comment">//2.执行方法</span><br>       userDao.addUser(user);<br>       <span class="hljs-comment">//3.查询</span><br>       <span class="hljs-comment">//执行方法</span><br>       List&lt;User&gt; users = userDao.findAll();<br>       <span class="hljs-comment">//遍历</span><br>       <span class="hljs-keyword">for</span> (User user2 : users) &#123;<br>           System.out.println(user2);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="10-3-其他方法"><a href="#10-3-其他方法" class="headerlink" title="10.3 其他方法"></a>10.3 其他方法</h4><p>课堂练习作业</p><p><strong>1.更新操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span> </span>&#123;<br>    <span class="hljs-comment">//1. 获取SqlSession对象</span><br>    SqlSession session = factory.openSession();<br>    <span class="hljs-comment">//2.执行方法</span><br>    session.update(<span class="hljs-string">&quot;com.wdzl.dao.UserDao.updateUser&quot;</span>, user);<br>    <span class="hljs-comment">//3.提交事务</span><br>    session.commit();<br>    <span class="hljs-comment">//4.释放资源</span><br>    session.close();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 测试修改用户的方法</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdateUser</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">//1.创建用户对象</span><br>       User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;华罗庚&quot;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;首都北京&quot;</span>);<br>       <span class="hljs-comment">//2.执行方法</span><br>       userDao.updateUser(user);<br>       <span class="hljs-comment">//3.查询</span><br>       <span class="hljs-comment">//执行方法</span><br>       List&lt;User&gt; users = userDao.findAll();<br>       <span class="hljs-comment">//遍历</span><br>       <span class="hljs-keyword">for</span> (User user2 : users) &#123;<br>           System.out.println(user2);<br>       &#125;<br>   &#125;<br><br></code></pre></td></tr></table></figure><p><strong>2.删除操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>    <span class="hljs-comment">//1. 获取SqlSession对象</span><br>    SqlSession session = factory.openSession();<br>    <span class="hljs-comment">//2.执行方法</span><br>    session.delete(<span class="hljs-string">&quot;com.wdzl.dao.UserDao.deleteUser&quot;</span>, id);<br>    <span class="hljs-comment">//3.提交事务</span><br>    session.commit();<br>    <span class="hljs-comment">//4.释放资源</span><br>    session.close();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 测试删除用户的方法</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteUser</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">//1.执行方法</span><br>       userDao.deleteUser(<span class="hljs-number">7</span>);<br>       <span class="hljs-comment">//2.查询</span><br>       <span class="hljs-comment">//执行方法</span><br>       List&lt;User&gt; users = userDao.findAll();<br>       <span class="hljs-comment">//遍历</span><br>       <span class="hljs-keyword">for</span> (User user2 : users) &#123;<br>           System.out.println(user2);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p><strong>查询：单个用户，模糊查询，聚合函数查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 测试查询单个用户的方法</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindById</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">//1.执行方法</span><br>       User user = userDao.findById(<span class="hljs-number">5</span>);<br>       System.out.println(user);<br><br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 测试模糊查询</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindByName</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">//1.执行方法</span><br>       List&lt;User&gt; users = userDao.findByName(<span class="hljs-string">&quot;%德%&quot;</span>);<br>       <span class="hljs-comment">//遍历</span><br>       <span class="hljs-keyword">for</span> (User user : users) &#123;<br>           System.out.println(user);<br>       &#125;<br><br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 测试模糊查询</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindTotal</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">int</span> total = userDao.findTotal();<br>       System.out.println(total);<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 测试查询单个用户的方法</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindById</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">//1.执行方法</span><br>       User user = userDao.findById(<span class="hljs-number">5</span>);<br>       System.out.println(user);<br><br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 测试模糊查询</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindByName</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">//1.执行方法</span><br>       List&lt;User&gt; users = userDao.findByName(<span class="hljs-string">&quot;%德%&quot;</span>);<br>       <span class="hljs-comment">//遍历</span><br>       <span class="hljs-keyword">for</span> (User user : users) &#123;<br>           System.out.println(user);<br>       &#125;<br><br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 测试总记录数查询</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindTotal</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">int</span> total = userDao.findTotal();<br>       System.out.println(total);<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="11-properties标签"><a href="#11-properties标签" class="headerlink" title="11. properties标签"></a>11. properties标签</h2><p><strong>方式一：</strong>将配置提取出来进行统一管理，在需要使用的地方使用<code>$&#123;&#125;</code>引用即可</p><p><font color="cornflowerblue">1.提取</font></p><p><img src="/color-ful/img/mybatis/image-20210311112826392.png" alt="image-20210311112826392"></p><p><font color="cornflowerblue">2.引用</font></p><p><img src="/color-ful/img/mybatis/image-20210311112917638.png" alt="image-20210311112917638"></p><p><strong>方式二：引用外部配置文件</strong></p><p><img src="/color-ful/img/mybatis/image-20210311113843135.png" alt="image-20210311113843135"></p><p><font color="red">引用外部有两个属性</font>：</p><ul><li><p><strong>resource</strong> : 用于指定配置文件的位置类路径的写法，并且必须存在于类路径下。</p></li><li><p><strong>url</strong> : 统一资源定位符。可以标识资源的位置</p><p><code>Http  :  //  localhost  :  8080    /book/index.jsp</code></p><p> 协议                        主机地址           端口               URI</p><p>在windows文件夹中使用的是file协议，我们可以将配置文件所在目录拖入浏览器，就可以看到文件在文件系统中的rul</p></li></ul><p><img src="/color-ful/img/mybatis/image-20210311114607916.png" alt="image-20210311114607916"></p><h2 id="12-typeAliases标签-和-package标签"><a href="#12-typeAliases标签-和-package标签" class="headerlink" title="12. typeAliases标签 和 package标签"></a>12. typeAliases标签 和 package标签</h2><p>​        在之前的演示案例中，<code>UserDao.xml</code>配置文件可以配置映射关系，比如下图标签中，<code>resultType</code>标签的属性值，可以使<code>int</code>，<code>java.lang.Integer</code>,也可以是<code>INT</code>，这是因为MyBatis框架给这些标签起了别名，所以这几种属性值才可以表示相同的类。</p><p><img src="/color-ful/img/mybatis/image-20210311140550262.png" alt="image-20210311140550262"></p><p>​        下面我们来看如何给实体类配置别名：在 主配置文件中使用<code>typeAliases</code>配置别名，它只能给实体类配置别名。</p><p><img src="/color-ful/img/mybatis/image-20210311144346016.png" alt="image-20210311144346016"></p><p>在<code>typeAliases</code>中 有两个属性</p><ul><li><strong>type</strong>:用来指定起别名的实体类，如果省略<code>alias</code>属性，则使用默认别名，默认别名为类名 ，不区分大小写，任意组合都可识别。</li><li><strong>alias</strong>:指定一个新的别名，比如上图案例中将别名设置为<code>hehe</code>，则在下面使用时使用<code>hehe</code>即可表示User类。新的别名也不区分大小写。</li></ul><p>当实体类比较多时，我们可以使用<code>package</code>标签批量给包中的类添加别名</p><p><img src="/color-ful/img/mybatis/image-20210311150312782.png" alt="image-20210311150312782"></p><h2 id="13-连接池"><a href="#13-连接池" class="headerlink" title="13. 连接池"></a>13. 连接池</h2><h4 id="13-1-概述"><a href="#13-1-概述" class="headerlink" title="13.1 概述"></a>13.1 概述</h4><p>​        连接池就是用于存储连接对象的一个容器，当系统初始化完成后，容器被创建，容器会申请一些连接对象，当用户访问数据库时，从容器中获取连接对象即可。访问完之后，会将连接对象归还给连接池。这样做可以提高效率，提高连接对象的复用，不必频繁的创建和释放连接对象。</p><h4 id="13-2-MyBatis连接池"><a href="#13-2-MyBatis连接池" class="headerlink" title="13.2 MyBatis连接池"></a>13.2 MyBatis连接池</h4><p>连接池有很多种，最为熟悉的比如c3p0，DBCP，druid等。</p><p>MyBatis支持三种内置的数据源类型：</p><ul><li><code>POOLED：</code>实现dataSource接口，并且使用了池的思想。</li><li><code>UNPOOLED：</code>同样也是实现了dataSource接口，但是该类型并没有使用池的思想。</li><li><code>JDNI：</code>采用服务器提供的JDNI技术实现的，并且在不同服务器之间获取的连接池是不一样的。<ul><li>当前框架教学使用的是Tomcat服务器，采用的是dbcp连接池技术</li></ul></li></ul><p><font color="cornflowerblue">通过控制台的信息查看内置连接池</font></p><p><strong><font color="red">POOLED:</font></strong></p><p><img src="/color-ful/img/mybatis/image-20210311160625599.png" alt="image-20210311160625599"></p><p><font color="red"><strong>UNPOOLED:</strong></font></p><p><img src="/color-ful/img/mybatis/image-20210311160811775.png" alt="image-20210311160811775"></p><p>​        开发中我们根据需求：我们可以选择使用内置连接池 或者 整合<code>Druid</code>等得三方连接池技术都是可以的。</p><h2 id="14-事务"><a href="#14-事务" class="headerlink" title="14. 事务"></a>14. 事务</h2><p>​        对于事务的控制后期我们主要依赖于Spring来完成，当然MyBatis本身也是可以对事物进行控制的。我们查看演示案例执行<code>addUser</code>方法时，我们会发现，Mybatis框架 默认事务提交方式是手动的。</p><p><img src="/color-ful/img/mybatis/image-20210311220903479.png" alt="image-20210311220903479"></p><p>​        我们可以通过<code>SqlSession</code>的构造方法进行设置操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">session = factory.openSession(<span class="hljs-keyword">true</span>);<br></code></pre></td></tr></table></figure><p>​        再次执行<code>addUser()</code>，此时事务就会自动被提交。</p><p>​        该知识点我们只需知道MyBatis如何设置事务自动提交即可。</p><h2 id="15-动态SQL"><a href="#15-动态SQL" class="headerlink" title="15. 动态SQL"></a>15. 动态SQL</h2><p>开始此章学习前，我们先新建一个Maven项目，快速搭建MyBatis环境。</p><p><font color="cornflowerblue">1. 新建Maven工程，添加依赖，将CRUD演示工程复制到新建工程中</font></p><p><font color="cornflowerblue">2. 删除UserDao中的方法，只留4个查询方法，如下图所示，同样对应配置文件中的配置信息也删掉。</font></p><p><img src="/color-ful/img/mybatis/image-20210311222525198.png" alt="image-20210311222525198"></p><p>改好之后，我们来演示一个案例来解决一个查询需求。</p><h4 id="15-1-if标签"><a href="#15-1-if标签" class="headerlink" title="15.1 if标签"></a>15.1 if标签</h4><p><strong>需求：</strong>根据给定条件完成对满足条件的用户信息复合查询：查询满足名称叫刘德华 且 性别为男的所有员工信息</p><p><font color="cornflowerblue">1. 在接口中添加方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据给定条件 完成复合查询</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findUserByConditions</span><span class="hljs-params">(User user)</span></span>;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.在映射配置文件中添加配置信息</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--根据给定条件 完成复合查询--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findUserByConditions&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from user where 1=1<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username !=null&quot;</span>&gt;</span><br>      and  username=#&#123;username&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​        通过案例我们发现动态SQL的语法与 jsp中的JSTL标签非常类似。</p><p><font color="cornflowerblue">3. 测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 测试复合条件查询</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindByCondition</span><span class="hljs-params">()</span> </span>&#123;<br>      User user = <span class="hljs-keyword">new</span> User();<br>      user.setUsername(<span class="hljs-string">&quot;刘德华&quot;</span>);<br>      user.setSex(<span class="hljs-string">&quot;男&quot;</span>);<br>      <span class="hljs-comment">//执行查询</span><br>      List&lt;User&gt; users = userDao.findUserByConditions(user);<br>      <span class="hljs-keyword">for</span> (User user2 : users) &#123;<br>          System.out.println(user2);<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p><font color="red">通过案例我们再来理解什么是动态SQL？</font></p><blockquote><p>​        动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p><p>​                                                                                                                            —  MyBaits 官网</p></blockquote><h4 id="15-2-where标签"><a href="#15-2-where标签" class="headerlink" title="15.2 where标签"></a>15.2 where标签</h4><p><code>&lt;where&gt;</code>标签是为了解决拼接sql时需要添加一个恒等式的问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--根据给定条件 完成复合查询--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findUserByConditions&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>       select * from user<br>       <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username !=null and username!=&#x27;&#x27;&quot;</span>&gt;</span><br>               and username=#&#123;username&#125;<br>           <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sex!=null and sex!=&#x27;&#x27;&quot;</span>&gt;</span><br>               and sex=#&#123;sex&#125;<br>           <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再次执行测试，效果是相同的。</p><h4 id="15-3-foreach-标签"><a href="#15-3-foreach-标签" class="headerlink" title="15.3 foreach 标签"></a>15.3 foreach 标签</h4><p>​        当我们要查询满足条件在某个范围中的信息时：</p><p><strong>SQL：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>);<br></code></pre></td></tr></table></figure><p>​        在实际开发中我们该怎么解决呢？</p><p>​    1. 我们可以借助包装类，在包装类中声明一个集合，将范围信息存储到集合中。</p><pre><code>         2. 在配置文件中遍历集合，并将集合中的数据拼接到sql语句中</code></pre><p><font color="cornflowerblue">1. 在包装类中添加集合属性 和 对应的get、set方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 传递参数的包装类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QueryVo</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> User user;<br>    <span class="hljs-keyword">private</span> List&lt;Integer&gt; ids;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">getIds</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> ids;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setIds</span><span class="hljs-params">(List&lt;Integer&gt; ids)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.ids = ids;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUser</span><span class="hljs-params">(User user)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.user = user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. UserDao中添加相应方法并在映射文件中进行配置</font></p><p><strong>语法：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;集合名&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;and id in (&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;变量名&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;分隔符&quot;</span>&gt;</span><br>#&#123;变量名&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>collection：</strong>遍历的集合</li><li><strong>open：</strong>拼接SQL以该属性值为开头</li><li><strong>close：</strong>拼接SQL以该属性值为结尾</li><li><strong>item：</strong>变量名，相当于增强for循环中的那个变量。拼接在 <code>open</code> 和 <code>close</code> 之间</li><li><strong>separator：</strong>元素(变量)间以什么分割</li><li>#{变量名}：必须与<code>item</code>属性保持一致。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--根据包装类中的id集合，查询用户信息--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findUserByIds&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;queryVo&quot;</span>&gt;</span><br>    select * from user<br><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;ids != null and ids.size()&gt;0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;and id in (&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>            #&#123;id&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 测试根据包装类中的id集合，查询用户信息</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindUserByIds</span><span class="hljs-params">()</span> </span>&#123;<br>       QueryVo vo = <span class="hljs-keyword">new</span> QueryVo();<br>       List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>       list.add(<span class="hljs-number">1</span>);<br>       list.add(<span class="hljs-number">3</span>);<br>       list.add(<span class="hljs-number">5</span>);<br>       list.add(<span class="hljs-number">7</span>);<br>       vo.setIds(list);<br><br>       <span class="hljs-comment">//执行查询</span><br>       List&lt;User&gt; users = userDao.findUserByIds(vo);<br>       <span class="hljs-keyword">for</span> (User user : users) &#123;<br>           System.out.println(user);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p><font color="red">扩展标签：<code>&lt;sql&gt;</code></font></p><p>当配置文件中的相同的sql比较多时，我们可以将它统一提取出来</p><p><strong>声明：</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">sql</span> id=&quot;UserBase&quot;&gt;<br>    <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span><br>&lt;/<span class="hljs-keyword">sql</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>使用：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;select id=<span class="hljs-string">&quot;findAll&quot;</span> resultType=<span class="hljs-string">&quot;user&quot;</span>&gt;&lt;!--id属性对应方法的名称，不能随便写 --&gt;<br>   &lt;include refid=&quot;userBase&quot;&gt;&lt;/include&gt;<br>  <span class="hljs-comment">/*  select * from user;*/</span><br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><h2 id="16-MyBatis的多表查询"><a href="#16-MyBatis的多表查询" class="headerlink" title="16. MyBatis的多表查询"></a>16. MyBatis的多表查询</h2><p>在MySql中，表与表之间的关系有三种</p><ul><li>一对一</li><li>一对多（多对一）</li><li>多对多</li></ul><p><font color="cornflowerblue">举例</font>：</p><ul><li>一对一<ul><li>公民和身份证号：一个公民只能有一个身份证号</li></ul></li><li>一对多 或 多对一<ul><li>用户和订单是 一对多的关系：一个用户可以有多个订单</li><li>订单和用户是 多对一的关系：多个订单属于一个用户</li></ul></li><li>多对多<ul><li>学生和老师 是多对多：一个学生可以有多个老师，一个老师也有多个学生。</li></ul></li><li><font color="red">特殊：多对一</font><ul><li>如果将每一个订单取出，他都只能属于一个用户。所以在MyBatis中，就把多对一的关系 看做是一对一的关系</li></ul></li></ul><h3 id="16-1-MyBatis中的多表查询-1多对一，一对多"><a href="#16-1-MyBatis中的多表查询-1多对一，一对多" class="headerlink" title="16.1 MyBatis中的多表查询-1多对一，一对多"></a>16.1 MyBatis中的多表查询-1多对一，一对多</h3><h4 id="准备工作：Module创建-并能实现单表信息查询"><a href="#准备工作：Module创建-并能实现单表信息查询" class="headerlink" title="准备工作：Module创建 并能实现单表信息查询"></a><strong>准备工作：Module创建 并能实现单表信息查询</strong></h4><p><font color="cornflowerblue">1. 数据库表：用户表  和  账户表</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE mybatis2 CHARSET utf8;<br>USE mybatis2;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>` (<br>  `id` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `username` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户名称&#x27;</span>,<br>  `birthday` DATETIME <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;生日&#x27;</span>,<br>  `sex` <span class="hljs-type">CHAR</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;性别&#x27;</span>,<br>  `address` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;地址&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY  (`id`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-keyword">INSERT</span>  <span class="hljs-keyword">INTO</span> `<span class="hljs-keyword">user</span>`(`id`,`username`,`birthday`,`sex`,`address`) <br><span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;老王&#x27;</span>,<span class="hljs-string">&#x27;2017-05-27 18:27:09&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;北京&#x27;</span>),<br>(<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;小王&#x27;</span>,<span class="hljs-string">&#x27;2019-04-03 15:09:37&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;西安&#x27;</span>),<br>(<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;小李&#x27;</span>,<span class="hljs-string">&#x27;2019-07-22 17:44:33&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;咸阳&#x27;</span>),<br>(<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;小刘&#x27;</span>,<span class="hljs-string">&#x27;2018-03-04 15:52:36&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;渭南&#x27;</span>),<br>(<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;大王&#x27;</span>,<span class="hljs-string">&#x27;2016-11-03 17:37:26&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;富平&#x27;</span>),<br>(<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;小马&#x27;</span>,<span class="hljs-string">&#x27;2016-04-09 01:24:40&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;上海&#x27;</span>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `account` (<br>  `ID` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;编号&#x27;</span>,<br>  `UID` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户编号&#x27;</span>,<br>  `MONEY` <span class="hljs-keyword">DOUBLE</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;金额&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY  (`ID`),<br>  KEY `FK_Reference_8` (`UID`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `FK_Reference_8` <span class="hljs-keyword">FOREIGN</span> KEY (`UID`) <span class="hljs-keyword">REFERENCES</span> `<span class="hljs-keyword">user</span>` (`id`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-keyword">INSERT</span>  <span class="hljs-keyword">INTO</span> `account`(`ID`,`UID`,`MONEY`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1000</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 创建主配置文件：SqlMapConfig.xml,并且将log4j,jdbc的配置文件一起复制到<code>resources</code>目录下</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.wdzl.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--配置mysql环境--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--配置事务的类型--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--配置数据源（连接池）--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--Pooled 使用连接池--&gt;</span><br>                <span class="hljs-comment">&lt;!--配置连接数据库的4个基本信息--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-comment">&lt;!--指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/wdzl/dao/UserDao.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/wdzl/dao/AccountDao.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 建立两个实体类：用户实体类 和 账户实体类</font></p><p><strong>User:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  用户实体类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> Date birthday;<br>    <span class="hljs-keyword">private</span> Character sex;<br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(Integer id, String username, Date birthday, Character sex, String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.username = username;<br>        <span class="hljs-keyword">this</span>.birthday = birthday;<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getBirthday</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> birthday;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBirthday</span><span class="hljs-params">(Date birthday)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.birthday = birthday;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Character <span class="hljs-title">getSex</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSex</span><span class="hljs-params">(Character sex)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, birthday=&quot;</span> + birthday +<br>                <span class="hljs-string">&quot;, sex=&quot;</span> + sex +<br>                <span class="hljs-string">&quot;, address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>Account:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 账户实体类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> Integer uid;<br>    <span class="hljs-keyword">private</span> Double money;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span><span class="hljs-params">(Integer id, Integer uid, Double money)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.uid = uid;<br>        <span class="hljs-keyword">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getUid</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> uid;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUid</span><span class="hljs-params">(Integer uid)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.uid = uid;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Double <span class="hljs-title">getMoney</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> money;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMoney</span><span class="hljs-params">(Double money)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Account&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, uid=&quot;</span> + uid +<br>                <span class="hljs-string">&quot;, money=&quot;</span> + money +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4. 创建各自实体类操作的接口</font></p><p><strong>UserDao</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 操作用户的接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有用户信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>AccountDao</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 操作账户的接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AccountDao</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有账户信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">List&lt;Account&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5. 创建各接口对应的映射配置文件</font></p><p><strong>UserDao.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.wdzl.dao.UserDao&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--查询所有用户--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        select * from user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>AccountDao.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.wdzl.dao.AccountDao&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--查询所有账户--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;account&quot;</span>&gt;</span><br>        select * from account;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">6. 将映射配置文件添加到主配置文件中</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/wdzl/dao/UserDao.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/wdzl/dao/AccountDao.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">7. 测试：分别测试UserDao 和 AccountDao</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * UserDao测试类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserTest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> InputStream is;<br>    <span class="hljs-keyword">private</span> SqlSessionFactoryBuilder builder;<br>    <span class="hljs-keyword">private</span> SqlSessionFactory factory;<br>    <span class="hljs-keyword">private</span> SqlSession session;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  初始化方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException  </span>&#123;<br>        <span class="hljs-comment">//1.读取配置文件</span><br>        is = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-comment">//2.创建SqlSessionFactory工厂</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        使用SqlSessionFactoryBuilder创建工厂的好处是MyBatis将如何读取配置文件，如何使用配置文件，如何封装等细节都进行了封装，使我们使用极简的方式来实现功能。</span><br><span class="hljs-comment">         */</span><br>        builder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>        factory = builder.build(is);<br>        <span class="hljs-comment">//3.使用工厂生产SqlSession对象</span><br>        session = factory.openSession(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">//4.使用SqlSession创建Dao接口的代理对象</span><br>        userDao = session.getMapper(UserDao.class);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  释放资源</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//6.释放资源</span><br>        session.close();<br>        is.close();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询用户</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAllUser</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;User&gt; all = userDao.findAll();<br>        <span class="hljs-keyword">for</span> (User user : all) &#123;<br>            System.out.println(user);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountTest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> InputStream is;<br>    <span class="hljs-keyword">private</span> SqlSessionFactoryBuilder builder;<br>    <span class="hljs-keyword">private</span> SqlSessionFactory factory;<br>    <span class="hljs-keyword">private</span> SqlSession session;<br>    <span class="hljs-keyword">private</span> AccountDao accountDao;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  初始化方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException  </span>&#123;<br>        <span class="hljs-comment">//1.读取配置文件</span><br>        is = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-comment">//2.创建SqlSessionFactory工厂</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        使用SqlSessionFactoryBuilder创建工厂的好处是MyBatis将如何读取配置文件，如何使用配置文件，如何封装等细节都进行了封装，使我们使用极简的方式来实现功能。</span><br><span class="hljs-comment">         */</span><br>        builder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>        factory = builder.build(is);<br>        <span class="hljs-comment">//3.使用工厂生产SqlSession对象</span><br>        session = factory.openSession(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">//4.使用SqlSession创建Dao接口的代理对象</span><br>        accountDao = session.getMapper(AccountDao.class);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  释放资源</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//6.释放资源</span><br>        session.close();<br>        is.close();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询账户</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAllUser</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;Account&gt; all = accountDao.findAll();<br>        <span class="hljs-keyword">for</span> (Account account : all) &#123;<br>            System.out.println(account);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="需求：查询所有账户信息的同时，也显示账户所属用户的信息（多对一）"><a href="#需求：查询所有账户信息的同时，也显示账户所属用户的信息（多对一）" class="headerlink" title="需求：查询所有账户信息的同时，也显示账户所属用户的信息（多对一）"></a><strong>需求：查询所有账户信息的同时，也显示账户所属用户的信息（多对一）</strong></h4><p><font color="cornflowerblue">1.首先确定SQL语句</font></p><p><img src="/color-ful/img/mybatis/image-20210313005455559.png" alt="image-20210313005455559"></p><p>改进</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> a.`id`,a.`uid`, u.`username`,u.`sex`,u.`address`,a.`MONEY` <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">USER</span> u,account a <span class="hljs-keyword">WHERE</span> u.id<span class="hljs-operator">=</span>a.`uid`<br></code></pre></td></tr></table></figure><p><img src="/color-ful/img/mybatis/image-20210313005755918.png" alt="image-20210313005755918"></p><p><font color="cornflowerblue">2. 在实体类中添加一对一关系</font></p><p>在<code>Account</code>类中添加成员变量 <code>user</code>，并提供<code>get/set</code>方法</p><p><img src="/color-ful/img/mybatis/image-20210313013532449.png" alt="image-20210313013532449"></p><p><font color="cornflowerblue">3.修改映射配置文件</font></p><p><img src="/color-ful/img/mybatis/image-20210313014003747.png" alt="image-20210313014003747"></p><p><font color="cornflowerblue">4.执行测试即可</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 查询账户</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-meta">@Test</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAllAccount</span><span class="hljs-params">()</span> </span>&#123;<br>     List&lt;Account&gt; all = accountDao.findAll();<br>     <span class="hljs-keyword">for</span> (Account account : all) &#123;<br>         System.out.println(<span class="hljs-string">&quot;----------------&quot;</span>);<br>         System.out.println(account);<br>         System.out.println(account.getUser());<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h4 id="需求：查询所有用户信息的同时，显示该用户所拥有的账户信息"><a href="#需求：查询所有用户信息的同时，显示该用户所拥有的账户信息" class="headerlink" title="需求：查询所有用户信息的同时，显示该用户所拥有的账户信息"></a>需求：查询所有用户信息的同时，显示该用户所拥有的账户信息</h4><p><font color="cornflowerblue">1. 在实体类中添加一对多关系 </font></p><p><img src="/color-ful/img/mybatis/image-20210313014851911.png" alt="image-20210313014851911"></p><p><font color="cornflowerblue">2. 确定SQL语句</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">USER</span> u <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> account a <span class="hljs-keyword">ON</span> u.uid <span class="hljs-operator">=</span> a.uid;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 修改映射配置文件</font></p><p><img src="/color-ful/img/mybatis/image-20210313023442779.png" alt="image-20210313023442779"></p><p><font color="red">注意：Mybatis会自动去重，但是我们需要将表的主键字段设为不同名称才可以实现去重，这里我将两表的主键字段进行了修改。</font></p><p><font color="cornflowerblue">4.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询用户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAllUser</span><span class="hljs-params">()</span> </span>&#123;<br>    List&lt;User&gt; all = userDao.findAll();<br>    <span class="hljs-keyword">for</span> (User user : all) &#123;<br>        System.out.println(<span class="hljs-string">&quot;--------------&quot;</span>);<br>        System.out.println(user);<br>        System.out.println(user.getAccounts().size());<br>        System.out.println(user.getAccounts());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="16-2-MyBatis中的多表查询-2-多对多"><a href="#16-2-MyBatis中的多表查询-2-多对多" class="headerlink" title="16.2 MyBatis中的多表查询-2 多对多"></a>16.2 MyBatis中的多表查询-2 多对多</h3><p>我们知道SQL中 多对多的关系需要借助一张中间。</p><h4 id="需求：查询角色信息的同时显示赋予该角色的用户信息"><a href="#需求：查询角色信息的同时显示赋予该角色的用户信息" class="headerlink" title="需求：查询角色信息的同时显示赋予该角色的用户信息"></a>需求：查询角色信息的同时显示赋予该角色的用户信息</h4><p><strong>步骤：</strong></p><pre><code> 1. 建立两张表，用户表 和 角色表  - 让用户表和角色表具有多对多的关系。需要使用中间表，中间表中包含这两张表的主键，并且这两个主键在中间表中是外键2. 建立两个实体类：用户实体类 和 角色实体类- 让用户和角色实体类能体现出多对多的关系：各自包含对方的一个集合引用3. 建立配置文件- 用户配置文件- 角色配置文件4. 实现配置- 查询用户时，可以同时得到该用户所包含的角色信息。- 当我们查询角色时，可以同时得到拥有该角色的用户信息。</code></pre><p><strong>实现：先实现单表查询，再实现多对多关系查询</strong></p><p><font color="cornflowerblue">1. 新建Module, 修改pom.xml，添加相应依赖</font></p><p><font color="cornflowerblue">2. 将多表查询1的Module中 src下的内容拷贝到当前Module中</font></p><p><font color="cornflowerblue">3. 将 Account有关的类，接口 ，配置文件等进行删除</font></p><ul><li>实体类</li><li>接口</li><li>AccountDao配置文件</li><li>User实体类中与Account有关的属性和方法</li><li>UserDao.xml中有关Account的配置信息</li><li>测试类：Account测试类 和 User测试类中有关Account的部分</li></ul><p><font color="cornflowerblue">4. 创建数据库表并插入数据</font></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `role` (<br>  `rid` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;编号&#x27;</span>,<br>  `ROLE_NAME` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;角色名称&#x27;</span>,<br>  `ROLE_DESC` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">60</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;角色描述&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY  (`rid`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><br><span class="hljs-keyword">INSERT</span>  <span class="hljs-keyword">INTO</span> `role`(`rid`,`ROLE_NAME`,`ROLE_DESC`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;院长&#x27;</span>,<span class="hljs-string">&#x27;管理整个学院&#x27;</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;总裁&#x27;</span>,<span class="hljs-string">&#x27;管理整个公司&#x27;</span>),(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;校长&#x27;</span>,<span class="hljs-string">&#x27;管理整个学校&#x27;</span>);<br><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `user_role` (<br>  `UID` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户编号&#x27;</span>,<br>  `RID` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;角色编号&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY  (`UID`,`RID`),<br>  KEY `FK_Reference_10` (`RID`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `FK_Reference_10` <span class="hljs-keyword">FOREIGN</span> KEY (`RID`) <span class="hljs-keyword">REFERENCES</span> `role` (`rid`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `FK_Reference_9` <span class="hljs-keyword">FOREIGN</span> KEY (`UID`) <span class="hljs-keyword">REFERENCES</span> `<span class="hljs-keyword">user</span>` (`uid`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-keyword">INSERT</span>  <span class="hljs-keyword">INTO</span> `user_role`(`UID`,`RID`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>),(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5. 创建实体类</font></p><p><font color="red">注意：本次实体类的属性名和表字段并没有匹配，所以我们需要去手动配置映射</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Role实体类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Role</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer roleId;<br>    <span class="hljs-keyword">private</span> String roleName;<br>    <span class="hljs-keyword">private</span> String roleDesc;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Role</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Role</span><span class="hljs-params">(Integer roleId, String roleName, String roleDesc)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.roleId = roleId;<br>        <span class="hljs-keyword">this</span>.roleName = roleName;<br>        <span class="hljs-keyword">this</span>.roleDesc = roleDesc;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getRoleId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> roleId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRoleId</span><span class="hljs-params">(Integer roleId)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.roleId = roleId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getRoleName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> roleName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRoleName</span><span class="hljs-params">(String roleName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.roleName = roleName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getRoleDesc</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> roleDesc;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRoleDesc</span><span class="hljs-params">(String roleDesc)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.roleDesc = roleDesc;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Role&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;roleId=&quot;</span> + roleId +<br>                <span class="hljs-string">&quot;, roleName=&#x27;&quot;</span> + roleName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, roleDesc=&#x27;&quot;</span> + roleDesc + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">6. 创建Dao接口</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RoleDao</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有角色</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">List&lt;Role&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">7. 创建映射配置文件</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.wdzl.dao.RoleDao&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--对应dao的全限定类名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;roleMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Role&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roleId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;rid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roleName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;ROLE_NAME&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roleDesc&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;ROLE_DESC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;roleMap&quot;</span>&gt;</span><br>    select * from role<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">8. 主配置文件中添加相应的映射文件配置</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;mapper resource=<span class="hljs-string">&quot;com/wdzl/dao/RoleDao.xml&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">9. 测试单表查询是否成功</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java">**<br> * 测试类<br> *<br> * <span class="hljs-meta">@author</span> lp<br> * <span class="hljs-meta">@version</span> <span class="hljs-number">1.0</span><br> */<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RoleTest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> InputStream is;<br>    <span class="hljs-keyword">private</span> SqlSessionFactoryBuilder builder;<br>    <span class="hljs-keyword">private</span> SqlSessionFactory factory;<br>    <span class="hljs-keyword">private</span> SqlSession session;<br>    <span class="hljs-keyword">private</span> RoleDao roleDao;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.读取配置文件</span><br>        is = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-comment">//2.创建SqlSessionFactory工厂</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        使用SqlSessionFactoryBuilder创建工厂的好处是MyBatis将如何读取配置文件，如何使用配置文件，如何封装等细节都进行了封装，使我们使用极简的方式来实现功能。</span><br><span class="hljs-comment">         */</span><br>        builder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>        factory = builder.build(is);<br>        <span class="hljs-comment">//3.使用工厂生产SqlSession对象</span><br>        session = factory.openSession(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">//4.使用SqlSession创建Dao接口的代理对象</span><br>        roleDao = session.getMapper(RoleDao.class);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放资源</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//6.释放资源</span><br>        session.close();<br>        is.close();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询角色</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAllUser</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;Role&gt; roles = roleDao.findAll();<br>        <span class="hljs-keyword">for</span> (Role role : roles) &#123;<br>            System.out.println(role);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">10. 多对多关系在实体类中进行体现</font></p><p>在实体类中加入相应的属性，并提供get/set方法</p><p><img src="/color-ful/img/mybatis/image-20210314003318973.png" alt="image-20210314003318973"></p><p><font color="cornflowerblue">11. 分析SQL语句</font></p><p><img src="/color-ful/img/mybatis/image-20210314004759218.png" alt="image-20210314004759218"></p><p>通过图的分析，我们发现需要两个左外连接才能完成我们想要的查询</p><p><img src="/color-ful/img/mybatis/image-20210314005834016.png" alt="image-20210314005834016"></p><p>此时的结果已经基本是我们想要的，但是表中有一些字段时重复，比如 <code>rid</code> 和 <code>uid</code>，所以我们优化一下查询的字段</p><p><img src="/color-ful/img/mybatis/image-20210314010335787.png" alt="image-20210314010335787"></p><p><font color="cornflowerblue">12. 实现配置文件</font></p><p><img src="/color-ful/img/mybatis/image-20210314011314242.png" alt="image-20210314011314242"></p><p><font color="cornflowerblue">13. 测试：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询角色</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAllUser</span><span class="hljs-params">()</span> </span>&#123;<br>    List&lt;Role&gt; roles = roleDao.findAll();<br>    <span class="hljs-keyword">for</span> (Role role : roles) &#123;<br>        System.out.println(role);<br>        System.out.println(role.getUsers());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/color-ful/img/mybatis/image-20210314011436432.png" alt="image-20210314011436432"></p><h4 id="需求：-查询用户信息的同时显示用户所拥有的角色信息"><a href="#需求：-查询用户信息的同时显示用户所拥有的角色信息" class="headerlink" title="需求： 查询用户信息的同时显示用户所拥有的角色信息"></a>需求： 查询用户信息的同时显示用户所拥有的角色信息</h4><p>该需求与上一个需求的主要区别就是在SQL语句上，我们只需要稍加修改，即可实现</p><p><font color="cornflowerblue">1. 多对多关系在实体类上的体现</font></p><p><img src="/color-ful/img/mybatis/image-20210314011916686.png" alt="image-20210314011916686"></p><p><font color="cornflowerblue">2. 修改映射配置文件</font></p><p><img src="/color-ful/img/mybatis/image-20210314012427947.png" alt="image-20210314012427947"></p><p><font color="cornflowerblue">3. 测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询用户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAllUser</span><span class="hljs-params">()</span> </span>&#123;<br>    List&lt;User&gt; all = userDao.findAll();<br>    <span class="hljs-keyword">for</span> (User user : all) &#123;<br>        System.out.println(<span class="hljs-string">&quot;--------------&quot;</span>);<br>        System.out.println(user);<br>        System.out.println(user.getRoles());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/color-ful/img/mybatis/image-20210314012556351.png" alt="image-20210314012556351"></p><h2 id="17-延迟加载"><a href="#17-延迟加载" class="headerlink" title="17. 延迟加载"></a>17. 延迟加载</h2><p>首先我们先来分析一个问题：</p><p><strong>问题：</strong></p><p>在一对多的关系中，我们有一个用户，他有1000个账户。</p><ul><li>在查询用户时，要不要把关联的账户查出来？</li><li>在查询账户时，要不要把关联的用户查出来？</li></ul><p><strong>图解：</strong></p><ul><li>问题1：如果查出来，这一千个账户就会对应一千个账户对象，但是这些对象对于我们查询用户信息，无疑是没有用的，这样就造成了资源的浪费</li></ul><p><img src="/color-ful/img/mybatis/image-20210314014001436.png" alt="image-20210314014001436"></p><p><font color="red">所以：用户下的账户信息应该是什么时候使用，什么时候查询。</font></p><ul><li>问题2：我们查询账户信息时需要知道对应的用户信息</li></ul><p><img src="/color-ful/img/mybatis/image-20210314014253340.png" alt="image-20210314014253340"></p><p><font color="red">所以：账户所属用户信息应该随着账户的查询一并查出来</font></p><p>针对上述两个问题，我们引出两个概念：<strong>延迟加载和立即加载</strong></p><p>​    <strong>延迟加载：</strong>在真正使用的时候才发起查询，不用的时候不查询。延迟加载也可以称为<strong>按需加载</strong>或 <strong>懒加载</strong>。</p><p>​    <strong>立即加载：</strong>无论数据是否使用，只要调用方法，就会立马执行查询</p><p>在多表关系中：</p><p>​    <strong>一对多，多对多</strong>：通常情况下我们对 “多” 的一方采用延迟加载</p><p>​    <strong>多对一，一对一</strong>：通常情况下我们对 “一” 的一方采用立即加载</p><h3 id="17-1-一对一实现延迟加载"><a href="#17-1-一对一实现延迟加载" class="headerlink" title="17.1 一对一实现延迟加载"></a>17.1 一对一实现延迟加载</h3><p><font color="cornflowerblue">1. 新建Module，将 上面 “多对一”的项目复制到当前Module的 <code>src</code>下</font></p><p><font color="cornflowerblue">2. 修改<code>pom.xml</code>,添加相关依赖</font></p><p><font color="cornflowerblue">3. 在UserDao接口中添加一个方法：根据id查询用户的方法（懒加载要用）</font></p><p><img src="/color-ful/img/mybatis/image-20210314021542165.png" alt="image-20210314021542165"></p><p><font color="cornflowerblue">4. 在UserDao映射配置文件中实现该方法，并测试是否成功</font></p><p><img src="/color-ful/img/mybatis/image-20210314021618680.png" alt="image-20210314021618680"></p><p><font color="cornflowerblue">5.在AccountDao的映射配置文件中，我们对查询所有账户信息进行修改，实现赖加载。</font></p><p><img src="/color-ful/img/mybatis/image-20210314022926499.png" alt="image-20210314022926499"></p><p>此时测试我们观察控制台日志信息，发现并没有实现懒加载。原因是我们还需要在主配置文件中开启懒加载才可以。</p><p><img src="/color-ful/img/mybatis/image-20210314023031906.png" alt="image-20210314023031906"></p><p><font color="cornflowerblue">6. 在主配置文件中开启懒加载，配置的属性值我们可以去官网查看</font></p><p><img src="/color-ful/img/mybatis/image-20210314023315702.png" alt="image-20210314023315702"></p><p><img src="/color-ful/img/mybatis/image-20210314023233891.png" alt="image-20210314023233891"></p><p><font color="cornflowerblue">7.再次执行测试</font></p><p><img src="/color-ful/img/mybatis/image-20210314023351997.png" alt="image-20210314023351997"></p><p>​        这次的语句执行就和上一次不一样了，当我们执行<code>account.getUser()</code>时，用户信息才会被查询，否则则不查询。到此我们一对一实现延迟加载的需求就完成了。</p><h3 id="17-2-一对多实现延迟加载"><a href="#17-2-一对多实现延迟加载" class="headerlink" title="17.2 一对多实现延迟加载"></a>17.2 一对多实现延迟加载</h3><p><font color="cornflowerblue">1. 还是使用一对一实现延迟加载的工程。</font></p><p><font color="cornflowerblue">2. 在AccountDao中添加方法：根据用户id查询账户信息</font></p><p><img src="/color-ful/img/mybatis/image-20210314025741197.png" alt="image-20210314025741197"></p><p><font color="cornflowerblue">3. 在相应的映射配置文件中实现该方法,并进行测试</font></p><p><img src="/color-ful/img/mybatis/image-20210314025816089.png" alt="image-20210314025816089"></p><p><font color="cornflowerblue">4.在UserDao的映射配置文件中，在<code>findAll()</code>方法上实现懒加载</font></p><p><img src="/color-ful/img/mybatis/image-20210314030553938.png" alt="image-20210314030553938"></p><p><font color="cornflowerblue">5. 测试是否实现赖加载</font></p><p><img src="/color-ful/img/mybatis/image-20210314030756399.png" alt="image-20210314030756399"></p><h2 id="18-缓存"><a href="#18-缓存" class="headerlink" title="18. 缓存"></a>18. 缓存</h2><p><strong>概述：</strong></p><p>​    存在于内存中的数据叫做缓存</p><p><strong>应用：</strong></p><p>​    减少和数据库的交互，提高执行效率</p><p><strong>适用：</strong></p><ul><li>经常查询并且不经常改变的。</li><li>数据的正确与否对最终结果影响不大的。（比如视频访问量，回帖数量等）</li></ul><p><strong>不适用：</strong></p><ul><li>经常改变的数据</li><li>数据的正确与否对最终结果影响很大时（银行汇率，股票价格）</li></ul><p><strong>分类</strong></p><p>​        MyBatis中分为 一级缓存 和 二级缓存</p><h3 id="18-1-一级缓存"><a href="#18-1-一级缓存" class="headerlink" title="18.1 一级缓存"></a>18.1 一级缓存</h3><p><strong>概述：</strong></p><p>​    它指的是MyBatis中SqlSession对象的缓存。当我们执行查询后，查询结果会存入到SqlSession为我们提供的一款存储区域中。该区域的存储结构为Map。当我们再次查询同样数据时，MyBatis首先去一级缓存中查询，如果存在，则直接拿取使用</p><p><strong>注意：</strong></p><p>​    当SqlSession对象消失时，MyBatis的一级缓存也会消失</p><p><strong>演示：</strong></p><p><font color="cornflowerblue">1. 根据对象地址值确定两次结果都是从缓存中取出</font></p><p>我们在 演示CRUD的工程中 找到 测试 根据id查询用户的测试方法</p><p><img src="/color-ful/img/mybatis/image-20210314032336162.png" alt="image-20210314032336162"></p><p>结果：</p><p><img src="/color-ful/img/mybatis/image-20210314032557591.png" alt="image-20210314032557591"></p><p><font color="cornflowerblue">2. 关闭SqlSession,重新开启SqlSession,比较两个对象</font></p><p><img src="/color-ful/img/mybatis/image-20210314032807348.png" alt="image-20210314032807348"></p><p>结果：</p><p><img src="/color-ful/img/mybatis/image-20210314032754673.png" alt="image-20210314032754673"></p><p><font color="cornflowerblue">3. 我们也可以通过方法清除缓存：<code>clearCache()</code></font></p><p><img src="/color-ful/img/mybatis/image-20210314032925009.png" alt="image-20210314032925009"></p><p>结果：</p><p><img src="/color-ful/img/mybatis/image-20210314032909569.png" alt="image-20210314032909569"></p><p><strong><font color="red">注意：</font></strong></p><p>​    当sqlSession调用 add , update , delete，commit , close方法时，MyBatis会自动清空一级缓存，防止缓存数据与数据库中的数据不一致。</p><h3 id="18-2-二级缓存"><a href="#18-2-二级缓存" class="headerlink" title="18.2 二级缓存"></a>18.2 二级缓存</h3><p><strong>概述：</strong></p><p>​    它指的是MyBatis中SqlSessionFactory对象的缓存。由同一个SqlSessionFactory对象创建的SqlSession对象共享二级缓存。</p><p><strong>使用步骤:</strong></p><ol><li><p>在主配置文件中开启二级缓存</p><p><img src="/color-ful/img/mybatis/image-20210314034230636.png" alt="image-20210314034230636"></p></li><li><p>在映射配置文件中开启二级缓存</p><p><img src="/color-ful/img/mybatis/image-20210314034407604.png" alt="image-20210314034407604"></p></li><li><p>在当前操作（select标签）中开启二级缓存</p><p><img src="/color-ful/img/mybatis/image-20210314034429273.png" alt="image-20210314034429273"></p></li></ol><p>​    4. 测试</p><p><img src="/color-ful/img/mybatis/image-20210314035209602.png" alt="image-20210314035209602"></p><p>结果：</p><p><img src="/color-ful/img/mybatis/image-20210314035156982.png" alt="image-20210314035156982"></p><h2 id="19-MyBatis的注解开发"><a href="#19-MyBatis的注解开发" class="headerlink" title="19. MyBatis的注解开发"></a>19. MyBatis的注解开发</h2><p><strong>注意：</strong></p><p>​    注解开发是为了简化映射配置文件，但是主配置文件还是存在。</p><p><strong>环境搭建</strong></p><p><font color="cornflowerblue">1. 新建Module</font></p><p><font color="cornflowerblue">2. 修改pom.xml,添加相应的依赖</font></p><p><font color="cornflowerblue">3.创建实体类User</font></p><p><font color="cornflowerblue">4.创建主配置文件：SqlSessionConfig.xml</font></p><ul><li>引入外部配置文件</li><li>配置别名</li><li>配置数据源</li><li>指定带有注解的dao层接口所在位置</li></ul><p><font color="cornflowerblue">5.创建UserDao</font></p><ul><li>声明findAll()方法</li><li>在该方法上使用注解@Select</li></ul><p><font color="cornflowerblue">6.测试</font></p><ul><li>读取配置文件</li><li>获取SqlSessionFactory对象</li><li>使用Factory生成SqlSession</li><li>使用SqlSession生成代理对象</li><li>调用方法</li><li>释放资源</li></ul><p><font color="cornflowerblue">7. 注意事项：</font></p><p>​    采用注解开发时，如果对应目录下还存在配置文件，及时在主配置文件中没有配置<code>xml</code>，运行时也会报错。</p><ul><li>删除配置文件</li><li>将配置文件移动到其他目录下</li></ul><p><strong>注解分类：</strong></p><p>​    MyBatis针对CRUD操作一共有四个注解</p><ul><li>@Select</li><li>@Insert</li><li>@Delete</li><li>@Update</li></ul><h3 id="19-1-注解方式-CRUD操作"><a href="#19-1-注解方式-CRUD操作" class="headerlink" title="19.1 注解方式-CRUD操作"></a>19.1 注解方式-CRUD操作</h3><p><strong>UserDao</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有用户</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加用户</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Insert(&quot;insert into user(username,birthday,sex,address) values(#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <span class="hljs-meta">@Update(&quot;update user set address=#&#123;address&#125; where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <span class="hljs-meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisTest</span> </span>&#123;<br>    InputStream is;<br>    SqlSessionFactory factory;<br>    SqlSession session;<br>    UserDao userDao;<br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.读取配置文件</span><br>        is = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-comment">//2.创建SqlSessionFactory工厂</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        使用SqlSessionFactoryBuilder创建工厂的好处是MyBatis将如何读取配置文件，如何使用配置文件，如何封装等细节都进行了封装，使我们使用极简的方式来实现功能。</span><br><span class="hljs-comment">         */</span><br>        SqlSessionFactoryBuilder builder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>        factory = builder.build(is);<br>        <span class="hljs-comment">//3.使用工厂生产SqlSession对象</span><br>       session = factory.openSession();<br>        <span class="hljs-comment">//4.使用SqlSession创建Dao接口的代理对象</span><br>        userDao = session.getMapper(UserDao.class);<br>    &#125;<br><br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        is.close();<br>        session.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        List&lt;User&gt; users = userDao.findAll();<br>        <span class="hljs-keyword">for</span> (User user : users) &#123;<br>            System.out.println(user);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAddUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;呵呵&quot;</span>, <span class="hljs-string">&quot;1999-02-08&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-string">&quot;西安&quot;</span>);<br>        userDao.addUser(user);<br>        session.commit();<br>        System.out.println(user);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateAddUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;西安&quot;</span>);<br>        userDao.updateUser(user);<br>        session.commit();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        userDao.deleteUser(<span class="hljs-number">25</span>);<br>        session.commit();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="19-2-注解方式-其他操作"><a href="#19-2-注解方式-其他操作" class="headerlink" title="19.2 注解方式-其他操作"></a>19.2 注解方式-其他操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据id查询用户</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span><br><span class="hljs-function">User <span class="hljs-title">findUserById</span><span class="hljs-params">(Integer id)</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据用户名模糊查询用户信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Select(&quot;select * from user where username like #&#123;username&#125;&quot;)</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findUserByName</span><span class="hljs-params">(String name)</span></span>;<br><br><span class="hljs-meta">@Select(&quot;select count(*) from user&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findTotal</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><h3 id="19-3-处理字段名与属性名不同问题"><a href="#19-3-处理字段名与属性名不同问题" class="headerlink" title="19.3 处理字段名与属性名不同问题"></a>19.3 处理字段名与属性名不同问题</h3><p>通过 <code>@Results</code> 和 <code>@Rusult</code> 来处理不同问题</p><p><img src="/color-ful/img/mybatis/image-20210314044748081.png" alt="image-20210314044748081"></p><h3 id="19-4-配置一对一关系"><a href="#19-4-配置一对一关系" class="headerlink" title="19.4 配置一对一关系"></a>19.4 配置一对一关系</h3><p><strong>步骤：</strong></p><p><font color="cornflowerblue">1. 使用注解演示Module,新建Account类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer aid;<br>    <span class="hljs-keyword">private</span> Integer uid;<br>    <span class="hljs-keyword">private</span> Double money;<br>    <span class="hljs-comment">//一个账户只属于一个用户</span><br>    <span class="hljs-keyword">private</span> User user;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.创建AccountDao，添加相应的方法并添加注解</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 操作账户接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AccountDao</span> </span>&#123;<br><br>    <span class="hljs-meta">@Select(&quot;select * from account&quot;)</span><br>    <span class="hljs-meta">@Results(id =&quot;accountMap&quot; , value = &#123;</span><br><span class="hljs-meta">            @Result(id = true,property = &quot;aid&quot;,column = &quot;aid&quot;),</span><br><span class="hljs-meta">            @Result(property = &quot;uid&quot;,column = &quot;uid&quot;),</span><br><span class="hljs-meta">            @Result(property = &quot;money&quot;,column = &quot;money&quot;),</span><br><span class="hljs-meta">            @Result(property = &quot;user&quot;, column = &quot;uid&quot;, one=@One(select = &quot;com.wdzl.dao.UserDao.findUserById&quot;, fetchType = FetchType.EAGER))</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-function">List&lt;Account&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​        在配置一对一关系时与XML原理相同，配置完Account属性后，配置<code>user</code>对象属性，在多表关系中，一的一方用@One,多的一方用@Many</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Result(</span><br><span class="hljs-meta">    property = &quot;user&quot;,</span><br><span class="hljs-meta">    column = &quot;uid&quot;, //通过该列数据获取User对象数据</span><br><span class="hljs-meta">    one=@One(select = &quot;com.wdzl.dao.UserDao.findUserById&quot;, //获取User对象信息所调用的方法</span><br><span class="hljs-meta">    fetchType = FetchType.EAGER)//加载策略：延时，立即，默认</span><br><span class="hljs-meta">)</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    List&lt;Account&gt; accounts = accountDao.findAll();<br>    <span class="hljs-keyword">for</span> (Account account : accounts) &#123;<br>        System.out.println(account);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="19-5-配置一对多关系"><a href="#19-5-配置一对多关系" class="headerlink" title="19.5 配置一对多关系"></a>19.5 配置一对多关系</h3><p><font color="cornflowerblue">1. 在实体类中体现一对多关系</font></p><p><img src="/color-ful/img/mybatis/image-20210317140135563.png" alt="image-20210317140135563"></p><p><font color="cornflowerblue">2. 在UserDao中修改方法并添加注解</font></p><p><img src="/color-ful/img/mybatis/image-20210317140313781.png" alt="image-20210317140313781"></p><p><font color="cornflowerblue">3. 测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>     List&lt;User&gt; users = userDao.findAll();<br>     <span class="hljs-keyword">for</span> (User user : users) &#123;<br>         System.out.println(<span class="hljs-string">&quot;------------------&quot;</span>);<br>         System.out.println(user);<br>         System.out.println(user.getAccounts());<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="19-6-注解方式开启二级缓存"><a href="#19-6-注解方式开启二级缓存" class="headerlink" title="19.6 注解方式开启二级缓存"></a>19.6 注解方式开启二级缓存</h3><p><font color="cornflowerblue">1. 主配置中添加配置，但是该配置默认是开启的</font></p><p><font color="cornflowerblue">2. 在相应dao层接口上，添加注解</font></p><p><img src="/color-ful/img/mybatis/image-20210317142014018.png" alt="image-20210317142014018"></p>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring5 框架</title>
    <link href="/color-ful/2020/03/29/Spring5%20%E6%A1%86%E6%9E%B6/"/>
    <url>/color-ful/2020/03/29/Spring5%20%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring5-框架"><a href="#Spring5-框架" class="headerlink" title="Spring5 框架"></a>Spring5 框架</h1><!-- 该文章详细讲述了Spring5框架--><h2 id="1-本章主要内容"><a href="#1-本章主要内容" class="headerlink" title="1. 本章主要内容"></a>1. 本章主要内容</h2><ol><li><p>Spring框架概述</p><ol start="2"><li>IOC容器</li><li>AOP</li><li>JdbcTemplate</li><li>事务管理</li><li>Spring5 新特性</li></ol></li></ol><h2 id="2-Spring概述"><a href="#2-Spring概述" class="headerlink" title="2. Spring概述"></a>2. Spring概述</h2><p><strong>概述：</strong>Spring是轻量级的开源的JavaEE框架</p><ul><li><font color="limegreen">轻量级</font>：它的体积比较小，依赖的 Jar 包 比较少，并且不需要额外依赖其他的组件</li><li><font color="limegreen">开源</font>：免费提供源代码</li><li><font color="limegreen">框架</font>：可以简化我们构建软件的过程</li></ul><p><strong>目的：</strong>为了解决企业应用开发的复杂性</p><p><strong>核心：</strong>Spring的两大核心部分</p><ul><li>IOC：控制反转，把创建对象的过程交给Spring进行管理</li><li>AOP: 面向切面，不修改源代码进行功能增强</li></ul><p><strong>优点：</strong></p><ul><li>方便解耦，简化开发：</li><li>对AOP编程的支持</li><li>方便程序的测试</li><li>方便集成各种其他框架</li><li>方便进行事务操作</li><li>降低API开发难度</li></ul><h2 id="3-入门案例"><a href="#3-入门案例" class="headerlink" title="3. 入门案例"></a>3. 入门案例</h2><p>本入门案例使用Maven方式</p><p><font color="cornflowerblue">1. 创建Empty Project : spring_maven</font></p><p><font color="cornflowerblue">2. 在空项目中添加module</font></p><ul><li>不选模板，直接下一步</li><li>相关信息<ul><li>名称：day01_01first_spring</li><li>groupId：com.wdzl</li><li>artifactId：day01_01first_spring</li></ul></li></ul><p><font color="cornflowerblue">3. 添加maven依赖</font></p><p><img src="/color-ful/img/spring5/image-20210228150849879.png" alt="image-20210228150849879"></p><p>根据Spring的体系结构，我们需要导入四个基本jar包及一个日志依赖jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Spring--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-expression<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Spring日志依赖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4. 创建普通的类</font></p><p>在 <code>main.java</code> 中 创建 <code>comg.wdzl.User</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是User 对象&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5. 创建Spring配置文件，在配置文件配置创建的对象</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--创建User对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">6. 进行测试代码</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1 加载Spring的配置文件</span><br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>        <span class="hljs-comment">//2 获取配置创建的对象</span><br>        User user = context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>        user.showInfo();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-IOC容器"><a href="#4-IOC容器" class="headerlink" title="4.IOC容器"></a>4.IOC容器</h2><h3 id="4-1-IOC底层原理"><a href="#4-1-IOC底层原理" class="headerlink" title="4.1 IOC底层原理"></a>4.1 IOC底层原理</h3><p>​    <strong>概念：</strong></p><ul><li>控制反转</li></ul><blockquote><p>控制反转：传统方式如果我们要在B类中使用A类，我们需要在B类中通过new这个关键字来创建，这样无形中就增加了类与类之间的耦合性，通过控制反转，我们把创建对象，和对象间的调用的过程交给Spring来管理，这样就可以降低类与类之间的耦合性</p></blockquote><p>综上所述：</p><p>​    控制反转就是<font color="red">把创建对象，和对象间的调用的过程交给Spring来管理。</font>目的是为了<font color="red">降低类与类之间的耦合性</font>。</p><p><strong>底层原理：</strong></p><ul><li>XML解析</li><li>工厂模式</li><li>反射</li></ul><p><strong>原理图解：</strong></p><p><font color="cornflowerblue">1. 最原始的方法实现对象间的调用</font></p><p><img src="/color-ful/img/spring5/image-20210301203750755.png" alt="image-20210301203750755"></p><p><font color="cornflowerblue">2. 降低耦合，采用工厂模式</font></p><p><img src="/color-ful/img/spring5/image-20210301203904143.png" alt="image-20210301203904143"></p><p><font color="cornflowerblue">3. 使用IOC-控制反转</font></p><p><img src="/color-ful/img/spring5/image-20210301210136802.png" alt="image-20210301210136802"></p><p>工厂中的方法我们可以定义成getObject() 这样 我们想要哪个类的对象，我们的工厂都可以给我们生产。</p><p><strong>几个重要概念：</strong></p><ol><li><p><font color="limegreen">IOC容器</font>：IOC的实现依赖于IOC容器，而容器的本质就是对象工厂</p></li><li><p><font color="limegreen">IOC容器的实现方式</font>：</p><ul><li>BeanFactory：是最底层的接口，它只提供了最简单的容器功能：<code>加载配置文件</code>和<code>创建对象</code>的功能。<font color="red">当加载配置文件的时候，不会创建被配置的对象，只有在使用对象时，对象才会被创建。</font><ul><li>好处：节省内存</li><li>坏处：因为在使用过程中创建对象，所以效率低。</li></ul></li><li>ApplicationContext：应用上下文，继承BeanFactory接口，它是Spring的一各更高级的容器，提供了更多的有用的功能。<font color="red">当加载配置文件的时候，会同时创建被配置的对象</font>，当然，你也可以通过Bean配置lazy-init=true来让Bean延迟实例化。<ul><li>好处：效率高，将复杂的创建对象过程在启动服务时进行。</li><li>坏处：耗费资源</li></ul></li></ul></li><li><p><font color="limegreen">ApplicationContext的两个常用实现类</font>:( 在ApplicationContext接口中Ctrl+H打开继承体系结构)</p><ul><li>ClassPathXmlApplicationContext:从项目中的resource文件夹中加载配置文件</li><li>FileSystemXmlApplicationContext:从文件系统，Windows路径中加载文件（需要访问权限）</li><li>AnnotationConfigApplicationContext: 读取注解配置</li></ul><p><img src="/color-ful/img/spring5/image-20210302094629030.png" alt="image-20210302094629030"></p></li></ol><h2 id="5-IOC操作Bean管理"><a href="#5-IOC操作Bean管理" class="headerlink" title="5 IOC操作Bean管理"></a>5 IOC操作Bean管理</h2><p><strong>概念：</strong>IOC操作 - Bean管理指的是两个操作：1. Spring创建对象  2. Spring注入属性（属性赋值）</p><p><strong>实现方式：</strong></p><ol><li> 基于XML</li><li>  基于注解方式</li></ol><h3 id="5-1-基于XML方式-创建对象"><a href="#5-1-基于XML方式-创建对象" class="headerlink" title="5.1 基于XML方式 - 创建对象"></a>5.1 基于XML方式 - 创建对象</h3><blockquote><p>该方式与入门案例相似，将该案例作为课堂练习，给大家留10分钟来快速的完成。</p></blockquote><p>该方式是在 Spring配置文件中，使用bean标签，在标签中添加对应的属性，就可以实现对象的创建</p><p><strong>bean标签中的常用属性：</strong></p><ul><li><font color="limegreen">id</font>：唯一标识，通过该属性可以找到对应的bean标签</li><li><font color="limegreen">class</font> : 类的全限定类名</li></ul><p><strong>特点：</strong>创建对象时，默认是执行无参构造 方法来完成对象的创建。（反射）</p><h3 id="5-2-基于XML方式-注入属性"><a href="#5-2-基于XML方式-注入属性" class="headerlink" title="5.2 基于XML方式 - 注入属性"></a>5.2 基于XML方式 - 注入属性</h3><p>**DI:**依赖注入，就是注入属性。它是IOC的一个具体操作</p><p><strong>分类：</strong></p><ol><li> 使用set方法进行注入</li><li>使用构造器进行注入</li></ol><h4 id="5-2-1-使用Set方式进行注入："><a href="#5-2-1-使用Set方式进行注入：" class="headerlink" title="5.2.1 使用Set方式进行注入："></a>5.2.1 使用Set方式进行注入：</h4><p><font color="cornflowerblue">1. 新建Module</font></p><ul><li>名称：day01_02iocBean_xml</li><li>groupId：com.wdzl</li><li>artifactId：day01_02iocBean_xml</li></ul><p><font color="cornflowerblue">2. 在pom文件中添加Spring依赖与入门案例相同</font></p><p><font color="cornflowerblue">3. 新建类：Book</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String author;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Book</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAuthor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> author;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAuthor</span><span class="hljs-params">(String author)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.author = author;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Book&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, author=&#x27;&quot;</span> + author + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4. 添加配置文件bean.xml</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Book&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;葵花宝典&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;东方不败&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>属性注入通过<code>&lt;property&gt;</code>标签：</p><ul><li>name：属性名</li><li>value：属性值</li></ul><p><font color="cornflowerblue">5. 编写测试案例：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl;<br><br><span class="hljs-keyword">import</span> com.wdzl.pojo.Book;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 依赖注入-XML方式 演示案例</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XMLTest</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 依赖注入- 通过set方式注入</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1.加载Spring配置文件</span><br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>        <span class="hljs-comment">//2. 获取对象（new 和 调用set 都由Spring完成）</span><br>        Book book = context.getBean(<span class="hljs-string">&quot;book&quot;</span>, Book.class);<br>        System.out.println(book);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">6. 结果：</font></p><p><img src="/color-ful/img/spring5/image-20210302105843717.png" alt="image-20210302105843717"></p><h4 id="5-2-2-使用有参构造进行注入"><a href="#5-2-2-使用有参构造进行注入" class="headerlink" title="5.2.2 使用有参构造进行注入"></a>5.2.2 使用有参构造进行注入</h4><p><font color="cornflowerblue">1. 在上一个Module中新建一个bean配置文件:bean2.xml</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 构造方法注入 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Book&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;含笑半步癫&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;唐伯虎&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;constructor-arg&gt;</code>用来配置构造器的参数，其中 可以用<code>name</code>属性直接指定构造器中对应的参数名，也可以通过<code>index</code>属性按照索引指定参数。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 构造方法注入 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Book&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--        &lt;constructor-arg name=&quot;name&quot; value=&quot;含笑半步癫&quot;/&gt;</span><br><span class="hljs-comment">                &lt;constructor-arg name=&quot;author&quot; value=&quot;唐伯虎&quot;/&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;含笑半步癫&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;唐伯虎&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 编写测试案例：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 依赖注入 - 通过构造方法注入</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1.加载Spring配置文件</span><br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean2.xml&quot;</span>);<br>    <span class="hljs-comment">//2. 获取对象（new 和 调用set 都由Spring完成）</span><br>    Book book = context.getBean(<span class="hljs-string">&quot;book2&quot;</span>, Book.class);<br>    System.out.println(book);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">结果：</font></p><p><img src="/color-ful/img/spring5/image-20210302120000091.png" alt="image-20210302120000091"></p><h4 id="5-2-3-p命名空间"><a href="#5-2-3-p命名空间" class="headerlink" title="5.2.3 p命名空间"></a>5.2.3 p命名空间</h4><p><font color="cornflowerblue">1.同样在上一个Moule中添加一个bean配置文件：bean3.xml</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br>       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;&lt;!-- 添加p命名空间 --&gt;<br>       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans<br>http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;<br><span class="hljs-comment">&lt;!--p命名空间注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Book&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;呵呵&quot;</span> <span class="hljs-attr">p:author</span>=<span class="hljs-string">&quot;哈哈&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.编写测试案例 </font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 依赖注入 - 通过p命名空间</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1.加载Spring配置文件</span><br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean3.xml&quot;</span>);<br>    <span class="hljs-comment">//2. 获取对象（new 和 调用set 都由Spring完成）</span><br>    Book book = context.getBean(<span class="hljs-string">&quot;book&quot;</span>, Book.class);<br>    System.out.println(book);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-4-注入属性的特殊情况：null值-和-特殊符号"><a href="#5-2-4-注入属性的特殊情况：null值-和-特殊符号" class="headerlink" title="5.2.4 注入属性的特殊情况：null值 和 特殊符号"></a>5.2.4 注入属性的特殊情况：null值 和 特殊符号</h4><p><font color="cornflowerblue">1.同样在上一个Moule中添加一个bean配置文件：bean3.xml</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--p命名空间注入--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Book&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--null值--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span>&gt;</span><br>          <span class="hljs-comment">&lt;!--&lt;value&gt;&quot;&lt;&lt;嘿嘿&gt;&gt;&quot;&lt;/value&gt; 报错，包含特殊符号--&gt;</span><br>          <span class="hljs-comment">&lt;!--使用转译字符--&gt;</span><br>          <span class="hljs-comment">&lt;!--&lt;value&gt;&quot;&amp;lt;&amp;gt;&quot;&lt;/value&gt;--&gt;</span><br>          <span class="hljs-comment">&lt;!--方式2：使用CDATA--&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;??&gt;&gt;]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.编写测试案例 </font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 依赖注入 - 空值和特殊符号</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1.加载Spring配置文件</span><br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean4.xml&quot;</span>);<br>    <span class="hljs-comment">//2. 获取对象（new 和 调用set 都由Spring完成）</span><br>    Book book = context.getBean(<span class="hljs-string">&quot;book&quot;</span>, Book.class);<br>    System.out.println(book);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 结果</font></p><p><img src="/color-ful/img/spring5/image-20210302145052710.png" alt="image-20210302145052710"></p><h4 id="5-2-5注入属性-外部bean"><a href="#5-2-5注入属性-外部bean" class="headerlink" title="5.2.5注入属性 - 外部bean"></a>5.2.5注入属性 - 外部bean</h4><p>​        二阶段我们学习的三层架构中，<code>service</code>通过调用<code>dao</code>层方法来完成复杂的业务，但是传统方式，我们需要在<code>service</code>中直接创建<code>dao</code>层对象,这样无疑增加了<code>dao</code>层和<code>service</code>层的依赖。诸如这种情况我们就可以借助外部Bean的方式来 降低耦合性。我们通过案例来讲解外部bean注入。</p><p><strong>步骤：</strong></p><ol><li><p>在要被注入外部bean的类中 声明一个成员变量</p><ol start="2"><li>提供set方法</li></ol></li></ol><p><font color="cornflowerblue">1. 新建一个Module</font></p><ul><li>名称：day01_03iocBean_xml2</li><li>groupId：com.wdzl</li><li>artifactId：day01_03iocBean_xml2</li></ul><p><font color="cornflowerblue">2. 按照三层架构模型，创建 dao层 和service层</font></p><p><strong>UserDao</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>UserDaoImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserDao:addUser()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>UserService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>UserServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserService:UserDao...&quot;</span>);<br>        userDao.addUser();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userDao = userDao;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 创建Bean.xml 实现依赖注入</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.service.impl.UserServiceImpl&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--注入外部Bean-dao层,使用set方式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="red">注意：</font></p><p><img src="/color-ful/img/spring5/image-20210302173510471.png" alt="image-20210302173510471"></p><h4 id="5-2-6注入属性-内部bean"><a href="#5-2-6注入属性-内部bean" class="headerlink" title="5.2.6注入属性-内部bean"></a>5.2.6注入属性-内部bean</h4><p><font color="cornflowerblue">1. 创建emp类 和 dept类</font></p><ul><li>emp中 有 empName，gender和 dept对象属性</li><li>dept中有deptName属性</li></ul><p><font color="cornflowerblue">2.再上一个案例的基础上新建bean配置文件 ：bean2.xml</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Emp&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--基本数据类型--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;周杰伦&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--引用数据类型--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Dept&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;deptName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;研发部&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 测试案例</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean2.xml&quot;</span>);<br>    Emp emp = context.getBean(<span class="hljs-string">&quot;emp&quot;</span>, Emp.class);<br>    System.out.println(emp);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.结果</font></p><p><img src="/color-ful/img/spring5/image-20210303053300079.png" alt="image-20210303053300079"></p><h4 id="5-2-7-注入属性-级联操作"><a href="#5-2-7-注入属性-级联操作" class="headerlink" title="5.2.7 注入属性 - 级联操作"></a>5.2.7 注入属性 - 级联操作</h4><p><font color="cornflowerblue">1.再上一个案例的基础上新建bean配置文件 ：bean3.xml</font></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span><br><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;<br>    &lt;bean id=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.wdzl.pojo.Emp&quot;</span>&gt;<br>&lt;!--基本数据类型--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;empName&quot;</span> value=<span class="hljs-string">&quot;蔡依林&quot;</span>/&gt;<br>        &lt;property name=<span class="hljs-string">&quot;gender&quot;</span> value=<span class="hljs-string">&quot;女&quot;</span>/&gt;<br>&lt;!--引用数据类型：级联赋值--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;dept&quot;</span> ref=<span class="hljs-string">&quot;dept&quot;</span>/&gt;<br>    &lt;/bean&gt;<br>    &lt;bean id=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.wdzl.pojo.Dept&quot;</span>&gt;<br>        &lt;property name=&quot;deptName&quot; value=&quot;市场部&quot;&gt;&lt;/property&gt;<br>    &lt;/bean&gt;<br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure><p>其中：</p><p><img src="/color-ful/img/spring5/image-20210303053647543.png" alt="image-20210303053647543"></p><p><font color="cornflowerblue">2. 测试案例</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean3.xml&quot;</span>);<br>    Emp emp = context.getBean(<span class="hljs-string">&quot;emp&quot;</span>, Emp.class);<br>    System.out.println(emp);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 结果</font></p><p><img src="/color-ful/img/spring5/image-20210303053805170.png" alt="image-20210303053805170"></p><p><font color="red">方式2：</font></p><p>该方式的注意事项：</p><ul><li>对应的引用数据类型属性必须提供get方法，否则会报红</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Emp&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--基本数据类型--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;蔡依林&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--引用数据类型：级联赋值--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dept&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept.deptName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;运营部&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Dept&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/color-ful/img/spring5/image-20210303054656085.png" alt="image-20210303054656085"></p><h4 id="5-2-8-注入属性-集合数组类型"><a href="#5-2-8-注入属性-集合数组类型" class="headerlink" title="5.2.8 注入属性 - 集合数组类型"></a>5.2.8 注入属性 - 集合数组类型</h4><p><font color="cornflowerblue">1. 新建一个Module</font></p><p><font color="cornflowerblue">2. 在pom.xml中添加Spring依赖</font></p><p><font color="cornflowerblue">3. 创建一个Demo类，其中包含数组，list集合，Map集合。因为list 和 set使用相似，所以我们这里就不演示set集合</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.pojo;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String[] info;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; list;<br>    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; map;<br><br>    <span class="hljs-keyword">public</span> String[] getInfo() &#123;<br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setInfo</span><span class="hljs-params">(String[] info)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.info = info;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">getList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setList</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title">getMap</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMap</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.map = map;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Demo&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;strings=&quot;</span> + Arrays.toString(info) +<br>                <span class="hljs-string">&quot;, list=&quot;</span> + list +<br>                <span class="hljs-string">&quot;, map=&quot;</span> + map +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4.创建bean配置文件：bean.xml</font></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span><br><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;<br>    &lt;bean id=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.wdzl.pojo.Demo&quot;</span>&gt;<br>        &lt;!--给数组属性注入--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;info&quot;</span>&gt;<br>            &lt;array&gt;<br>                &lt;value&gt;你好&lt;/value&gt;<br>                &lt;value&gt;&quot;Spring&quot;&lt;/value&gt;<br>            &lt;/array&gt;<br>        &lt;/property&gt;<br>        &lt;!--给集合属性注入--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;list&quot;</span>&gt;<br>            &lt;list&gt;<br>                &lt;value&gt;Hello&lt;/value&gt;<br>                &lt;value&gt;&quot;Spring&quot;&lt;/value&gt;<br>                &lt;value&gt;again&lt;/value&gt;<br>            &lt;/list&gt;<br>        &lt;/property&gt;<br>        &lt;!--给map属性注入--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;map&quot;</span>&gt;<br>            &lt;map&gt;<br>                &lt;entry key=&quot;你好&quot; value=&quot;Hello&quot;&gt;&lt;/entry&gt;<br>                &lt;entry key=&quot;呵呵&quot; value=&quot;hehe&quot;&gt;&lt;/entry&gt;<br>            &lt;/map&gt;<br>        &lt;/property&gt;<br><br>    &lt;/bean&gt;<br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5. 测试案例 </font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoTest</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) &#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>        Demo demo = context.getBean(<span class="hljs-string">&quot;demo&quot;</span>, Demo.<span class="hljs-keyword">class</span>);<br>        System.out.println(demo);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">6. 结果</font></p><p><img src="/color-ful/img/spring5/image-20210303061822634.png" alt="image-20210303061822634"></p><h4 id="5-2-9-注入属性-集合数组类型2：集合中存储引用数据类型"><a href="#5-2-9-注入属性-集合数组类型2：集合中存储引用数据类型" class="headerlink" title="5.2.9 注入属性 - 集合数组类型2：集合中存储引用数据类型"></a>5.2.9 注入属性 - 集合数组类型2：集合中存储引用数据类型</h4><p><font color="cornflowerblue">1. 新建一个Module</font></p><p><font color="cornflowerblue">2. 在pom.xml中添加Spring依赖</font></p><p><font color="cornflowerblue">3. 创建Demo类 和 City类</font></p><p><strong>Demo类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;City&gt; cities;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;City&gt; <span class="hljs-title">getCities</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> cities;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCities</span><span class="hljs-params">(List&lt;City&gt; cities)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.cities = cities;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>City类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 城市类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">City</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;City&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4.创建bean配置文件：bean.xml</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.Demo&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cities&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;city1&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;city2&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;city1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.City&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;西安&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;city2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.City&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上海&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5.测试案例</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    Demo demo = context.getBean(<span class="hljs-string">&quot;demo&quot;</span>, Demo.class);<br>    System.out.println(demo);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">6.结果</font></p><p><img src="/color-ful/img/spring5/image-20210303070519058.png" alt="image-20210303070519058"></p><h4 id="5-2-10-注入属性-将集合内容提取为公共部分"><a href="#5-2-10-注入属性-将集合内容提取为公共部分" class="headerlink" title="5.2.10 注入属性- 将集合内容提取为公共部分"></a>5.2.10 注入属性- 将集合内容提取为公共部分</h4><p><font color="cornflowerblue">1. 引入一个新的命名空间</font></p><p><img src="/color-ful/img/spring5/image-20210303071531806.png" alt="image-20210303071531806"></p><p><font color="cornflowerblue">2. 使用util标签将集合提取出来</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:util</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/util</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--List集合提取为公共部分，其他bean都可以使用--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">util:list</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cityList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>西安<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">util:list</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.Demo&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cities&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;cityList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 修改Demo类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; cities;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">getCities</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> cities;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCities</span><span class="hljs-params">(List&lt;String&gt; cities)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.cities = cities;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Demo&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;cities=&quot;</span> + cities +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4. 测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean2.xml&quot;</span>);<br>    Demo demo = context.getBean(<span class="hljs-string">&quot;demo&quot;</span>, Demo.class);<br>    System.out.println(demo);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5. 结果</font></p><p><img src="/color-ful/img/spring5/image-20210303072434526.png" alt="image-20210303072434526"></p><h4 id="5-2-11-注入属性-FactoryBean"><a href="#5-2-11-注入属性-FactoryBean" class="headerlink" title="5.2.11 注入属性-FactoryBean"></a>5.2.11 注入属性-FactoryBean</h4><p><strong>概念：</strong>Spring中又两种类型的bean，一种是 普通bean，另一种是工厂bean。</p><ul><li>普通bean：在配置文件中定义的bean类型就是返回类型</li><li>工厂bean：在配置文件中定义的bean类型可以和返回类型不同</li></ul><p><strong>步骤：</strong></p><ol><li>创建类，实现FactoryBean接口</li><li>实现接口里的方法，在实现的方法中定义返回的bean类型</li></ol><p><strong>演示：</strong></p><p><font color="cornflowerblue">1. 新建一个Module,在pom.xml中添加Spring依赖。</font></p><p><font color="cornflowerblue">2. 新建一个空的类：MyBean</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBean</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 创建Bean配置文件：bean.xml</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.MyBean&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    MyBean myBean = context.getBean(<span class="hljs-string">&quot;myBean&quot;</span>, MyBean.class);<br>    System.out.println(myBean);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>此时我们注入的是普通bean</p><p><font color="cornflowerblue">4.让MyBean继承FactoryBean,并实现里面的3个方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.pojo;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.FactoryBean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FactoryBean</span>&lt;<span class="hljs-title">String</span>&gt; </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  返回对象：此方法中定义了注入MyBean时,真正的返回对象类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是字符串&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回对象类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  是否是单例</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSingleton</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5.再次执行测试案例，会报错</font></p><p><img src="/color-ful/img/spring5/image-20210303094632421.png" alt="image-20210303094632421"></p><p>这是因为返回类型和接收类型不匹配问题</p><p><font color="cornflowerblue">6.修改测试代码</font></p><p><img src="/color-ful/img/spring5/image-20210303094800930.png" alt="image-20210303094800930"></p><h3 id="5-3-Bean的作用域"><a href="#5-3-Bean的作用域" class="headerlink" title="5.3 Bean的作用域"></a>5.3 Bean的作用域</h3><p><strong>概念：</strong>在Spring里面，设置创建Bean实例是单实例还是多实例。默认情况下，Bean实例是单实例。</p><p><strong>演示：</strong></p><p>​        <font color="cornflowerblue">不设置作用域</font>：在上一个案例的测试案例中再创建一个对象，对比两个对象的地址值，如果相等则代表二者是同一个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean2.xml&quot;</span>);<br>    Demo demo = context.getBean(<span class="hljs-string">&quot;demo&quot;</span>, Demo.class);<br>    Demo demo2 = context.getBean(<span class="hljs-string">&quot;demo&quot;</span>, Demo.class);<br>    System.out.println(demo==demo2);<span class="hljs-comment">//true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>​        <font color="cornflowerblue">设置作用域：</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Book&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;葵花宝典&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;东方不败&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再次测试则结果变为false。</p><p><strong>singleton和prototype的区别：</strong></p><ul><li>singleton:加载配置文件时，对象便会被创建</li><li>prototype:加载配置文件时，并不创建对象，在调用getBean方法时，才会创建对象，并且每次调用都会创建。</li></ul><h3 id="5-4-Bean的生命周期"><a href="#5-4-Bean的生命周期" class="headerlink" title="5.4 Bean的生命周期"></a>5.4 Bean的生命周期</h3><p><strong>概述：</strong></p><p>​    一个对象从创建到销毁的过程。</p><p><strong>过程：</strong></p><ol><li>通过构造器创建Bean实例</li><li>为Bean的属性设置值或引用其他Bean（调用set方法）</li><li>调用Bean的初始化方法</li><li>Bean对象获取</li><li>容器关闭，调用Bean的销毁方法</li></ol><p><strong>演示：</strong></p><p><font color="cornflowerblue">1. 新建Module,添加pom依赖</font></p><p><font color="cornflowerblue">2. 新建实体类User</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;第一步：调用无参构造&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;第二步：调用set方法设置属性&quot;</span>);<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;第三步：调用初始化的方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;第五步：设置销毁的方法&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 配置文件中配置对象，同时配置它的初始化和销毁的方法</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.User&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroy&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;周杰伦&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>       ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>       User user = context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>       System.out.println(<span class="hljs-string">&quot;第四步：获取对象&quot;</span>);<br>       <span class="hljs-comment">//因为close是子类特有的方法，所以需要强转</span><br><br>       ((ClassPathXmlApplicationContext)context).close();<br>   &#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5. 结果</font></p><p><img src="/color-ful/img/spring5/image-20210321070118349.png" alt="image-20210321070118349"></p><p>在Bean的生命周期中，当你配置了后置处理器之后，生命周期会有额外的两步</p><ol><li>通过构造器创建Bean实例</li><li>为Bean的属性设置值或引用其他Bean（调用set方法）</li><li><font color="red">执行后置处理器</font></li><li>调用Bean的初始化方法</li><li><font color="red">执行后置处理器</font></li><li>Bean对象获取</li><li>容器关闭，调用Bean的销毁方法</li></ol><p><font color="cornflowerblue">1. 创建MyBeanPost 实体类，实现BeanPostProcessor接口</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBeanPost</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BeanPostProcessor</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;第三步：执行后置处理器&quot;</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;第五步:执行后置处理器&quot;</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 配置文件中配置该类</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBeanPost&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.MyBeanPost&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 修改相应步骤的编号，执行测试</font></p><p><img src="/color-ful/img/spring5/image-20210321071145081.png" alt="image-20210321071145081"></p><h3 id="5-5-自动装配"><a href="#5-5-自动装配" class="headerlink" title="5.5 自动装配"></a>5.5 自动装配</h3><p><strong>概念：</strong>根据指定的装配规则（属性名称，属性类型），Spring自动将匹配的属性值进行注入</p><p><strong>实现：</strong>借助<code>bean</code>标签的 <code>autowire</code>属性，该属性常用的两个值</p><ul><li>byName: 根据属性名称注入</li><li>byType:根据属性数据类型注入</li></ul><p><strong>演示：</strong></p><p>​    <font color="cornflowerblue">1.新建Module,在pom.xml中添加对Spring的依赖</font></p><p>​    <font color="cornflowerblue">2. 创建Emp 和 Dept类</font></p><p>​    <strong>Emp类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 员工表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Emp</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Dept dept;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Dept <span class="hljs-title">getDept</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> dept;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDept</span><span class="hljs-params">(Dept dept)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.dept = dept;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Emp&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, dept=&quot;</span> + dept +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Dept类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 部门类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dept</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String deptName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDeptName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> deptName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDeptName</span><span class="hljs-params">(String deptName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.deptName = deptName;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 创建bean的配置文件：bean.xml</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  实现自动装备借助属性autowire，该属性常用的两个值：</span><br><span class="hljs-comment">    byName:根据属性名匹配。注入值bean的id和类的属性名称必须保持一致</span><br><span class="hljs-comment">    byType:根据属性的数据类型进行注入</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Emp&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wdzl.pojo.Dept&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4. 测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    Emp emp = context.getBean(<span class="hljs-string">&quot;emp&quot;</span>, Emp.class);<br>    System.out.println(emp);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5.结果</font></p><p><img src="/color-ful/img/spring5/image-20210303112649962.png" alt="image-20210303112649962"></p><p><font color="cornflowerblue">6. 注意事项：</font></p><p>​        将 <code>autowire</code>的属性值换成<code>bytype</code>后依然测试成功，但是 需要注意：使用<code>byType</code>时，如果有多个<code>class</code>属性相同的<code>bean</code>标签，则会报错</p><p><img src="/color-ful/img/spring5/image-20210303113111126.png" alt="image-20210303113111126"></p><h3 id="5-6-引入外部配置文件"><a href="#5-6-引入外部配置文件" class="headerlink" title="5.6 引入外部配置文件"></a>5.6 引入外部配置文件</h3><p>我们以JDBC连接数据库为例</p><p><font color="cornflowerblue">1. 新建Module,修改pom.xml，添加Spring依赖和Druid连接池依赖</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Spring--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-expression<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Spring日志依赖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Druid连接池 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 在配置文件中配置数据库连接信息</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 直接配置连接池的方式--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 创建外部配置文件：jdbc.properties</font></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">druid.driverClass</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-meta">druid.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/test</span><br><span class="hljs-meta">druid.userName</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">druid.password</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4.将外部配置文件引入到Spring中</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入外部配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--读取外部配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.driverClass&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.url&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.userName&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.password&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-7-基于注解方式-创建对象"><a href="#5-7-基于注解方式-创建对象" class="headerlink" title="5.7  基于注解方式 - 创建对象"></a>5.7  基于注解方式 - 创建对象</h3><p><strong>概念：</strong>注解是代码的特殊标记</p><p><strong>格式：</strong>@注解名称（属性名称=属性值，属性名称=属性值….）</p><p><strong>应用：</strong>它可以简化XML配置，注解可以用在类上，属性上，方法上</p><p><strong>Spring针对Bean管理中创建对象提供的注解：</strong></p><ul><li>@Component : 普通类使用</li><li>@Service :Service层中使用</li><li>@Controller：Web层中使用</li><li>@Repository：Dao层中使用</li></ul><p><font color="red">这4个注解功能是相同的，都可以用来创建Bean实例，其实他们的本质都是@Component。</font></p><p><strong>演示：</strong></p><p><font color="cornflowerblue">1. 新建Module</font></p><p><font color="cornflowerblue">2. 修改pom.xml，额外新增aop的依赖jar包</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--Spring--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-expression<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--Spring日志依赖 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 按照三层架构创建包结构，在dao层中添加UserDao，并在UserDao上添加注解</font></p><p><img src="/color-ful/img/spring5/image-20210303143705113.png" alt="image-20210303143705113"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.dao;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//注解中的value值可以省略不写</span><br><span class="hljs-comment">//默认值：类名首字母小写</span><br><br><span class="hljs-meta">@Repository(value = &quot;userDao&quot;)</span><span class="hljs-comment">//此处的value相当于xml配置文件中的id属性</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserDao:addUser()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">6. 开启注解扫描</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--开启组件扫描</span><br><span class="hljs-comment">    1. 如果扫描多个包，这多个包之间可以使用逗号隔开</span><br><span class="hljs-comment">    2. 扫描包上层目录</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wdzl&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5. 测试案例</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>        UserDao userDao = context.getBean(<span class="hljs-string">&quot;userDao&quot;</span>, UserDao.class);<br>        userDao.addUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-8-组件扫描常见用法"><a href="#5-8-组件扫描常见用法" class="headerlink" title="5.8 组件扫描常见用法"></a>5.8 组件扫描常见用法</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    use-default-filters=&quot;false&quot;：不使用默认过滤器</span><br><span class="hljs-comment">    context:include-filter:设置扫描哪些内容</span><br><span class="hljs-comment">    type=&quot;annotation&quot;：注解</span><br><span class="hljs-comment">    expression:具体哪些</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wdzl&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Repository&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">       使用默认过滤器</span><br><span class="hljs-comment">        context:exclude-filter:不扫描扫描哪些内容</span><br><span class="hljs-comment">        type=&quot;annotation&quot;：注解</span><br><span class="hljs-comment">        expression:具体内容</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wdzl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Repository&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-9-基于注解方式-属性注入"><a href="#5-9-基于注解方式-属性注入" class="headerlink" title="5.9 基于注解方式 - 属性注入"></a>5.9 基于注解方式 - 属性注入</h3><p><strong>常用注解：</strong></p><ol><li>@AutoWired ：根据属性类型进行自动装载</li><li>@Qualifier：根据属性名称进行注入</li><li>@Resource：可以根据类型注入，可以根据名称注入</li><li>@Value : 注入基本普通类型数据</li></ol><p><strong>演示：</strong></p><p><font color="red"><strong>1. @AutoWired</strong></font></p><p><font color="cornflowerblue">1.新建Module,修改pom.xml  </font></p><p><font color="cornflowerblue">2. 按照三层架构，创建目录结构：dao，service，web</font></p><p><font color="cornflowerblue">3. 在dao层中添加接口和对应实现类</font></p><p><strong>UserDao</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.dao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>UserDaoImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserDao：addUser()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4. 在service中添加接口和对应实现类，在对应实现类中注入UsesrDao</font></p><p><strong>UserService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>UserServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.service.impl;<br><br><span class="hljs-keyword">import</span> com.wdzl.dao.UserDao;<br><span class="hljs-keyword">import</span> com.wdzl.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        userDao.addUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5. 添加配置文件，添加组件扫描</font></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xmlns:context=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span><br><span class="hljs-string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="hljs-string">                           http://www.springframework.org/schema/context</span><br><span class="hljs-string">                           http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;<br>    &lt;context:component-scan base-<span class="hljs-keyword">package</span>=<span class="hljs-string">&quot;com.wdzl&quot;</span>/&gt;<br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">6. 测试类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    UserServiceImpl userServiceImpl = context.getBean(<span class="hljs-string">&quot;userServiceImpl&quot;</span>, UserServiceImpl.class);<br>    userServiceImpl.add();<br><br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">7. 结果</font></p><p><img src="/color-ful/img/spring5/image-20210303161453784.png" alt="image-20210303161453784"></p><p><font color="red"><strong>2.Qualifier</strong></font></p><p><font color="cornflowerblue">1. 首先需要明确： </font></p><ul><li>@Qualifier 必须与 @AutoWired同时使用</li><li>同时使用的目的是为了解决根据属性类型无法自动装载的情况，比如UserDao有多个实现类</li></ul><p><font color="cornflowerblue">2. 在UserDaoImpl中指定value值。</font></p><p><img src="/color-ful/img/spring5/image-20210303163349728.png"></p><p><font color="cornflowerblue">3. 在注入时，使用@Qualifier指定具体的类</font></p><p><img src="/color-ful/img/spring5/image-20210303163712488.png" alt="image-20210303163712488"></p><p><font color="cornflowerblue">4. 测试结果与上一次相同</font></p><p>但是，如果<code>@Qualifier </code>中的 <code>value</code> 与 <code>@Repository</code> 中的<code>value</code>值不对应，则会报错。</p><p><font color="red"><strong>@Resource</strong></font></p><p>该注解默认按照数据类型进行注入。</p><p>也可以通过<code>@Resource（name = &quot;userDao&quot;）</code>按照名称匹配，但是因为它不是Spring中的注解，所以官方建议开发中使用<code>@AutoWired</code>,<code>@Qualifier </code>, <code>@Repository</code></p><p><font color="red"><strong>@Value</strong></font></p><p>使用该注解可以给属性注入基本数据类型或者String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(value=&quot;刘德华&quot;)</span><br><span class="hljs-keyword">private</span> String info;<br></code></pre></td></tr></table></figure><h3 id="5-10-完全注解开发"><a href="#5-10-完全注解开发" class="headerlink" title="5.10 完全注解开发"></a>5.10 完全注解开发</h3><p>​        通过上面的讲解，基本上所有的配置都是通过注解实现的，只剩下扫描组件还定义在xml中，为了实现完全注解开发，我们可以将配置文件定义成一个类，我们称之为配置类，并为其加上相应的注解，就可以替代xml配置文件。在实际开发中完全注解开发这种模式会使用另一框架：SpringBoot，但它实际本质还是Spring，只不过它是针对Spring的一个简化升级版。</p><p><strong>演示：</strong>在5.9案例的基础上进行修改</p><p><font color="cornflowerblue">1. 创建配置类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><span class="hljs-comment">//配置类注解</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.wdzl&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringConfig</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 测试类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);<br>    UserServiceImpl userServiceImpl = context.getBean(<span class="hljs-string">&quot;userServiceImpl&quot;</span>, UserServiceImpl.class);<br>    userServiceImpl.add();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-AOP"><a href="#6-AOP" class="headerlink" title="6. AOP"></a>6. AOP</h2><p><strong>概述：</strong>面向切面编程 -  在不修改源代码的前提下，实现对程序功能进行维护</p><p><strong>举例：</strong>XBOX</p><h3 id="6-1-AOP底层原理"><a href="#6-1-AOP底层原理" class="headerlink" title="6.1 AOP底层原理"></a>6.1 AOP底层原理</h3><p><strong>概述：</strong>AOP底层的实现使用了<font color="red">动态代理</font>技术</p><p><strong>分类：</strong>两种情况的动态代理</p><ol><li> 有接口的情况，使用JDK动态代理</li></ol><ul><li>代理对象与被代理对象都实现相同的接口</li></ul><ol start="2"><li>没有接口的情况，使用CGLIB动态代理<ul><li>通过创建子类对象，在子类中重写方法，并通过super.方法名() 调用被代理类中的方法</li></ul></li></ol><h3 id="6-2-AOP-动态代理演示（待定）"><a href="#6-2-AOP-动态代理演示（待定）" class="headerlink" title="6.2 AOP 动态代理演示（待定）"></a>6.2 AOP 动态代理演示（待定）</h3><h3 id="6-3-AOP-相关术语"><a href="#6-3-AOP-相关术语" class="headerlink" title="6.3 AOP 相关术语"></a>6.3 AOP 相关术语</h3><ul><li>连接点（Joinpoint）：类里面哪些方法可以被增强，这些方法称为连接点。</li><li>切入点（Pointcut）：类中实际被真正增强的方法，称为切入点。</li><li>增强/通知（Advice）：被增强的方法中<font color="red">增强的部分的代码</font>称为通知或者增强<ul><li>前置增强：在调用被增强方法前执行。</li><li>后置增强：在调用被增强方法后执行。</li><li>环绕增强：在调用被增强方法前后都执行。</li><li>异常增强：在调用被增强方法出现异常时执行</li><li>最终增强：在调用被增强方法后，无论是否出现异常，都会被执行</li></ul></li><li>切面（Aspect）：切面本身是一个动作，是将通知应用到切入点的过程。</li><li>代理（Proxy）</li><li>目标对象（Target）</li><li>织入（Weaving）</li></ul><h3 id="6-4-ASpectJ"><a href="#6-4-ASpectJ" class="headerlink" title="6.4 ASpectJ"></a>6.4 ASpectJ</h3><p><strong>概述：</strong></p><p>​    AspectJ 是一个独立的AOP框架，一般开发中会将AspectJ 和 Spring 框架一起使用，进行AOP操作</p><p><strong>实现AOP的两种方式：</strong></p><ol><li><p>基于XML配置文件实现</p><ol start="2"><li><font color="red">基于注解方式实现</font></li></ol></li></ol><p><strong>相关依赖：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Spring--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-expression<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Spring日志依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--aspectJ依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>aopalliance<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aopalliance<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>切入点表达式：</strong></p><ul><li><p>概述：切入点表达式的作用：让Spring框架知道哪个类里面的哪个方法需要增强。</p></li><li><p>语法结构</p><ul><li>execution( [ 权限修饰符 ] [返回值类型] [ 全限定类名 ] ( [ 参数列表 ] ))<ul><li>权限修饰符可以省略</li><li>返回值为 <code>*</code> 代表任意返回值类型</li></ul></li></ul></li><li><p>举例</p><ol><li><p>对com.wdzl.dao.UserDao 类中的addUsesr()方法进行增强</p><p>execution( * com.wdzl.dao.UserDao.addUser(..))</p></li></ol></li></ul><p><strong>案例：</strong></p><p><font color="cornflowerblue">1.新建Moduled,在pom.xml中添加相应的依赖</font></p><p><font color="cornflowerblue">2.按照三层架构模型创建包结构： dao,service,web</font></p><p><font color="cornflowerblue">3.在dao层新建接口和相应的实现类</font></p><p><strong>UserDao</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>UserDaoImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中addUser()是我们要增强的方法</p><p><font color="cornflowerblue">4. 在配置文件中开启注解扫描</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/aop</span></span><br><span class="hljs-tag"><span class="hljs-string">                           http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--开启注解扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wdzl&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--开启Aspectj,生成代理对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">5.在需要创建对象的类上添加注解</font></p><p><img src="/color-ful/img/spring5/image-20210304142340599.png" alt="image-20210304142340599"></p><p><img src="/color-ful/img/spring5/image-20210304142423520.png" alt="image-20210304142423520"></p><p><font color="cornflowerblue">6. 在增强类上加入注解@Aspect</font></p><p><img src="/color-ful/img/spring5/image-20210304144357022.png" alt="image-20210304144357022"></p><p><font color="cornflowerblue">7. 配置不同类型的通知</font></p><p>在增强类的中，在作为增强方法声明上面添加通知类型的注解，并结合切入点表达式来配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * UserDao增强类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span>  <span class="hljs-comment">//将该类生成代理对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoProxy</span> </span>&#123;<br>    <span class="hljs-comment">//前置增强</span><br>    <span class="hljs-meta">@Before(value=&quot;execution(* com.wdzl.dao.impl.UserDaoImpl.addUser(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;before...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//后置增强</span><br>    <span class="hljs-meta">@After(value=&quot;execution(* com.wdzl.dao.impl.UserDaoImpl.addUser(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;after...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//返回增强</span><br>    <span class="hljs-meta">@AfterReturning(value=&quot;execution(* com.wdzl.dao.impl.UserDaoImpl.addUser(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturning</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;afterReturning...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//异常增强</span><br>    <span class="hljs-meta">@AfterThrowing(value=&quot;execution(* com.wdzl.dao.impl.UserDaoImpl.addUser(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterThrowing</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;AfterThrowing...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//环绕增强</span><br>    <span class="hljs-meta">@Around(value=&quot;execution(* com.wdzl.dao.impl.UserDaoImpl.addUser(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕之前...&quot;</span>);<br>        joinPoint.proceed();<br>        System.out.println(<span class="hljs-string">&quot;环绕之后...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">结果：</font></p><p><img src="/color-ful/img/spring5/image-20210304220845222.png" alt="image-20210304220845222"></p><h2 id="7-JDBCTemplate"><a href="#7-JDBCTemplate" class="headerlink" title="7. JDBCTemplate"></a>7. JDBCTemplate</h2><p><strong>概述：</strong>对JDBC进行了封装，使用JDBCTemplate可以方便的去操作数据库。</p><p><strong>需要的依赖：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Druid连接池 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--连接驱动--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--JDBC操作--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--事务--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--映射：整合ORM框架使用--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-orm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7-1-添加功能"><a href="#7-1-添加功能" class="headerlink" title="7.1 添加功能"></a>7.1 添加功能</h4><p><font color="cornflowerblue">1. 配置文件中配置连接池</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--数据库连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///mybatis?useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 配置JdbcTemplate对象，并注入DataSource</font></p><p><img src="/color-ful/img/spring5/image-20210318175112187.png" alt="image-20210318175112187"></p><p><font color="cornflowerblue">3. 创建Dao层，在Dao层实现类中注入jdbcTemplate,创建Service层，在Service层中注入Dao层</font></p><p><strong>Dao层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"> * 学生持久层接口<br> * <span class="hljs-meta">@author</span> lp<br> * <span class="hljs-meta">@version</span> <span class="hljs-number">1.0</span><br> */<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentDao</span> </span>&#123;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加学生</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addStudent</span><span class="hljs-params">(Student student)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Dao层实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学生持久层实现类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">StudentDao</span> </span>&#123;<br>    <span class="hljs-comment">//注入JDBCTemplate</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addStudent</span><span class="hljs-params">(Student student)</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;insert into student(id,username,gender,birthday,address) values(?,?,?,?,?)&quot;</span>;<br>        <span class="hljs-keyword">int</span> update = jdbcTemplate.update(sql, student.getId(), student.getUsername(), student.getGender(), student.getBirthday(), student.getAddress());<br>        System.out.println(update);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Service层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学生业务层接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentService</span> </span>&#123;<br>    <br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加学生</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addStudent</span><span class="hljs-params">(Student student)</span></span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Service层实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学生业务层接口实现类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentServiceImpl</span> </span>&#123;<br>    <span class="hljs-comment">//注入Dao</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StudentDao studentDao;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addStudent</span><span class="hljs-params">(Student student)</span> </span>&#123;<br>        studentDao.addStudent(student);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4. 开启组件扫描</font></p><p><img src="/color-ful/img/spring5/image-20210319144038704.png" alt="image-20210319144038704"></p><p><font color="cornflowerblue">5. 测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAddStudent</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1.读取配置文件</span><br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    <span class="hljs-comment">//2.创建服务层对象</span><br>    StudentService studentServiceImpl = context.getBean(<span class="hljs-string">&quot;studentServiceImpl&quot;</span>, StudentService.class);<br>    Student student = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;刘德华&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;2020-02-03&quot;</span>, <span class="hljs-string">&quot;香港&quot;</span>);<br>    studentServiceImpl.addStudent(student);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-2-修改和删除功能"><a href="#7-2-修改和删除功能" class="headerlink" title="7.2 修改和删除功能"></a>7.2 修改和删除功能</h4><p>修改功能和添加功能比较类似，所以我们快速的将修改和删除功能来讲解一下</p><p><font color="cornflowerblue">1. dao层和实现层添加相应方法</font></p><p><strong>Dao层:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 修改</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateStudent</span><span class="hljs-params">(Student student)</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据id删除用户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteStudent</span><span class="hljs-params">(String id)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Dao层实现层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateStudent</span><span class="hljs-params">(Student student)</span> </span>&#123;<br>       String sql = <span class="hljs-string">&quot;update student set username=? where id=?&quot;</span>;<br>       Object[] args = &#123;student.getUsername(), student.getId()&#125;;<br>       <span class="hljs-keyword">int</span> update = jdbcTemplate.update(sql, args);<br>       System.out.println(update);<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteStudent</span><span class="hljs-params">(String id)</span> </span>&#123;<br>       String sql = <span class="hljs-string">&quot;delete from student where id=?&quot;</span>;<br>       <span class="hljs-keyword">int</span> update = jdbcTemplate.update(sql, id);<br>       System.out.println(update);<br>   &#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. service层和实现层</font></p><p><strong>Service层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改学生</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateStudent</span><span class="hljs-params">(Student student)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除学生</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteStudent</span><span class="hljs-params">(String id)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Service实现层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateStudent</span><span class="hljs-params">(Student student)</span> </span>&#123;<br>    studentDao.updateStudent(student);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteStudent</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    studentDao.deleteStudent(id);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.测试：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdateStudent</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-comment">//1.读取配置文件</span><br>      ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>      <span class="hljs-comment">//2.创建服务层对象</span><br>      StudentService studentServiceImpl = context.getBean(<span class="hljs-string">&quot;studentServiceImpl&quot;</span>, StudentService.class);<br>      Student student = <span class="hljs-keyword">new</span> Student();<br>      student.setId(<span class="hljs-number">1</span>);<br>      student.setUsername(<span class="hljs-string">&quot;aaa&quot;</span>);<br>      studentServiceImpl.updateStudent(student);<br><br>  &#125;<br><br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteStudent</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-comment">//1.读取配置文件</span><br>      ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>      <span class="hljs-comment">//2.创建服务层对象</span><br>      StudentService studentServiceImpl = context.getBean(<span class="hljs-string">&quot;studentServiceImpl&quot;</span>, StudentService.class);<br>      studentServiceImpl.deleteStudent(<span class="hljs-string">&quot;6&quot;</span>);<br><br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="7-3-查询功能"><a href="#7-3-查询功能" class="headerlink" title="7.3 查询功能"></a>7.3 查询功能</h4><p><strong>需求1：查询结果返回某个值</strong></p><p><font color="cornflowerblue">1.dao层和实现层中添加对应的方法 </font></p><p><strong>Dao层:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询学生的总人数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findStudentTotal</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Dao层实现层:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findStudentTotal</span><span class="hljs-params">()</span> </span>&#123;<br>    String sql = <span class="hljs-string">&quot;select count(id) from student&quot;</span>;<br>    Integer result = jdbcTemplate.queryForObject(sql, Integer.class);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.service层和实现层添加相应的方法</font></p><p><strong>Service层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询学生总数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findStudentTotal</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Service实现层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findStudentTotal</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> studentDao.findStudentTotal();<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindStudentTotal</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">//1.读取配置文件</span><br>       ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>       <span class="hljs-comment">//2.创建服务层对象</span><br>       StudentService studentServiceImpl = context.getBean(<span class="hljs-string">&quot;studentServiceImpl&quot;</span>, StudentService.class);<br>       <span class="hljs-keyword">int</span> studentTotal = studentServiceImpl.findStudentTotal();<br>       System.out.println(<span class="hljs-string">&quot;学生总数：&quot;</span>+studentTotal);<br>   &#125;<br></code></pre></td></tr></table></figure><p><strong>需求2：查询结果返回对象</strong></p><p><font color="cornflowerblue">1.dao层和实现层中添加对应的方法 </font></p><p><strong>Dao层:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据id查询学生详细信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">findStudentById</span><span class="hljs-params">(String id)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Dao层实现层:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">findStudentById</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    String sql = <span class="hljs-string">&quot;select * from student where id=?&quot;</span>;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        queryForObject（）方法的三个参数</span><br><span class="hljs-comment">        1. sql语句</span><br><span class="hljs-comment">        2. RowMapper接口：完成属性和字段的映射，常用实现类-BeanPropertyRowMapper</span><br><span class="hljs-comment">        3.sql语句的占位符</span><br><span class="hljs-comment">     */</span><br>    Student student = jdbcTemplate.queryForObject(sql, <span class="hljs-keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Student.class), id);<br>    <span class="hljs-keyword">return</span> student;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.service层和实现层添加相应的方法</font></p><p><strong>Service层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据id查询学生信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">Student <span class="hljs-title">findStudentById</span><span class="hljs-params">(String id)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Service实现层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">findStudentById</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> studentDao.findStudentById(id);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindStudentById</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1.读取配置文件</span><br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    <span class="hljs-comment">//2.创建服务层对象</span><br>    StudentService studentServiceImpl = context.getBean(<span class="hljs-string">&quot;studentServiceImpl&quot;</span>, StudentService.class);<br>    Student student = studentServiceImpl.findStudentById(<span class="hljs-string">&quot;2&quot;</span>);<br>    System.out.println(student);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>需求3：查询结果返回集合</strong></p><p><font color="cornflowerblue">1.dao层和实现层中添加对应的方法 </font></p><p><strong>Dao层:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 查询所有学生信息</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Dao层实现层:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;<br>    String sql = <span class="hljs-string">&quot;select * from student&quot;</span>;<br>    List&lt;Student&gt; students = jdbcTemplate.query(sql, <span class="hljs-keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Student.class));<br>    <span class="hljs-keyword">return</span> students;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.service层和实现层添加相应的方法</font></p><p><strong>Service层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询学生列表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Service实现层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> studentDao.findAll();<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindStudentById</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1.读取配置文件</span><br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    <span class="hljs-comment">//2.创建服务层对象</span><br>    StudentService studentServiceImpl = context.getBean(<span class="hljs-string">&quot;studentServiceImpl&quot;</span>, StudentService.class);<br>    Student student = studentServiceImpl.findStudentById(<span class="hljs-string">&quot;2&quot;</span>);<br>    System.out.println(student);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-4-批量添加"><a href="#7-4-批量添加" class="headerlink" title="7.4 批量添加"></a>7.4 批量添加</h4><p><font color="cornflowerblue">1.dao层和实现层中添加对应的方法 </font></p><p><strong>Dao层:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 批量添加</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">batchAdd</span><span class="hljs-params">(List&lt;Object[]&gt; students)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Dao层实现层:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">batchAdd</span><span class="hljs-params">(List&lt;Object[]&gt; students)</span> </span>&#123;<br>    String sql = <span class="hljs-string">&quot;insert into student(username,gender,birthday,address) values(?,?,?,?)&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量添加：</span><br><span class="hljs-comment">     * 参数1：sql语句</span><br><span class="hljs-comment">     * 参数2：集合中的元素是Object[]数组，每一个数组存储了与占位符对应的数据。</span><br><span class="hljs-comment">     * 原理：每执行一次sql，jdbcTemplate会从集合中取出一个数组元素，将数组中的数据取出</span><br><span class="hljs-comment">     *      替换sql中的占位符。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">int</span>[] ints = jdbcTemplate.batchUpdate(sql, students);<br>    System.out.println(Arrays.toString(ints));<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.service层和实现层添加相应的方法</font></p><p><strong>Service层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 批量添加学生信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">batchAdd</span><span class="hljs-params">(List&lt;Object[]&gt; students)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Service实现层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">batchAdd</span><span class="hljs-params">(List&lt;Object[]&gt; students)</span> </span>&#123;<br>    studentDao.batchAdd(students);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBatchAdd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1.读取配置文件</span><br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    <span class="hljs-comment">//2.创建服务层对象</span><br>    StudentService studentServiceImpl = context.getBean(<span class="hljs-string">&quot;studentServiceImpl&quot;</span>, StudentService.class);<br>    List&lt;Object[]&gt; args = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    Object[] o1 = &#123;<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;2020-2-2&quot;</span>,<span class="hljs-string">&quot;北京&quot;</span>&#125;;<br>    Object[] o2 = &#123;<span class="hljs-string">&quot;bbb&quot;</span>,<span class="hljs-string">&quot;女&quot;</span>,<span class="hljs-string">&quot;2020-2-2&quot;</span>,<span class="hljs-string">&quot;北京&quot;</span>&#125;;<br>    Object[] o3 = &#123;<span class="hljs-string">&quot;ccc&quot;</span>,<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;2020-2-2&quot;</span>,<span class="hljs-string">&quot;北京&quot;</span>&#125;;<br>    Object[] o4 = &#123;<span class="hljs-string">&quot;ddd&quot;</span>,<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;2020-2-2&quot;</span>,<span class="hljs-string">&quot;北京&quot;</span>&#125;;<br>    args.add(o1);<br>    args.add(o2);<br>    args.add(o3);<br>    args.add(o4);<br>    studentServiceImpl.batchAdd(args);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-5-批量修改"><a href="#7-5-批量修改" class="headerlink" title="7.5 批量修改"></a>7.5 批量修改</h4><p>批量修改与批量添加原理相同，作为课堂练习，先让学生自行练习。</p><p><font color="cornflowerblue">1.dao层和实现层中添加对应的方法 </font></p><p><strong>Dao层:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 批量修改</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bathUpdate</span><span class="hljs-params">(List&lt;Object[]&gt; students)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Dao层实现层:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">   <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据id批量修改学生信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> students</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bathUpdate</span><span class="hljs-params">(List&lt;Object[]&gt; students)</span> </span>&#123;<br>    String sql = <span class="hljs-string">&quot;update student set address=? where id=?&quot;</span>;<br>    <span class="hljs-keyword">int</span>[] ints = jdbcTemplate.batchUpdate(sql, students);<br>    System.out.println(Arrays.toString(ints));<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.service层和实现层添加相应的方法</font></p><p><strong>Service层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 批量修改学生信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">batchUpdate</span><span class="hljs-params">(List&lt;Object[]&gt; students)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Service实现层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">batchUpdate</span><span class="hljs-params">(List&lt;Object[]&gt; students)</span> </span>&#123;<br>    studentDao.bathUpdate(students);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBatchUpdate</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1.读取配置文件</span><br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>    <span class="hljs-comment">//2.创建服务层对象</span><br>    StudentService studentServiceImpl = context.getBean(<span class="hljs-string">&quot;studentServiceImpl&quot;</span>, StudentService.class);<br>    List&lt;Object[]&gt; args = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    Object[] o1 = &#123;<span class="hljs-string">&quot;中国&quot;</span>,<span class="hljs-number">1</span>&#125;;<br>    Object[] o2 = &#123;<span class="hljs-string">&quot;中国&quot;</span>,<span class="hljs-number">2</span>&#125;;<br>    Object[] o3 = &#123;<span class="hljs-string">&quot;中国&quot;</span>,<span class="hljs-number">3</span>&#125;;<br>    Object[] o4 = &#123;<span class="hljs-string">&quot;中国&quot;</span>,<span class="hljs-number">4</span>&#125;;<br><br>    args.add(o1);<br>    args.add(o2);<br>    args.add(o3);<br>    args.add(o4);<br>    studentServiceImpl.batchUpdate(args);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-事务"><a href="#8-事务" class="headerlink" title="8. 事务"></a>8. 事务</h2><p>概念在这里就不赘述了，忘记的同学可以去查看MySQL笔记中有关事务的相关概念</p><h3 id="8-1-事务环境搭建"><a href="#8-1-事务环境搭建" class="headerlink" title="8.1 事务环境搭建"></a>8.1 事务环境搭建</h3><p><font color="cornflowerblue">1. 新建Module,在pom中添加相应依赖，与JdbcTemplate相同</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Spring--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-expression<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Spring日志依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Druid连接池 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--连接驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--JDBC操作--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--事务--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--映射：整合ORM框架使用--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-orm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--aspectJ依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>aopalliance<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aopalliance<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.创建配置文件，开启注解扫描，配置数据源，和JdbcTemplate</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--组件扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wdzl&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--数据库连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///test?useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--JDBCTemplate--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">3. 创建Dao层及实现层</font></p><p><strong>Dao层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AccountDao</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转出操作</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">moneyOut</span><span class="hljs-params">(String name,<span class="hljs-keyword">double</span> money)</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转入操作</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">moneyIn</span><span class="hljs-params">(String name,<span class="hljs-keyword">double</span> money)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Dao层实现层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.dao.impl;<br><br><span class="hljs-keyword">import</span> com.wdzl.dao.AccountDao;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AccountDao</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">moneyOut</span><span class="hljs-params">(String name,<span class="hljs-keyword">double</span> money)</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;update zhuanzhang set money=money-? where name=?&quot;</span>;<br>        <span class="hljs-keyword">int</span> update = jdbcTemplate.update(sql, money, name);<br>        System.out.println(update);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">moneyIn</span><span class="hljs-params">(String name,<span class="hljs-keyword">double</span> money)</span> </span>&#123;<br>        String sql = <span class="hljs-string">&quot;update zhuanzhang set money=money+? where name=?&quot;</span>;<br>        <span class="hljs-keyword">int</span> update = jdbcTemplate.update(sql, money, name);<br>        System.out.println(update);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Service层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AccountService</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转账操作</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transferAccounts</span><span class="hljs-params">(String outName,String inName,<span class="hljs-keyword">double</span> money)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Service层实现层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AccountService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountDao accountDao;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transferAccounts</span><span class="hljs-params">(String outName, String inName, <span class="hljs-keyword">double</span> money)</span> </span>&#123;<br>        <span class="hljs-comment">//转出</span><br>        accountDao.moneyOut(outName, money);<br>        <span class="hljs-comment">//转入</span><br>        accountDao.moneyIn(inName,money);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4. 测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        String outName = <span class="hljs-string">&quot;张三&quot;</span>;<br>        String inName = <span class="hljs-string">&quot;李四&quot;</span>;<br>        <span class="hljs-keyword">double</span> money = <span class="hljs-number">500.00</span>;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>        AccountService accountServiceImpl = context.getBean(<span class="hljs-string">&quot;accountServiceImpl&quot;</span>, AccountService.class);<br>        accountServiceImpl.transferAccounts(outName,inName,money);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-2-事务操作"><a href="#8-2-事务操作" class="headerlink" title="8.2 事务操作"></a>8.2 事务操作</h3><ol><li>事务添加到JavaEE 三层架构里的Service层。<ul><li>因为Service负责组装业务</li></ul></li><li>在Spring进行事务管理<ul><li>编程式事务</li><li><strong><font color="red">声明式事务</font></strong></li></ul></li><li>声明式事务管理<ul><li><strong><font color="red">基于注解方式</font></strong></li><li>基于XML方式</li></ul></li><li>在Spring进行声明式事务管理，底层使用了AOP原理</li><li>Spring针对不同的框架提供了不同的API<ul><li>针对JDBC，MyBatis : DataSourceTransactionManager</li><li>针对Hibernate：HibernateTransactionManager</li></ul></li></ol><p><img src="/color-ful/img/spring5/image-20210326102617171.png" alt="image-20210326102617171"></p><h3 id="8-3-基于注解方式-声明式事务"><a href="#8-3-基于注解方式-声明式事务" class="headerlink" title="8.3 基于注解方式-声明式事务"></a>8.3 基于注解方式-声明式事务</h3><p><font color="cornflowerblue">1. 在配置文件中配置事务管理器</font></p><p><img src="/color-ful/img/spring5/image-20210326111913889.png" alt="image-20210326111913889"></p><p><font color="cornflowerblue">2. 在配置文件中添加相应命名空间</font></p><p><img src="/color-ful/img/spring5/image-20210326112803896.png" alt="image-20210326112803896"></p><p><font color="cornflowerblue">3. 开启事务注解</font></p><p><img src="/color-ful/img/spring5/image-20210326113226955.png" alt="image-20210326113226955"></p><p><font color="cornflowerblue">4.在service类上添加事务注解</font></p><p><img src="/color-ful/img/spring5/image-20210326114154687.png" alt="image-20210326114154687"></p><p><strong>@Transactional 注解可以加到类上面，也可以加在方法上：</strong></p><ul><li>注解添加在类上面，则给类中所有的方法添加事务</li><li>注解添加方法上面，则给这个方法添加事务</li></ul><p><font color="cornflowerblue">5.测试即可，此时事务已经开启。</font></p><h4 id="8-3-1-Transactional-常见配置"><a href="#8-3-1-Transactional-常见配置" class="headerlink" title="8.3.1 @Transactional 常见配置"></a>8.3.1 @Transactional 常见配置</h4><p>先来看一下常见配置（通过该注解的源码查看）</p><ul><li>propagation ：事务传播行为</li><li>isolation: 事务隔离级别</li><li>timeout:超时时间</li><li>readOnly:是否只读</li><li>rollbackFor:回滚</li><li>noRollbackFor：不回滚</li></ul><ol><li><strong>propagation ：事务传播行为</strong></li></ol><p>什么叫<strong>事务传播行为</strong>？<br>即然是传播，那么至少有两个东西，才可以发生传播。单体不存在传播这个行为。</p><p>事务传播行为（propagation behavior）指的就是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行。<br>例如：methodA事务方法调用methodB事务方法时，methodB是继续在调用者methodA的事务中运行呢，还是为自己开启一个新事务运行，这就是由methodB的事务传播行为决定的。</p><table><thead><tr><th>事务传播行为类型</th><th>说明</th></tr></thead><tbody><tr><td><strong>PROPAGATION_REQUIRED</strong></td><td>如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>支持当前事务，如果当前没有事务，就以非事务方式执行。</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>使用当前的事务，如果当前没有事务，就抛出异常。</td></tr><tr><td><strong>PROPAGATION_REQUIRES_NEW</strong></td><td>新建事务，如果当前存在事务，把当前事务挂起。</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td></tr><tr><td>PROPAGATION_NEVER</td><td>以非事务方式执行，如果当前存在事务，则抛出异常。</td></tr><tr><td>PROPAGATION_NESTED</td><td>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</td></tr></tbody></table><ul><li><strong>PROPAGATION_REQUIRED</strong></li></ul><p><img src="/color-ful/img/spring5/image-20210326152601124.png" alt="image-20210326152601124"></p><ul><li><strong>PROPAGATION_REQUIRES_NEW</strong></li></ul><p><img src="/color-ful/img/spring5/image-20210326153159052.png" alt="image-20210326153159052"></p><ol start="2"><li><p><strong>隔离级别</strong>（MySQL笔记中有）</p><p>不考虑事务隔离级别会产生3个问题</p><ul><li>脏读</li><li>不可重复度</li><li>虚读</li></ul></li></ol><blockquote><p>​    <strong>概述：</strong></p><p>​        多个事务之间是相互隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题</p><p>​    <strong>存在问题：</strong></p><ol><li><p>脏读：一个事务，读取到另一个数据没有提交的数据</p></li><li><p>不可重复度（虚读）：在同一个事务中，两次读取到的数据不一致</p></li><li><p>幻读：一个事务1操作（DML）数据表中的所有数据，另一个事务2此时插入数据，事务1查询数据发现与自己修改的数据不一致，就好像产生了幻觉一样。</p></li></ol><p>​    <strong>隔离级别：</strong></p><pre><code>     1. read uncommitted： 读未提交  - 问题：脏读，不可重复读，幻读     2. read committed：读已提交（Oracle 默认）  - 问题：不可重复读，幻读     3. repeatable read: 可重复读（MySQL默认）  - 问题：幻读     4. serializable: 串行化  - 可以解决所有问题</code></pre></blockquote><p><img src="/color-ful/img/spring5/image-20210326220333725.png" alt="image-20210326220333725"></p><h3 id="8-4-基于XML方式-声明式事务"><a href="#8-4-基于XML方式-声明式事务" class="headerlink" title="8.4 基于XML方式-声明式事务"></a>8.4 基于XML方式-声明式事务</h3><p>在上一个项目的基础上新建一个<code>bean2.xml</code>。在该配置文件中配置声明式事务</p><p><font color="cornflowerblue">1. 在配置文件中创建事务管理器</font></p><p><font color="cornflowerblue">2. 配置通知</font></p><p><font color="cornflowerblue">3. 配置切入点和切面</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">                          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--组件扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wdzl&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--数据库连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///test?useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--JDBCTemplate--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--1. 创建事务管理器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--注入数据源--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--2. 配置通知--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--配置事务参数--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--指定哪些方法上添加事务及事务的属性--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;transferAccounts&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--直接指定方法名--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;tx:method name=&quot;*Accounts&quot;/&gt;&amp;lt;!&amp;ndash;以Accounts结尾&amp;ndash;&amp;gt;--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--3.配置切入点和切面 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--配置切入点--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pt&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.wdzl.service.impl.AccountServiceImpl.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--配置切面--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pt&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:advisor</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">4. 测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>    String outName = <span class="hljs-string">&quot;张三&quot;</span>;<br>    String inName = <span class="hljs-string">&quot;李四&quot;</span>;<br>    <span class="hljs-keyword">double</span> money = <span class="hljs-number">500.00</span>;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean2.xml&quot;</span>);<br>    AccountService accountServiceImpl = context.getBean(<span class="hljs-string">&quot;accountServiceImpl&quot;</span>, AccountService.class);<br>    accountServiceImpl.transferAccounts(outName,inName,money);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-5-完全注解进行声明式事务管理"><a href="#8-5-完全注解进行声明式事务管理" class="headerlink" title="8.5 完全注解进行声明式事务管理"></a>8.5 完全注解进行声明式事务管理</h3><p>继续使用上一个项目</p><p><font color="cornflowerblue">1.结合着注解方式的配置文件，我们对照着写注解配置类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wdzl.config;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 注解配置类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@ComponentScan(basePackages = &quot;com.wdzl&quot;)</span><span class="hljs-comment">//组件扫描</span><br><span class="hljs-meta">@EnableTransactionManagement</span><span class="hljs-comment">//开启事务</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TxConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">//配置数据源</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title">getDruidDataSource</span><span class="hljs-params">()</span> </span>&#123;<br>        DruidDataSource dataSource = <span class="hljs-keyword">new</span> DruidDataSource();<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql:///test?useUnicode=true&amp;characterEncoding=utf8&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;root&quot;</span>);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br><br>    <span class="hljs-comment">//配置JdbcTemplate</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title">getJdbcTemplate</span><span class="hljs-params">(DataSource dataSource)</span> </span>&#123;<br>        JdbcTemplate jdbcTemplate = <span class="hljs-keyword">new</span> JdbcTemplate();<br>        <span class="hljs-comment">//注入DataSource完全可以使用set方式，但是此时我们的容器中已经有了DataSource对象，所以我们可以直接拿来使用，</span><br>        jdbcTemplate.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> jdbcTemplate;<br>    &#125;<br><br>    <span class="hljs-comment">//配置事务管理器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSourceTransactionManager <span class="hljs-title">getDataSourceTransactionManager</span><span class="hljs-params">(DataSource dataSource)</span> </span>&#123;<br>        DataSourceTransactionManager dataSourceTransactionManager = <span class="hljs-keyword">new</span> DataSourceTransactionManager();<br>        dataSourceTransactionManager.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> dataSourceTransactionManager;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 在AccountServiceImpl上加上开启事务的注解</font></p><p><img src="/color-ful/img/spring5/image-20210326233755103.png" alt="image-20210326233755103"></p><p><font color="cornflowerblue">3.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br>    String outName = <span class="hljs-string">&quot;张三&quot;</span>;<br>    String inName = <span class="hljs-string">&quot;李四&quot;</span>;<br>    <span class="hljs-keyword">double</span> money = <span class="hljs-number">500.00</span>;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(TxConfig.class);<br>    AccountService accountServiceImpl = context.getBean(<span class="hljs-string">&quot;accountServiceImpl&quot;</span>, AccountService.class);<br>    accountServiceImpl.transferAccounts(outName,inName,money);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-Spring5-新特性"><a href="#9-Spring5-新特性" class="headerlink" title="9. Spring5 新特性"></a>9. Spring5 新特性</h2><h3 id="9-1-整合日志框架-Log4J2"><a href="#9-1-整合日志框架-Log4J2" class="headerlink" title="9.1 整合日志框架-Log4J2"></a>9.1 整合日志框架-Log4J2</h3><p>在事务的项目上添加依赖</p><p><font color="cornflowerblue">1. 添加依赖</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--log4j--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.14.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.14.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.14.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.将配置文件拷贝到resources目录下，直接执行事务的测试查看日志的变化</font></p><p><img src="/color-ful/img/spring5/image-20210327003146419.png" alt="image-20210327003146419"></p><p><font color="cornflowerblue">3. 修改log4j2.xml</font></p><p><img src="/color-ful/img/spring5/image-20210327003524698.png" alt="image-20210327003524698"></p><p><font color="cornflowerblue">4. 再次执行测试</font></p><p><img src="/color-ful/img/spring5/image-20210327003602129.png" alt="image-20210327003602129"></p><p><font color="cornflowerblue">5.也可以自定义日志输出</font></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">test3</span>(<span class="hljs-params"></span>)</span> &#123;<br>    Logger logger = LoggerFactory.getLogger(AccountTest.class);<br>    logger.info(<span class="hljs-string">&quot;Hello INFO&quot;</span>);<br>    logger.warn(<span class="hljs-string">&quot;Hello WARN&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果</strong></p><p><img src="/color-ful/img/spring5/image-20210327003948127.png" alt="image-20210327003948127"></p><h3 id="9-2-核心容器支持-Nullable注解"><a href="#9-2-核心容器支持-Nullable注解" class="headerlink" title="9.2 核心容器支持@Nullable注解"></a>9.2 核心容器支持@Nullable注解</h3><p><strong>概述：</strong></p><p>​    注解可以使用在方法，属性，参数上。</p><ul><li><p>方法：返回值可以为空</p><ul><li><p>ApplicationContext接口中：</p><p><img src="/color-ful/img/spring5/image-20210327004448089.png" alt="image-20210327004448089"></p></li></ul></li><li><p>属性：属性值可以为空</p><ul><li><p>AnnotationConfigApplicationContext中：</p><p><img src="/color-ful/img/spring5/image-20210327004720064.png" alt="image-20210327004720064"></p></li></ul></li><li><p>参数：参数值可以为空</p><ul><li><p>自己写一个</p><p><img src="/color-ful/img/spring5/image-20210327004833171.png" alt="image-20210327004833171"></p></li></ul></li></ul><h3 id="9-3-核心容器支持Lambda表达式-函数式风格创建对象"><a href="#9-3-核心容器支持Lambda表达式-函数式风格创建对象" class="headerlink" title="9.3 核心容器支持Lambda表达式-函数式风格创建对象"></a>9.3 核心容器支持Lambda表达式-函数式风格创建对象</h3><p>使用事务的项目</p><p><font color="cornflowerblue">1. 创建一个User类，什么都不用写</font></p><p><font color="cornflowerblue">2. 通过Lamda表达式创建对象</font></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">   @Test<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> test4() &#123;<br>        //<span class="hljs-number">1.</span> 创建GenericApplicationContext对象<br>        GenericApplicationContext context = <span class="hljs-built_in">new</span> GenericApplicationContext();<br>        //<span class="hljs-number">2.</span>注册对象<br>        context.<span class="hljs-keyword">refresh</span>();<br>        //普通写法<br>        context.registerBean(&quot;user&quot;, <span class="hljs-keyword">User</span>.<span class="hljs-keyword">class</span>, <span class="hljs-built_in">new</span> Supplier&lt;<span class="hljs-keyword">User</span>&gt;() &#123;<br>            @Override<br>            <span class="hljs-built_in">public</span> <span class="hljs-keyword">User</span> <span class="hljs-keyword">get</span>() &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();<br>            &#125;<br>        &#125;);<br>        //lambdab表达式<br>//        context.registerBean(&quot;user&quot;,<span class="hljs-keyword">User</span>.<span class="hljs-keyword">class</span>,()-&gt;<span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>());<br>        <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = (<span class="hljs-keyword">User</span>) context.getBean(&quot;user&quot;);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="9-4-整合JUnit测试框架"><a href="#9-4-整合JUnit测试框架" class="headerlink" title="9.4 整合JUnit测试框架"></a>9.4 整合JUnit测试框架</h3><p>还是在事务的项目中</p><p><font color="red"><strong>整合JUnit4</strong></font></p><p><font color="cornflowerblue">1. 添加依赖</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Junit4--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2. 编写测试类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><span class="hljs-comment">//指定单元测试框架</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:bean.xml&quot;)</span><span class="hljs-comment">//加载配置文件</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Junit4TestDemo</span> </span>&#123;<br><br>    <span class="hljs-comment">//注入Service层</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountService accountService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        String outName = <span class="hljs-string">&quot;张三&quot;</span>;<br>        String inName = <span class="hljs-string">&quot;李四&quot;</span>;<br>        <span class="hljs-keyword">double</span> money = <span class="hljs-number">500.00</span>;<br>        accountService.transferAccounts(outName,inName,money);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="red">注意：注解配置文件会和xml配置文件冲突，所以我们先将配置文件内容全部注释之后再进行测试</font></p><p><font color="red"><strong>整合JUnit5</strong></font></p><p><font color="cornflowerblue">1.添加依赖</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Junit5测试单元--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="cornflowerblue">2.测试</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.wdzl.service.AccountService;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.extension.ExtendWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit.jupiter.SpringExtension;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@ExtendWith(SpringExtension.class)</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:bean.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Junit5TestDemo</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountService accountService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        String outName = <span class="hljs-string">&quot;张三&quot;</span>;<br>        String inName = <span class="hljs-string">&quot;李四&quot;</span>;<br>        <span class="hljs-keyword">double</span> money = <span class="hljs-number">500.00</span>;<br>        accountService.transferAccounts(outName,inName,money);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简化写法</p><p><img src="/color-ful/img/spring5/image-20210327015510433.png" alt="image-20210327015510433"></p>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring5</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
